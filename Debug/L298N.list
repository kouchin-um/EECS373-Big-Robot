
L298N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009528  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  080096e8  080096e8  000196e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b34  08009b34  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009b34  08009b34  00019b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b3c  08009b3c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b3c  08009b3c  00019b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b40  08009b40  00019b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009b44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  200001dc  08009d20  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08009d20  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164d8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026e6  00000000  00000000  000366e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  00038dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012a0  00000000  00000000  0003a150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b8d7  00000000  00000000  0003b3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017081  00000000  00000000  00066cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c244  00000000  00000000  0007dd48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00189f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000639c  00000000  00000000  00189fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080096d0 	.word	0x080096d0

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	080096d0 	.word	0x080096d0

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08e      	sub	sp, #56	; 0x38
 8000ee0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f001 f9c8 	bl	8002276 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f8ed 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f000 fbd9 	bl	80016a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000eee:	f000 fa71 	bl	80013d4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ef2:	f000 f9b7 	bl	8001264 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000ef6:	f000 f92b 	bl	8001150 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000efa:	f000 f967 	bl	80011cc <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8000efe:	f000 fadf 	bl	80014c0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f02:	f000 fb55 	bl	80015b0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // I2C initialization
  // enter normal mode
  uint8_t buf_mode[10]= {AMG88xx_PCTL, AMG88xx_NORMAL_MODE};
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
 8000f0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_mode[0], 2, 1000);
 8000f14:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2302      	movs	r3, #2
 8000f20:	21d2      	movs	r1, #210	; 0xd2
 8000f22:	4860      	ldr	r0, [pc, #384]	; (80010a4 <main+0x1c8>)
 8000f24:	f001 fd60 	bl	80029e8 <HAL_I2C_Master_Transmit>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b5e      	ldr	r3, [pc, #376]	; (80010a8 <main+0x1cc>)
 8000f2e:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf_mode[0], 1, 1000);
 8000f30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	21d3      	movs	r1, #211	; 0xd3
 8000f3e:	4859      	ldr	r0, [pc, #356]	; (80010a4 <main+0x1c8>)
 8000f40:	f001 fe46 	bl	8002bd0 <HAL_I2C_Master_Receive>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b57      	ldr	r3, [pc, #348]	; (80010a8 <main+0x1cc>)
 8000f4a:	701a      	strb	r2, [r3, #0]

  // software reset
  uint8_t buf_rst[10]= {AMG88xx_RST, AMG88xx_INITIAL_RESET};
 8000f4c:	f643 7301 	movw	r3, #16129	; 0x3f01
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_rst[0], 2, 1000);
 8000f5c:	f107 0218 	add.w	r2, r7, #24
 8000f60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	2302      	movs	r3, #2
 8000f68:	21d2      	movs	r1, #210	; 0xd2
 8000f6a:	484e      	ldr	r0, [pc, #312]	; (80010a4 <main+0x1c8>)
 8000f6c:	f001 fd3c 	bl	80029e8 <HAL_I2C_Master_Transmit>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b4c      	ldr	r3, [pc, #304]	; (80010a8 <main+0x1cc>)
 8000f76:	701a      	strb	r2, [r3, #0]

  // disable interrupts by default
  uint8_t buf_int[10]= {AMG88xx_INTC, 0};
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_int[0], 2, 1000);
 8000f86:	f107 020c 	add.w	r2, r7, #12
 8000f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	2302      	movs	r3, #2
 8000f92:	21d2      	movs	r1, #210	; 0xd2
 8000f94:	4843      	ldr	r0, [pc, #268]	; (80010a4 <main+0x1c8>)
 8000f96:	f001 fd27 	bl	80029e8 <HAL_I2C_Master_Transmit>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <main+0x1cc>)
 8000fa0:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf_int[0], 1, 1000);
 8000fa2:	f107 020c 	add.w	r2, r7, #12
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2301      	movs	r3, #1
 8000fae:	21d3      	movs	r1, #211	; 0xd3
 8000fb0:	483c      	ldr	r0, [pc, #240]	; (80010a4 <main+0x1c8>)
 8000fb2:	f001 fe0d 	bl	8002bd0 <HAL_I2C_Master_Receive>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <main+0x1cc>)
 8000fbc:	701a      	strb	r2, [r3, #0]

  // set to 10 FPS
  uint8_t buf_fps[10]= {AMG88xx_FPSC, AMG88xx_FPS_10};
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_fps[0], 2, 1000);
 8000fca:	463a      	mov	r2, r7
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	21d2      	movs	r1, #210	; 0xd2
 8000fd6:	4833      	ldr	r0, [pc, #204]	; (80010a4 <main+0x1c8>)
 8000fd8:	f001 fd06 	bl	80029e8 <HAL_I2C_Master_Transmit>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b31      	ldr	r3, [pc, #196]	; (80010a8 <main+0x1cc>)
 8000fe2:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf_fps[0], 1, 1000);
 8000fe4:	463a      	mov	r2, r7
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	21d3      	movs	r1, #211	; 0xd3
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <main+0x1c8>)
 8000ff2:	f001 fded 	bl	8002bd0 <HAL_I2C_Master_Receive>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <main+0x1cc>)
 8000ffc:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8000ffe:	2064      	movs	r0, #100	; 0x64
 8001000:	f001 f9ae 	bl	8002360 <HAL_Delay>

  // PWM initialization

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001004:	2100      	movs	r1, #0
 8001006:	4829      	ldr	r0, [pc, #164]	; (80010ac <main+0x1d0>)
 8001008:	f003 ff64 	bl	8004ed4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800100c:	2100      	movs	r1, #0
 800100e:	4828      	ldr	r0, [pc, #160]	; (80010b0 <main+0x1d4>)
 8001010:	f003 ff60 	bl	8004ed4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8001014:	2108      	movs	r1, #8
 8001016:	4827      	ldr	r0, [pc, #156]	; (80010b4 <main+0x1d8>)
 8001018:	f003 ff5c 	bl	8004ed4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800101c:	210c      	movs	r1, #12
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <main+0x1dc>)
 8001020:	f003 ff58 	bl	8004ed4 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 8001024:	2200      	movs	r2, #0
 8001026:	2110      	movs	r1, #16
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f001 fc34 	bl	8002898 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 8001030:	2200      	movs	r2, #0
 8001032:	2110      	movs	r1, #16
 8001034:	4821      	ldr	r0, [pc, #132]	; (80010bc <main+0x1e0>)
 8001036:	f001 fc2f 	bl	8002898 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 800103a:	2200      	movs	r2, #0
 800103c:	2108      	movs	r1, #8
 800103e:	481f      	ldr	r0, [pc, #124]	; (80010bc <main+0x1e0>)
 8001040:	f001 fc2a 	bl	8002898 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 8001044:	2200      	movs	r2, #0
 8001046:	2120      	movs	r1, #32
 8001048:	481c      	ldr	r0, [pc, #112]	; (80010bc <main+0x1e0>)
 800104a:	f001 fc25 	bl	8002898 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,  0);	// PB12
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001054:	4819      	ldr	r0, [pc, #100]	; (80010bc <main+0x1e0>)
 8001056:	f001 fc1f 	bl	8002898 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,  0);	// PB13
 800105a:	2200      	movs	r2, #0
 800105c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001060:	4816      	ldr	r0, [pc, #88]	; (80010bc <main+0x1e0>)
 8001062:	f001 fc19 	bl	8002898 <HAL_GPIO_WritePin>
  // wheels
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 600);		// set the new pulse width
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <main+0x1d0>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f44f 7216 	mov.w	r2, #600	; 0x258
 800106e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 600);		// set the new pulse width
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <main+0x1d4>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001078:	635a      	str	r2, [r3, #52]	; 0x34
  // gun shooting
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 800);
 800107a:	4b0f      	ldr	r3, [pc, #60]	; (80010b8 <main+0x1dc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001082:	641a      	str	r2, [r3, #64]	; 0x40
  // servo
  current_angle = -15;
 8001084:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <main+0x1e4>)
 8001086:	f06f 020e 	mvn.w	r2, #14
 800108a:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (240 - 60) * (current_angle + 90) / 180 + 60);		// set the new pulse width
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <main+0x1e4>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f103 0296 	add.w	r2, r3, #150	; 0x96
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <main+0x1d8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_Delay(100);
 800109a:	2064      	movs	r0, #100	; 0x64
 800109c:	f001 f960 	bl	8002360 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <main+0x1c4>
 80010a2:	bf00      	nop
 80010a4:	200001f8 	.word	0x200001f8
 80010a8:	20000404 	.word	0x20000404
 80010ac:	200002d4 	.word	0x200002d4
 80010b0:	20000320 	.word	0x20000320
 80010b4:	2000036c 	.word	0x2000036c
 80010b8:	200003b8 	.word	0x200003b8
 80010bc:	48000400 	.word	0x48000400
 80010c0:	20000408 	.word	0x20000408

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b096      	sub	sp, #88	; 0x58
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	2244      	movs	r2, #68	; 0x44
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 fdde 	bl	8006c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ea:	f002 f997 	bl	800341c <HAL_PWREx_ControlVoltageScaling>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f4:	f000 fcfe 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80010f8:	2310      	movs	r3, #16
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010fc:	2301      	movs	r3, #1
 80010fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_2;
 8001104:	2320      	movs	r3, #32
 8001106:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001108:	2300      	movs	r3, #0
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4618      	mov	r0, r3
 8001112:	f002 fa37 	bl	8003584 <HAL_RCC_OscConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800111c:	f000 fcea 	bl	8001af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001120:	230f      	movs	r3, #15
 8001122:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fe49 	bl	8003dd0 <HAL_RCC_ClockConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001144:	f000 fcd6 	bl	8001af4 <Error_Handler>
  }
}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	; 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001154:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001156:	4a1c      	ldr	r2, [pc, #112]	; (80011c8 <MX_I2C1_Init+0x78>)
 8001158:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000000;
 800115a:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_I2C1_Init+0x74>)
 800115c:	2200      	movs	r2, #0
 800115e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001160:	4b18      	ldr	r3, [pc, #96]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001168:	2201      	movs	r2, #1
 800116a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_I2C1_Init+0x74>)
 800116e:	2200      	movs	r2, #0
 8001170:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001174:	2200      	movs	r2, #0
 8001176:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <MX_I2C1_Init+0x74>)
 800117a:	2200      	movs	r2, #0
 800117c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800117e:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001180:	2200      	movs	r2, #0
 8001182:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001184:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <MX_I2C1_Init+0x74>)
 8001186:	2200      	movs	r2, #0
 8001188:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <MX_I2C1_Init+0x74>)
 800118c:	f001 fb9c 	bl	80028c8 <HAL_I2C_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001196:	f000 fcad 	bl	8001af4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800119a:	2100      	movs	r1, #0
 800119c:	4809      	ldr	r0, [pc, #36]	; (80011c4 <MX_I2C1_Init+0x74>)
 800119e:	f002 f885 	bl	80032ac <HAL_I2CEx_ConfigAnalogFilter>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011a8:	f000 fca4 	bl	8001af4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ac:	2100      	movs	r1, #0
 80011ae:	4805      	ldr	r0, [pc, #20]	; (80011c4 <MX_I2C1_Init+0x74>)
 80011b0:	f002 f8c7 	bl	8003342 <HAL_I2CEx_ConfigDigitalFilter>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011ba:	f000 fc9b 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200001f8 	.word	0x200001f8
 80011c8:	40005400 	.word	0x40005400

080011cc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011d0:	4b22      	ldr	r3, [pc, #136]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011d2:	4a23      	ldr	r2, [pc, #140]	; (8001260 <MX_LPUART1_UART_Init+0x94>)
 80011d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b1c      	ldr	r3, [pc, #112]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b1a      	ldr	r3, [pc, #104]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b19      	ldr	r3, [pc, #100]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 800120a:	2200      	movs	r2, #0
 800120c:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 8001210:	2200      	movs	r2, #0
 8001212:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 8001216:	f004 fe77 	bl	8005f08 <HAL_UART_Init>
 800121a:	4603      	mov	r3, r0
 800121c:	2b00      	cmp	r3, #0
 800121e:	d001      	beq.n	8001224 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001220:	f000 fc68 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001224:	2100      	movs	r1, #0
 8001226:	480d      	ldr	r0, [pc, #52]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 8001228:	f005 fc40 	bl	8006aac <HAL_UARTEx_SetTxFifoThreshold>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001232:	f000 fc5f 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001236:	2100      	movs	r1, #0
 8001238:	4808      	ldr	r0, [pc, #32]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 800123a:	f005 fc75 	bl	8006b28 <HAL_UARTEx_SetRxFifoThreshold>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001244:	f000 fc56 	bl	8001af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001248:	4804      	ldr	r0, [pc, #16]	; (800125c <MX_LPUART1_UART_Init+0x90>)
 800124a:	f005 fbf6 	bl	8006a3a <HAL_UARTEx_DisableFifoMode>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001254:	f000 fc4e 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000244 	.word	0x20000244
 8001260:	40008000 	.word	0x40008000

08001264 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b09a      	sub	sp, #104	; 0x68
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
 8001276:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001278:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
 8001294:	615a      	str	r2, [r3, #20]
 8001296:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001298:	1d3b      	adds	r3, r7, #4
 800129a:	222c      	movs	r2, #44	; 0x2c
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f005 fcf8 	bl	8006c94 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012a4:	4b49      	ldr	r3, [pc, #292]	; (80013cc <MX_TIM1_Init+0x168>)
 80012a6:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <MX_TIM1_Init+0x16c>)
 80012a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80012aa:	4b48      	ldr	r3, [pc, #288]	; (80013cc <MX_TIM1_Init+0x168>)
 80012ac:	2201      	movs	r2, #1
 80012ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b0:	4b46      	ldr	r3, [pc, #280]	; (80013cc <MX_TIM1_Init+0x168>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80012b6:	4b45      	ldr	r3, [pc, #276]	; (80013cc <MX_TIM1_Init+0x168>)
 80012b8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012be:	4b43      	ldr	r3, [pc, #268]	; (80013cc <MX_TIM1_Init+0x168>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012c4:	4b41      	ldr	r3, [pc, #260]	; (80013cc <MX_TIM1_Init+0x168>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ca:	4b40      	ldr	r3, [pc, #256]	; (80013cc <MX_TIM1_Init+0x168>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d0:	483e      	ldr	r0, [pc, #248]	; (80013cc <MX_TIM1_Init+0x168>)
 80012d2:	f003 fd47 	bl	8004d64 <HAL_TIM_Base_Init>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012dc:	f000 fc0a 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ea:	4619      	mov	r1, r3
 80012ec:	4837      	ldr	r0, [pc, #220]	; (80013cc <MX_TIM1_Init+0x168>)
 80012ee:	f004 f80b 	bl	8005308 <HAL_TIM_ConfigClockSource>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012f8:	f000 fbfc 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012fc:	4833      	ldr	r0, [pc, #204]	; (80013cc <MX_TIM1_Init+0x168>)
 80012fe:	f003 fd88 	bl	8004e12 <HAL_TIM_PWM_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001308:	f000 fbf4 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001310:	2300      	movs	r3, #0
 8001312:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001318:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800131c:	4619      	mov	r1, r3
 800131e:	482b      	ldr	r0, [pc, #172]	; (80013cc <MX_TIM1_Init+0x168>)
 8001320:	f004 fcec 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800132a:	f000 fbe3 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132e:	2360      	movs	r3, #96	; 0x60
 8001330:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001332:	2300      	movs	r3, #0
 8001334:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800134a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	481e      	ldr	r0, [pc, #120]	; (80013cc <MX_TIM1_Init+0x168>)
 8001354:	f003 fec4 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800135e:	f000 fbc9 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001362:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001366:	2204      	movs	r2, #4
 8001368:	4619      	mov	r1, r3
 800136a:	4818      	ldr	r0, [pc, #96]	; (80013cc <MX_TIM1_Init+0x168>)
 800136c:	f003 feb8 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001376:	f000 fbbd 	bl	8001af4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800138e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001392:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800139c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4807      	ldr	r0, [pc, #28]	; (80013cc <MX_TIM1_Init+0x168>)
 80013b0:	f004 fd2c 	bl	8005e0c <HAL_TIMEx_ConfigBreakDeadTime>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80013ba:	f000 fb9b 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <MX_TIM1_Init+0x168>)
 80013c0:	f000 fd86 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 80013c4:	bf00      	nop
 80013c6:	3768      	adds	r7, #104	; 0x68
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	200002d4 	.word	0x200002d4
 80013d0:	40012c00 	.word	0x40012c00

080013d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	; 0x38
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001410:	2201      	movs	r2, #1
 8001412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_TIM2_Init+0xe8>)
 800141c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b24      	ldr	r3, [pc, #144]	; (80014bc <MX_TIM2_Init+0xe8>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142e:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_TIM2_Init+0xe8>)
 8001430:	f003 fc98 	bl	8004d64 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 fb5b 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_TIM2_Init+0xe8>)
 800144c:	f003 ff5c 	bl	8005308 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001456:	f000 fb4d 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800145a:	4818      	ldr	r0, [pc, #96]	; (80014bc <MX_TIM2_Init+0xe8>)
 800145c:	f003 fcd9 	bl	8004e12 <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001466:	f000 fb45 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	4810      	ldr	r0, [pc, #64]	; (80014bc <MX_TIM2_Init+0xe8>)
 800147a:	f004 fc3f 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001484:	f000 fb36 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	; 0x60
 800148a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_TIM2_Init+0xe8>)
 80014a0:	f003 fe1e 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014aa:	f000 fb23 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <MX_TIM2_Init+0xe8>)
 80014b0:	f000 fd0e 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000320 	.word	0x20000320

080014c0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08e      	sub	sp, #56	; 0x38
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	463b      	mov	r3, r7
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
 80014ec:	611a      	str	r2, [r3, #16]
 80014ee:	615a      	str	r2, [r3, #20]
 80014f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	; (80015a8 <MX_TIM3_Init+0xe8>)
 80014f4:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <MX_TIM3_Init+0xec>)
 80014f6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM3_Init+0xe8>)
 80014fa:	2203      	movs	r2, #3
 80014fc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <MX_TIM3_Init+0xe8>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM3_Init+0xe8>)
 8001506:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_TIM3_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_TIM3_Init+0xe8>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <MX_TIM3_Init+0xe8>)
 800151a:	f003 fc23 	bl	8004d64 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001524:	f000 fae6 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	; (80015a8 <MX_TIM3_Init+0xe8>)
 8001536:	f003 fee7 	bl	8005308 <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001540:	f000 fad8 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM3_Init+0xe8>)
 8001546:	f003 fc64 	bl	8004e12 <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001550:	f000 fad0 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_TIM3_Init+0xe8>)
 8001564:	f004 fbca 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800156e:	f000 fac1 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 150;
 8001576:	2396      	movs	r3, #150	; 0x96
 8001578:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001582:	463b      	mov	r3, r7
 8001584:	2208      	movs	r2, #8
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM3_Init+0xe8>)
 800158a:	f003 fda9 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001594:	f000 faae 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM3_Init+0xe8>)
 800159a:	f000 fc99 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	; 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	2000036c 	.word	0x2000036c
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08e      	sub	sp, #56	; 0x38
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c4:	f107 031c 	add.w	r3, r7, #28
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d0:	463b      	mov	r3, r7
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015e2:	4b2d      	ldr	r3, [pc, #180]	; (8001698 <MX_TIM4_Init+0xe8>)
 80015e4:	4a2d      	ldr	r2, [pc, #180]	; (800169c <MX_TIM4_Init+0xec>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <MX_TIM4_Init+0xe8>)
 80015ea:	2201      	movs	r2, #1
 80015ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <MX_TIM4_Init+0xe8>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <MX_TIM4_Init+0xe8>)
 80015f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015fa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <MX_TIM4_Init+0xe8>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001602:	4b25      	ldr	r3, [pc, #148]	; (8001698 <MX_TIM4_Init+0xe8>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001608:	4823      	ldr	r0, [pc, #140]	; (8001698 <MX_TIM4_Init+0xe8>)
 800160a:	f003 fbab 	bl	8004d64 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001614:	f000 fa6e 	bl	8001af4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800161e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001622:	4619      	mov	r1, r3
 8001624:	481c      	ldr	r0, [pc, #112]	; (8001698 <MX_TIM4_Init+0xe8>)
 8001626:	f003 fe6f 	bl	8005308 <HAL_TIM_ConfigClockSource>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001630:	f000 fa60 	bl	8001af4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001634:	4818      	ldr	r0, [pc, #96]	; (8001698 <MX_TIM4_Init+0xe8>)
 8001636:	f003 fbec 	bl	8004e12 <HAL_TIM_PWM_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001640:	f000 fa58 	bl	8001af4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4811      	ldr	r0, [pc, #68]	; (8001698 <MX_TIM4_Init+0xe8>)
 8001654:	f004 fb52 	bl	8005cfc <HAL_TIMEx_MasterConfigSynchronization>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800165e:	f000 fa49 	bl	8001af4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001662:	2360      	movs	r3, #96	; 0x60
 8001664:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001672:	463b      	mov	r3, r7
 8001674:	220c      	movs	r2, #12
 8001676:	4619      	mov	r1, r3
 8001678:	4807      	ldr	r0, [pc, #28]	; (8001698 <MX_TIM4_Init+0xe8>)
 800167a:	f003 fd31 	bl	80050e0 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001684:	f000 fa36 	bl	8001af4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001688:	4803      	ldr	r0, [pc, #12]	; (8001698 <MX_TIM4_Init+0xe8>)
 800168a:	f000 fc21 	bl	8001ed0 <HAL_TIM_MspPostInit>

}
 800168e:	bf00      	nop
 8001690:	3738      	adds	r7, #56	; 0x38
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	200003b8 	.word	0x200003b8
 800169c:	40000800 	.word	0x40000800

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08e      	sub	sp, #56	; 0x38
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	4bb6      	ldr	r3, [pc, #728]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ba:	4ab5      	ldr	r2, [pc, #724]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016bc:	f043 0310 	orr.w	r3, r3, #16
 80016c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016c2:	4bb3      	ldr	r3, [pc, #716]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c6:	f003 0310 	and.w	r3, r3, #16
 80016ca:	623b      	str	r3, [r7, #32]
 80016cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4bb0      	ldr	r3, [pc, #704]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	4aaf      	ldr	r2, [pc, #700]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016da:	4bad      	ldr	r3, [pc, #692]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	61fb      	str	r3, [r7, #28]
 80016e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016e6:	4baa      	ldr	r3, [pc, #680]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ea:	4aa9      	ldr	r2, [pc, #676]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016ec:	f043 0320 	orr.w	r3, r3, #32
 80016f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016f2:	4ba7      	ldr	r3, [pc, #668]	; (8001990 <MX_GPIO_Init+0x2f0>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f6:	f003 0320 	and.w	r3, r3, #32
 80016fa:	61bb      	str	r3, [r7, #24]
 80016fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016fe:	4ba4      	ldr	r3, [pc, #656]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001702:	4aa3      	ldr	r2, [pc, #652]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001708:	64d3      	str	r3, [r2, #76]	; 0x4c
 800170a:	4ba1      	ldr	r3, [pc, #644]	; (8001990 <MX_GPIO_Init+0x2f0>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001716:	4b9e      	ldr	r3, [pc, #632]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	4a9d      	ldr	r2, [pc, #628]	; (8001990 <MX_GPIO_Init+0x2f0>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001722:	4b9b      	ldr	r3, [pc, #620]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	4b98      	ldr	r3, [pc, #608]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a97      	ldr	r2, [pc, #604]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001734:	f043 0302 	orr.w	r3, r3, #2
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b95      	ldr	r3, [pc, #596]	; (8001990 <MX_GPIO_Init+0x2f0>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001746:	4b92      	ldr	r3, [pc, #584]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	4a91      	ldr	r2, [pc, #580]	; (8001990 <MX_GPIO_Init+0x2f0>)
 800174c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001752:	4b8f      	ldr	r3, [pc, #572]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800175e:	4b8c      	ldr	r3, [pc, #560]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001762:	4a8b      	ldr	r2, [pc, #556]	; (8001990 <MX_GPIO_Init+0x2f0>)
 8001764:	f043 0308 	orr.w	r3, r3, #8
 8001768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176a:	4b89      	ldr	r3, [pc, #548]	; (8001990 <MX_GPIO_Init+0x2f0>)
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	f003 0308 	and.w	r3, r3, #8
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001776:	f001 fef5 	bl	8003564 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	2110      	movs	r1, #16
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f001 f889 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001786:	2200      	movs	r2, #0
 8001788:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800178c:	4881      	ldr	r0, [pc, #516]	; (8001994 <MX_GPIO_Init+0x2f4>)
 800178e:	f001 f883 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_13, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8001798:	487f      	ldr	r0, [pc, #508]	; (8001998 <MX_GPIO_Init+0x2f8>)
 800179a:	f001 f87d 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 800179e:	2200      	movs	r2, #0
 80017a0:	f243 0138 	movw	r1, #12344	; 0x3038
 80017a4:	487d      	ldr	r0, [pc, #500]	; (800199c <MX_GPIO_Init+0x2fc>)
 80017a6:	f001 f877 	bl	8002898 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 7140 	mov.w	r1, #768	; 0x300
 80017b0:	487b      	ldr	r0, [pc, #492]	; (80019a0 <MX_GPIO_Init+0x300>)
 80017b2:	f001 f871 	bl	8002898 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017b6:	230c      	movs	r3, #12
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80017c6:	230d      	movs	r3, #13
 80017c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	4871      	ldr	r0, [pc, #452]	; (8001998 <MX_GPIO_Init+0x2f8>)
 80017d2:	f000 fecf 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	486e      	ldr	r0, [pc, #440]	; (80019a4 <MX_GPIO_Init+0x304>)
 80017ec:	f000 fec2 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80017f0:	2307      	movs	r3, #7
 80017f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f4:	2312      	movs	r3, #18
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001800:	2304      	movs	r3, #4
 8001802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001808:	4619      	mov	r1, r3
 800180a:	4862      	ldr	r0, [pc, #392]	; (8001994 <MX_GPIO_Init+0x2f4>)
 800180c:	f000 feb2 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001810:	2380      	movs	r3, #128	; 0x80
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001820:	230d      	movs	r3, #13
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001828:	4619      	mov	r1, r3
 800182a:	485a      	ldr	r0, [pc, #360]	; (8001994 <MX_GPIO_Init+0x2f4>)
 800182c:	f000 fea2 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001830:	233f      	movs	r3, #63	; 0x3f
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001834:	230b      	movs	r3, #11
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800183c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001840:	4619      	mov	r1, r3
 8001842:	4858      	ldr	r0, [pc, #352]	; (80019a4 <MX_GPIO_Init+0x304>)
 8001844:	f000 fe96 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001848:	230a      	movs	r3, #10
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800184c:	230b      	movs	r3, #11
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001858:	4619      	mov	r1, r3
 800185a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800185e:	f000 fe89 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001862:	2310      	movs	r3, #16
 8001864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001866:	2301      	movs	r3, #1
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f000 fe7a 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001880:	23e0      	movs	r3, #224	; 0xe0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001884:	2302      	movs	r3, #2
 8001886:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	2303      	movs	r3, #3
 800188e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001890:	2305      	movs	r3, #5
 8001892:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001898:	4619      	mov	r1, r3
 800189a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800189e:	f000 fe69 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018a2:	2302      	movs	r3, #2
 80018a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018a6:	230b      	movs	r3, #11
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4839      	ldr	r0, [pc, #228]	; (800199c <MX_GPIO_Init+0x2fc>)
 80018b6:	f000 fe5d 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80018ba:	2344      	movs	r3, #68	; 0x44
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018be:	2303      	movs	r3, #3
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4833      	ldr	r0, [pc, #204]	; (800199c <MX_GPIO_Init+0x2fc>)
 80018ce:	f000 fe51 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d8:	2301      	movs	r3, #1
 80018da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e0:	2300      	movs	r3, #0
 80018e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	482a      	ldr	r0, [pc, #168]	; (8001994 <MX_GPIO_Init+0x2f4>)
 80018ec:	f000 fe42 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018f0:	2301      	movs	r3, #1
 80018f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001900:	4619      	mov	r1, r3
 8001902:	4829      	ldr	r0, [pc, #164]	; (80019a8 <MX_GPIO_Init+0x308>)
 8001904:	f000 fe36 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_13;
 8001908:	f44f 5304 	mov.w	r3, #8448	; 0x2100
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800190e:	2301      	movs	r3, #1
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001916:	2300      	movs	r3, #0
 8001918:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	481d      	ldr	r0, [pc, #116]	; (8001998 <MX_GPIO_Init+0x2f8>)
 8001922:	f000 fe27 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 8001926:	f243 0338 	movw	r3, #12344	; 0x3038
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192c:	2301      	movs	r3, #1
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800193c:	4619      	mov	r1, r3
 800193e:	4817      	ldr	r0, [pc, #92]	; (800199c <MX_GPIO_Init+0x2fc>)
 8001940:	f000 fe18 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001956:	230e      	movs	r3, #14
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <MX_GPIO_Init+0x2fc>)
 8001962:	f000 fe07 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8001978:	230d      	movs	r3, #13
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	4619      	mov	r1, r3
 8001982:	4806      	ldr	r0, [pc, #24]	; (800199c <MX_GPIO_Init+0x2fc>)
 8001984:	f000 fdf6 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001988:	f44f 7340 	mov.w	r3, #768	; 0x300
 800198c:	e00e      	b.n	80019ac <MX_GPIO_Init+0x30c>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	48001400 	.word	0x48001400
 8001998:	48001000 	.word	0x48001000
 800199c:	48000400 	.word	0x48000400
 80019a0:	48000c00 	.word	0x48000c00
 80019a4:	48000800 	.word	0x48000800
 80019a8:	48001800 	.word	0x48001800
 80019ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	4619      	mov	r1, r3
 80019c0:	4841      	ldr	r0, [pc, #260]	; (8001ac8 <MX_GPIO_Init+0x428>)
 80019c2:	f000 fdd7 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019c6:	2340      	movs	r3, #64	; 0x40
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80019d6:	230d      	movs	r3, #13
 80019d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019de:	4619      	mov	r1, r3
 80019e0:	483a      	ldr	r0, [pc, #232]	; (8001acc <MX_GPIO_Init+0x42c>)
 80019e2:	f000 fdc7 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019e6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019f8:	230c      	movs	r3, #12
 80019fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a00:	4619      	mov	r1, r3
 8001a02:	4832      	ldr	r0, [pc, #200]	; (8001acc <MX_GPIO_Init+0x42c>)
 8001a04:	f000 fdb6 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001a08:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0e:	2302      	movs	r3, #2
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a16:	2303      	movs	r3, #3
 8001a18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f000 fda4 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a44:	f000 fd96 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a54:	2303      	movs	r3, #3
 8001a56:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a58:	2309      	movs	r3, #9
 8001a5a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a60:	4619      	mov	r1, r3
 8001a62:	4819      	ldr	r0, [pc, #100]	; (8001ac8 <MX_GPIO_Init+0x428>)
 8001a64:	f000 fd86 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4813      	ldr	r0, [pc, #76]	; (8001ac8 <MX_GPIO_Init+0x428>)
 8001a7c:	f000 fd7a 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a80:	2304      	movs	r3, #4
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a90:	230c      	movs	r3, #12
 8001a92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480b      	ldr	r0, [pc, #44]	; (8001ac8 <MX_GPIO_Init+0x428>)
 8001a9c:	f000 fd6a 	bl	8002574 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001aa0:	2378      	movs	r3, #120	; 0x78
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ab0:	2307      	movs	r3, #7
 8001ab2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ab4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4803      	ldr	r0, [pc, #12]	; (8001ac8 <MX_GPIO_Init+0x428>)
 8001abc:	f000 fd5a 	bl	8002574 <HAL_GPIO_Init>

}
 8001ac0:	bf00      	nop
 8001ac2:	3738      	adds	r7, #56	; 0x38
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	48000c00 	.word	0x48000c00
 8001acc:	48000800 	.word	0x48000800

08001ad0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001ad8:	1d39      	adds	r1, r7, #4
 8001ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4803      	ldr	r0, [pc, #12]	; (8001af0 <__io_putchar+0x20>)
 8001ae2:	f004 fa61 	bl	8005fa8 <HAL_UART_Transmit>
  return ch;
 8001ae6:	687b      	ldr	r3, [r7, #4]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000244 	.word	0x20000244

08001af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af8:	b672      	cpsid	i
}
 8001afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001afc:	e7fe      	b.n	8001afc <Error_Handler+0x8>
	...

08001b00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b06:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <HAL_MspInit+0x44>)
 8001b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b0a:	4a0e      	ldr	r2, [pc, #56]	; (8001b44 <HAL_MspInit+0x44>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6613      	str	r3, [r2, #96]	; 0x60
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_MspInit+0x44>)
 8001b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_MspInit+0x44>)
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	4a08      	ldr	r2, [pc, #32]	; (8001b44 <HAL_MspInit+0x44>)
 8001b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b28:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_MspInit+0x44>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b0ae      	sub	sp, #184	; 0xb8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	609a      	str	r2, [r3, #8]
 8001b5c:	60da      	str	r2, [r3, #12]
 8001b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b60:	f107 0310 	add.w	r3, r7, #16
 8001b64:	2294      	movs	r2, #148	; 0x94
 8001b66:	2100      	movs	r1, #0
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f005 f893 	bl	8006c94 <memset>
  if(hi2c->Instance==I2C1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <HAL_I2C_MspInit+0xb0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d13b      	bne.n	8001bf0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001b78:	2340      	movs	r3, #64	; 0x40
 8001b7a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4618      	mov	r0, r3
 8001b86:	f002 fbd5 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b90:	f7ff ffb0 	bl	8001af4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b94:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	4a18      	ldr	r2, [pc, #96]	; (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ba0:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bc6:	2304      	movs	r3, #4
 8001bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	480b      	ldr	r0, [pc, #44]	; (8001c00 <HAL_I2C_MspInit+0xb8>)
 8001bd4:	f000 fcce 	bl	8002574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bd8:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	4a07      	ldr	r2, [pc, #28]	; (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001bde:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001be2:	6593      	str	r3, [r2, #88]	; 0x58
 8001be4:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_I2C_MspInit+0xb4>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bec:	60bb      	str	r3, [r7, #8]
 8001bee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	37b8      	adds	r7, #184	; 0xb8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40005400 	.word	0x40005400
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	48000400 	.word	0x48000400

08001c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0ae      	sub	sp, #184	; 0xb8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2294      	movs	r2, #148	; 0x94
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f005 f835 	bl	8006c94 <memset>
  if(huart->Instance==LPUART1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_UART_MspInit+0xb4>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d13d      	bne.n	8001cb0 <HAL_UART_MspInit+0xac>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001c34:	2320      	movs	r3, #32
 8001c36:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4618      	mov	r0, r3
 8001c42:	f002 fb77 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c4c:	f7ff ff52 	bl	8001af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001c50:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <HAL_UART_MspInit+0xb8>)
 8001c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_UART_MspInit+0xb8>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <HAL_UART_MspInit+0xb8>)
 8001c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60fb      	str	r3, [r7, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_UART_MspInit+0xb8>)
 8001c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c6c:	4a13      	ldr	r2, [pc, #76]	; (8001cbc <HAL_UART_MspInit+0xb8>)
 8001c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <HAL_UART_MspInit+0xb8>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8001c80:	f001 fc70 	bl	8003564 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001c84:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001c9e:	2308      	movs	r3, #8
 8001ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ca4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4805      	ldr	r0, [pc, #20]	; (8001cc0 <HAL_UART_MspInit+0xbc>)
 8001cac:	f000 fc62 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001cb0:	bf00      	nop
 8001cb2:	37b8      	adds	r7, #184	; 0xb8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40008000 	.word	0x40008000
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	48001800 	.word	0x48001800

08001cc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b090      	sub	sp, #64	; 0x40
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a73      	ldr	r2, [pc, #460]	; (8001eb0 <HAL_TIM_Base_MspInit+0x1ec>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d139      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cea:	4a72      	ldr	r2, [pc, #456]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001cec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001cf2:	4b70      	ldr	r3, [pc, #448]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cfe:	4b6d      	ldr	r3, [pc, #436]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d02:	4a6c      	ldr	r2, [pc, #432]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d04:	f043 0310 	orr.w	r3, r3, #16
 8001d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0a:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	627b      	str	r3, [r7, #36]	; 0x24
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PE7     ------> TIM1_ETR
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4861      	ldr	r0, [pc, #388]	; (8001eb8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001d32:	f000 fc1f 	bl	8002574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d36:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d50:	4619      	mov	r1, r3
 8001d52:	4859      	ldr	r0, [pc, #356]	; (8001eb8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001d54:	f000 fc0e 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d58:	e0a6      	b.n	8001ea8 <HAL_TIM_Base_MspInit+0x1e4>
  else if(htim_base->Instance==TIM2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d62:	d129      	bne.n	8001db8 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d64:	4b53      	ldr	r3, [pc, #332]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d68:	4a52      	ldr	r2, [pc, #328]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d70:	4b50      	ldr	r3, [pc, #320]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	623b      	str	r3, [r7, #32]
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d7c:	4b4d      	ldr	r3, [pc, #308]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4a4c      	ldr	r2, [pc, #304]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d82:	f043 0302 	orr.w	r3, r3, #2
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d88:	4b4a      	ldr	r3, [pc, #296]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001da6:	2301      	movs	r3, #1
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4619      	mov	r1, r3
 8001db0:	4842      	ldr	r0, [pc, #264]	; (8001ebc <HAL_TIM_Base_MspInit+0x1f8>)
 8001db2:	f000 fbdf 	bl	8002574 <HAL_GPIO_Init>
}
 8001db6:	e077      	b.n	8001ea8 <HAL_TIM_Base_MspInit+0x1e4>
  else if(htim_base->Instance==TIM3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a40      	ldr	r2, [pc, #256]	; (8001ec0 <HAL_TIM_Base_MspInit+0x1fc>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d128      	bne.n	8001e14 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dc2:	4b3c      	ldr	r3, [pc, #240]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001dce:	4b39      	ldr	r3, [pc, #228]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	4b36      	ldr	r3, [pc, #216]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0304 	and.w	r3, r3, #4
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001df2:	2380      	movs	r3, #128	; 0x80
 8001df4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df6:	2302      	movs	r3, #2
 8001df8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e02:	2302      	movs	r3, #2
 8001e04:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	482d      	ldr	r0, [pc, #180]	; (8001ec4 <HAL_TIM_Base_MspInit+0x200>)
 8001e0e:	f000 fbb1 	bl	8002574 <HAL_GPIO_Init>
}
 8001e12:	e049      	b.n	8001ea8 <HAL_TIM_Base_MspInit+0x1e4>
  else if(htim_base->Instance==TIM4)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <HAL_TIM_Base_MspInit+0x204>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d144      	bne.n	8001ea8 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e1e:	4b25      	ldr	r3, [pc, #148]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e22:	4a24      	ldr	r2, [pc, #144]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6593      	str	r3, [r2, #88]	; 0x58
 8001e2a:	4b22      	ldr	r3, [pc, #136]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e3c:	f043 0308 	orr.w	r3, r3, #8
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e54:	f043 0310 	orr.w	r3, r3, #16
 8001e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e5a:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_TIM_Base_MspInit+0x1f0>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	f003 0310 	and.w	r3, r3, #16
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001e66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e80:	4619      	mov	r1, r3
 8001e82:	4812      	ldr	r0, [pc, #72]	; (8001ecc <HAL_TIM_Base_MspInit+0x208>)
 8001e84:	f000 fb76 	bl	8002574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e94:	2300      	movs	r3, #0
 8001e96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_TIM_Base_MspInit+0x1f4>)
 8001ea4:	f000 fb66 	bl	8002574 <HAL_GPIO_Init>
}
 8001ea8:	bf00      	nop
 8001eaa:	3740      	adds	r7, #64	; 0x40
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	40012c00 	.word	0x40012c00
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48001000 	.word	0x48001000
 8001ebc:	48000400 	.word	0x48000400
 8001ec0:	40000400 	.word	0x40000400
 8001ec4:	48000800 	.word	0x48000800
 8001ec8:	40000800 	.word	0x40000800
 8001ecc:	48000c00 	.word	0x48000c00

08001ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 031c 	add.w	r3, r7, #28
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a45      	ldr	r2, [pc, #276]	; (8002004 <HAL_TIM_MspPostInit+0x134>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d11d      	bne.n	8001f2e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ef2:	4b45      	ldr	r3, [pc, #276]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef6:	4a44      	ldr	r2, [pc, #272]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001ef8:	f043 0310 	orr.w	r3, r3, #16
 8001efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efe:	4b42      	ldr	r3, [pc, #264]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f02:	f003 0310 	and.w	r3, r3, #16
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f0a:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f10:	2302      	movs	r3, #2
 8001f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f20:	f107 031c 	add.w	r3, r7, #28
 8001f24:	4619      	mov	r1, r3
 8001f26:	4839      	ldr	r0, [pc, #228]	; (800200c <HAL_TIM_MspPostInit+0x13c>)
 8001f28:	f000 fb24 	bl	8002574 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001f2c:	e066      	b.n	8001ffc <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f36:	d11d      	bne.n	8001f74 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	4b33      	ldr	r3, [pc, #204]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3c:	4a32      	ldr	r2, [pc, #200]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f44:	4b30      	ldr	r3, [pc, #192]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f50:	2301      	movs	r3, #1
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f60:	2301      	movs	r3, #1
 8001f62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6e:	f000 fb01 	bl	8002574 <HAL_GPIO_Init>
}
 8001f72:	e043      	b.n	8001ffc <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a25      	ldr	r2, [pc, #148]	; (8002010 <HAL_TIM_MspPostInit+0x140>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d11c      	bne.n	8001fb8 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	4b22      	ldr	r3, [pc, #136]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f82:	4a21      	ldr	r2, [pc, #132]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4818      	ldr	r0, [pc, #96]	; (8002014 <HAL_TIM_MspPostInit+0x144>)
 8001fb2:	f000 fadf 	bl	8002574 <HAL_GPIO_Init>
}
 8001fb6:	e021      	b.n	8001ffc <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <HAL_TIM_MspPostInit+0x148>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11c      	bne.n	8001ffc <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a10      	ldr	r2, [pc, #64]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001fc8:	f043 0308 	orr.w	r3, r3, #8
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b0e      	ldr	r3, [pc, #56]	; (8002008 <HAL_TIM_MspPostInit+0x138>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0308 	and.w	r3, r3, #8
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fec:	2302      	movs	r3, #2
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <HAL_TIM_MspPostInit+0x14c>)
 8001ff8:	f000 fabc 	bl	8002574 <HAL_GPIO_Init>
}
 8001ffc:	bf00      	nop
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	40012c00 	.word	0x40012c00
 8002008:	40021000 	.word	0x40021000
 800200c:	48001000 	.word	0x48001000
 8002010:	40000400 	.word	0x40000400
 8002014:	48000400 	.word	0x48000400
 8002018:	40000800 	.word	0x40000800
 800201c:	48000c00 	.word	0x48000c00

08002020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002024:	e7fe      	b.n	8002024 <NMI_Handler+0x4>

08002026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002026:	b480      	push	{r7}
 8002028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800202a:	e7fe      	b.n	800202a <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	e7fe      	b.n	8002030 <MemManage_Handler+0x4>

08002032 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002032:	b480      	push	{r7}
 8002034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002036:	e7fe      	b.n	8002036 <BusFault_Handler+0x4>

08002038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800203c:	e7fe      	b.n	800203c <UsageFault_Handler+0x4>

0800203e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800206c:	f000 f958 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}

08002074 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
	return 1;
 8002078:	2301      	movs	r3, #1
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_kill>:

int _kill(int pid, int sig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800208e:	f004 fdd7 	bl	8006c40 <__errno>
 8002092:	4603      	mov	r3, r0
 8002094:	2216      	movs	r2, #22
 8002096:	601a      	str	r2, [r3, #0]
	return -1;
 8002098:	f04f 33ff 	mov.w	r3, #4294967295
}
 800209c:	4618      	mov	r0, r3
 800209e:	3708      	adds	r7, #8
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <_exit>:

void _exit (int status)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffe7 	bl	8002084 <_kill>
	while (1) {}		/* Make sure we hang here */
 80020b6:	e7fe      	b.n	80020b6 <_exit+0x12>

080020b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c4:	2300      	movs	r3, #0
 80020c6:	617b      	str	r3, [r7, #20]
 80020c8:	e00a      	b.n	80020e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80020ca:	f3af 8000 	nop.w
 80020ce:	4601      	mov	r1, r0
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	1c5a      	adds	r2, r3, #1
 80020d4:	60ba      	str	r2, [r7, #8]
 80020d6:	b2ca      	uxtb	r2, r1
 80020d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbf0      	blt.n	80020ca <_read+0x12>
	}

return len;
 80020e8:	687b      	ldr	r3, [r7, #4]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}

080020f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	60f8      	str	r0, [r7, #12]
 80020fa:	60b9      	str	r1, [r7, #8]
 80020fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	e009      	b.n	8002118 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	60ba      	str	r2, [r7, #8]
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7ff fcdf 	bl	8001ad0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	3301      	adds	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697a      	ldr	r2, [r7, #20]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	dbf1      	blt.n	8002104 <_write+0x12>
	}
	return len;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <_close>:

int _close(int file)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
	return -1;
 8002132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002136:	4618      	mov	r0, r3
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002142:	b480      	push	{r7}
 8002144:	b083      	sub	sp, #12
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002152:	605a      	str	r2, [r3, #4]
	return 0;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	370c      	adds	r7, #12
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr

08002162 <_isatty>:

int _isatty(int file)
{
 8002162:	b480      	push	{r7}
 8002164:	b083      	sub	sp, #12
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
	return 1;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
	return 0;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800219c:	4a14      	ldr	r2, [pc, #80]	; (80021f0 <_sbrk+0x5c>)
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_sbrk+0x60>)
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a8:	4b13      	ldr	r3, [pc, #76]	; (80021f8 <_sbrk+0x64>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d102      	bne.n	80021b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x64>)
 80021b2:	4a12      	ldr	r2, [pc, #72]	; (80021fc <_sbrk+0x68>)
 80021b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b6:	4b10      	ldr	r3, [pc, #64]	; (80021f8 <_sbrk+0x64>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d207      	bcs.n	80021d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021c4:	f004 fd3c 	bl	8006c40 <__errno>
 80021c8:	4603      	mov	r3, r0
 80021ca:	220c      	movs	r2, #12
 80021cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ce:	f04f 33ff 	mov.w	r3, #4294967295
 80021d2:	e009      	b.n	80021e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021d4:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <_sbrk+0x64>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021da:	4b07      	ldr	r3, [pc, #28]	; (80021f8 <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	4a05      	ldr	r2, [pc, #20]	; (80021f8 <_sbrk+0x64>)
 80021e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	200a0000 	.word	0x200a0000
 80021f4:	00000400 	.word	0x00000400
 80021f8:	2000040c 	.word	0x2000040c
 80021fc:	20000428 	.word	0x20000428

08002200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002224:	f8df d034 	ldr.w	sp, [pc, #52]	; 800225c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002228:	f7ff ffea 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <LoopForever+0x6>)
  ldr r1, =_edata
 800222e:	490d      	ldr	r1, [pc, #52]	; (8002264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <LoopForever+0xe>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002244:	4c0a      	ldr	r4, [pc, #40]	; (8002270 <LoopForever+0x16>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002252:	f004 fcfb 	bl	8006c4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002256:	f7fe fe41 	bl	8000edc <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800225c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002268:	08009b44 	.word	0x08009b44
  ldr r2, =_sbss
 800226c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002270:	20000424 	.word	0x20000424

08002274 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_IRQHandler>

08002276 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227c:	2300      	movs	r3, #0
 800227e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002280:	2003      	movs	r0, #3
 8002282:	f000 f943 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002286:	2000      	movs	r0, #0
 8002288:	f000 f80e 	bl	80022a8 <HAL_InitTick>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d002      	beq.n	8002298 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	71fb      	strb	r3, [r7, #7]
 8002296:	e001      	b.n	800229c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002298:	f7ff fc32 	bl	8001b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800229c:	79fb      	ldrb	r3, [r7, #7]
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022b4:	4b17      	ldr	r3, [pc, #92]	; (8002314 <HAL_InitTick+0x6c>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d023      	beq.n	8002304 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_InitTick+0x70>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b14      	ldr	r3, [pc, #80]	; (8002314 <HAL_InitTick+0x6c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f941 	bl	800255a <HAL_SYSTICK_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10f      	bne.n	80022fe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b0f      	cmp	r3, #15
 80022e2:	d809      	bhi.n	80022f8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e4:	2200      	movs	r2, #0
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	f04f 30ff 	mov.w	r0, #4294967295
 80022ec:	f000 f919 	bl	8002522 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022f0:	4a0a      	ldr	r2, [pc, #40]	; (800231c <HAL_InitTick+0x74>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e007      	b.n	8002308 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
 80022fc:	e004      	b.n	8002308 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	e001      	b.n	8002308 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002308:	7bfb      	ldrb	r3, [r7, #15]
}
 800230a:	4618      	mov	r0, r3
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000008 	.word	0x20000008
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004

08002320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002324:	4b06      	ldr	r3, [pc, #24]	; (8002340 <HAL_IncTick+0x20>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_IncTick+0x24>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a04      	ldr	r2, [pc, #16]	; (8002344 <HAL_IncTick+0x24>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	20000008 	.word	0x20000008
 8002344:	20000410 	.word	0x20000410

08002348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  return uwTick;
 800234c:	4b03      	ldr	r3, [pc, #12]	; (800235c <HAL_GetTick+0x14>)
 800234e:	681b      	ldr	r3, [r3, #0]
}
 8002350:	4618      	mov	r0, r3
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	20000410 	.word	0x20000410

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff ffee 	bl	8002348 <HAL_GetTick>
 800236c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	4413      	add	r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002386:	bf00      	nop
 8002388:	f7ff ffde 	bl	8002348 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000008 	.word	0x20000008

080023a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0307 	and.w	r3, r3, #7
 80023b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c4:	4013      	ands	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023da:	4a04      	ldr	r2, [pc, #16]	; (80023ec <__NVIC_SetPriorityGrouping+0x44>)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	60d3      	str	r3, [r2, #12]
}
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <__NVIC_GetPriorityGrouping+0x18>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	0a1b      	lsrs	r3, r3, #8
 80023fa:	f003 0307 	and.w	r3, r3, #7
}
 80023fe:	4618      	mov	r0, r3
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff47 	bl	80023a8 <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff5c 	bl	80023f0 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff ffb0 	bl	80024c8 <SysTick_Config>
 8002568:	4603      	mov	r3, r0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
	...

08002574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002574:	b480      	push	{r7}
 8002576:	b087      	sub	sp, #28
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800257e:	2300      	movs	r3, #0
 8002580:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002582:	e166      	b.n	8002852 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	2101      	movs	r1, #1
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	fa01 f303 	lsl.w	r3, r1, r3
 8002590:	4013      	ands	r3, r2
 8002592:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8158 	beq.w	800284c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d005      	beq.n	80025b4 <HAL_GPIO_Init+0x40>
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d130      	bne.n	8002616 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ea:	2201      	movs	r2, #1
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	4013      	ands	r3, r2
 80025f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	091b      	lsrs	r3, r3, #4
 8002600:	f003 0201 	and.w	r2, r3, #1
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b03      	cmp	r3, #3
 8002620:	d017      	beq.n	8002652 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	2203      	movs	r2, #3
 800262e:	fa02 f303 	lsl.w	r3, r2, r3
 8002632:	43db      	mvns	r3, r3
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	4013      	ands	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	fa02 f303 	lsl.w	r3, r2, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d123      	bne.n	80026a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	08da      	lsrs	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3208      	adds	r2, #8
 8002666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f003 0307 	and.w	r3, r3, #7
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	220f      	movs	r2, #15
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43db      	mvns	r3, r3
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	691a      	ldr	r2, [r3, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	fa02 f303 	lsl.w	r3, r2, r3
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	08da      	lsrs	r2, r3, #3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3208      	adds	r2, #8
 80026a0:	6939      	ldr	r1, [r7, #16]
 80026a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	693a      	ldr	r2, [r7, #16]
 80026ba:	4013      	ands	r3, r2
 80026bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f003 0203 	and.w	r2, r3, #3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	693a      	ldr	r2, [r7, #16]
 80026d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	f000 80b2 	beq.w	800284c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e8:	4b61      	ldr	r3, [pc, #388]	; (8002870 <HAL_GPIO_Init+0x2fc>)
 80026ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ec:	4a60      	ldr	r2, [pc, #384]	; (8002870 <HAL_GPIO_Init+0x2fc>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6613      	str	r3, [r2, #96]	; 0x60
 80026f4:	4b5e      	ldr	r3, [pc, #376]	; (8002870 <HAL_GPIO_Init+0x2fc>)
 80026f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002700:	4a5c      	ldr	r2, [pc, #368]	; (8002874 <HAL_GPIO_Init+0x300>)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	089b      	lsrs	r3, r3, #2
 8002706:	3302      	adds	r3, #2
 8002708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0303 	and.w	r3, r3, #3
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	220f      	movs	r2, #15
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4013      	ands	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800272a:	d02b      	beq.n	8002784 <HAL_GPIO_Init+0x210>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_GPIO_Init+0x304>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d025      	beq.n	8002780 <HAL_GPIO_Init+0x20c>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	4a51      	ldr	r2, [pc, #324]	; (800287c <HAL_GPIO_Init+0x308>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d01f      	beq.n	800277c <HAL_GPIO_Init+0x208>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	4a50      	ldr	r2, [pc, #320]	; (8002880 <HAL_GPIO_Init+0x30c>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d019      	beq.n	8002778 <HAL_GPIO_Init+0x204>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a4f      	ldr	r2, [pc, #316]	; (8002884 <HAL_GPIO_Init+0x310>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <HAL_GPIO_Init+0x200>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_GPIO_Init+0x314>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d00d      	beq.n	8002770 <HAL_GPIO_Init+0x1fc>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a4d      	ldr	r2, [pc, #308]	; (800288c <HAL_GPIO_Init+0x318>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d007      	beq.n	800276c <HAL_GPIO_Init+0x1f8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a4c      	ldr	r2, [pc, #304]	; (8002890 <HAL_GPIO_Init+0x31c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d101      	bne.n	8002768 <HAL_GPIO_Init+0x1f4>
 8002764:	2307      	movs	r3, #7
 8002766:	e00e      	b.n	8002786 <HAL_GPIO_Init+0x212>
 8002768:	2308      	movs	r3, #8
 800276a:	e00c      	b.n	8002786 <HAL_GPIO_Init+0x212>
 800276c:	2306      	movs	r3, #6
 800276e:	e00a      	b.n	8002786 <HAL_GPIO_Init+0x212>
 8002770:	2305      	movs	r3, #5
 8002772:	e008      	b.n	8002786 <HAL_GPIO_Init+0x212>
 8002774:	2304      	movs	r3, #4
 8002776:	e006      	b.n	8002786 <HAL_GPIO_Init+0x212>
 8002778:	2303      	movs	r3, #3
 800277a:	e004      	b.n	8002786 <HAL_GPIO_Init+0x212>
 800277c:	2302      	movs	r3, #2
 800277e:	e002      	b.n	8002786 <HAL_GPIO_Init+0x212>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <HAL_GPIO_Init+0x212>
 8002784:	2300      	movs	r3, #0
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	f002 0203 	and.w	r2, r2, #3
 800278c:	0092      	lsls	r2, r2, #2
 800278e:	4093      	lsls	r3, r2
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	4313      	orrs	r3, r2
 8002794:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002796:	4937      	ldr	r1, [pc, #220]	; (8002874 <HAL_GPIO_Init+0x300>)
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027a4:	4b3b      	ldr	r3, [pc, #236]	; (8002894 <HAL_GPIO_Init+0x320>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	43db      	mvns	r3, r3
 80027ae:	693a      	ldr	r2, [r7, #16]
 80027b0:	4013      	ands	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027c8:	4a32      	ldr	r2, [pc, #200]	; (8002894 <HAL_GPIO_Init+0x320>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_GPIO_Init+0x320>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	43db      	mvns	r3, r3
 80027d8:	693a      	ldr	r2, [r7, #16]
 80027da:	4013      	ands	r3, r2
 80027dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027f2:	4a28      	ldr	r2, [pc, #160]	; (8002894 <HAL_GPIO_Init+0x320>)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027f8:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_GPIO_Init+0x320>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	43db      	mvns	r3, r3
 8002802:	693a      	ldr	r2, [r7, #16]
 8002804:	4013      	ands	r3, r2
 8002806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4313      	orrs	r3, r2
 800281a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800281c:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <HAL_GPIO_Init+0x320>)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002822:	4b1c      	ldr	r3, [pc, #112]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	43db      	mvns	r3, r3
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	4013      	ands	r3, r2
 8002830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800283e:	693a      	ldr	r2, [r7, #16]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002846:	4a13      	ldr	r2, [pc, #76]	; (8002894 <HAL_GPIO_Init+0x320>)
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	3301      	adds	r3, #1
 8002850:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	f47f ae91 	bne.w	8002584 <HAL_GPIO_Init+0x10>
  }
}
 8002862:	bf00      	nop
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr
 8002870:	40021000 	.word	0x40021000
 8002874:	40010000 	.word	0x40010000
 8002878:	48000400 	.word	0x48000400
 800287c:	48000800 	.word	0x48000800
 8002880:	48000c00 	.word	0x48000c00
 8002884:	48001000 	.word	0x48001000
 8002888:	48001400 	.word	0x48001400
 800288c:	48001800 	.word	0x48001800
 8002890:	48001c00 	.word	0x48001c00
 8002894:	40010400 	.word	0x40010400

08002898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
 80028a4:	4613      	mov	r3, r2
 80028a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028a8:	787b      	ldrb	r3, [r7, #1]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80028ae:	887a      	ldrh	r2, [r7, #2]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80028b4:	e002      	b.n	80028bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80028b6:	887a      	ldrh	r2, [r7, #2]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr

080028c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e081      	b.n	80029de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff f92a 	bl	8001b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0201 	bic.w	r2, r2, #1
 800290a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002918:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002928:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689a      	ldr	r2, [r3, #8]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800293e:	609a      	str	r2, [r3, #8]
 8002940:	e006      	b.n	8002950 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800294e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d104      	bne.n	8002962 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002960:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002970:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002974:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002984:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69d9      	ldr	r1, [r3, #28]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1a      	ldr	r2, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2220      	movs	r2, #32
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af02      	add	r7, sp, #8
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607a      	str	r2, [r7, #4]
 80029f2:	461a      	mov	r2, r3
 80029f4:	460b      	mov	r3, r1
 80029f6:	817b      	strh	r3, [r7, #10]
 80029f8:	4613      	mov	r3, r2
 80029fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b20      	cmp	r3, #32
 8002a06:	f040 80da 	bne.w	8002bbe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_I2C_Master_Transmit+0x30>
 8002a14:	2302      	movs	r3, #2
 8002a16:	e0d3      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1d8>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a20:	f7ff fc92 	bl	8002348 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f9e6 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0be      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2221      	movs	r2, #33	; 0x21
 8002a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2210      	movs	r2, #16
 8002a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2bff      	cmp	r3, #255	; 0xff
 8002a72:	d90e      	bls.n	8002a92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	b2da      	uxtb	r2, r3
 8002a80:	8979      	ldrh	r1, [r7, #10]
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fbdc 	bl	8003248 <I2C_TransferConfig>
 8002a90:	e06c      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	8979      	ldrh	r1, [r7, #10]
 8002aa4:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fbcb 	bl	8003248 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ab2:	e05b      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab4:	697a      	ldr	r2, [r7, #20]
 8002ab6:	6a39      	ldr	r1, [r7, #32]
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 f9e3 	bl	8002e84 <I2C_WaitOnTXISFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e07b      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	781a      	ldrb	r2, [r3, #0]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af0:	3b01      	subs	r3, #1
 8002af2:	b29a      	uxth	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d034      	beq.n	8002b6c <HAL_I2C_Master_Transmit+0x184>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d130      	bne.n	8002b6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	2200      	movs	r2, #0
 8002b12:	2180      	movs	r1, #128	; 0x80
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 f975 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e04d      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	2bff      	cmp	r3, #255	; 0xff
 8002b2c:	d90e      	bls.n	8002b4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	8979      	ldrh	r1, [r7, #10]
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 fb7f 	bl	8003248 <I2C_TransferConfig>
 8002b4a:	e00f      	b.n	8002b6c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	8979      	ldrh	r1, [r7, #10]
 8002b5e:	2300      	movs	r3, #0
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fb6e 	bl	8003248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d19e      	bne.n	8002ab4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	6a39      	ldr	r1, [r7, #32]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 f9c2 	bl	8002f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e01a      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_I2C_Master_Transmit+0x1e4>)
 8002b9e:	400b      	ands	r3, r1
 8002ba0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2220      	movs	r2, #32
 8002ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bbe:	2302      	movs	r3, #2
  }
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3718      	adds	r7, #24
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	80002000 	.word	0x80002000
 8002bcc:	fe00e800 	.word	0xfe00e800

08002bd0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
 8002be0:	4613      	mov	r3, r2
 8002be2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	f040 80db 	bne.w	8002da8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d101      	bne.n	8002c00 <HAL_I2C_Master_Receive+0x30>
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	e0d4      	b.n	8002daa <HAL_I2C_Master_Receive+0x1da>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c08:	f7ff fb9e 	bl	8002348 <HAL_GetTick>
 8002c0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2319      	movs	r3, #25
 8002c14:	2201      	movs	r2, #1
 8002c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f8f2 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0bf      	b.n	8002daa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2222      	movs	r2, #34	; 0x22
 8002c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2210      	movs	r2, #16
 8002c36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	893a      	ldrh	r2, [r7, #8]
 8002c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	2bff      	cmp	r3, #255	; 0xff
 8002c5a:	d90e      	bls.n	8002c7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	22ff      	movs	r2, #255	; 0xff
 8002c60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c66:	b2da      	uxtb	r2, r3
 8002c68:	8979      	ldrh	r1, [r7, #10]
 8002c6a:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <HAL_I2C_Master_Receive+0x1e4>)
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f000 fae8 	bl	8003248 <I2C_TransferConfig>
 8002c78:	e06d      	b.n	8002d56 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c88:	b2da      	uxtb	r2, r3
 8002c8a:	8979      	ldrh	r1, [r7, #10]
 8002c8c:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_I2C_Master_Receive+0x1e4>)
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fad7 	bl	8003248 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c9a:	e05c      	b.n	8002d56 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	6a39      	ldr	r1, [r7, #32]
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 f96b 	bl	8002f7c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e07c      	b.n	8002daa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d034      	beq.n	8002d56 <HAL_I2C_Master_Receive+0x186>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d130      	bne.n	8002d56 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f880 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e04d      	b.n	8002daa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2bff      	cmp	r3, #255	; 0xff
 8002d16:	d90e      	bls.n	8002d36 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	22ff      	movs	r2, #255	; 0xff
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	8979      	ldrh	r1, [r7, #10]
 8002d26:	2300      	movs	r3, #0
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 fa8a 	bl	8003248 <I2C_TransferConfig>
 8002d34:	e00f      	b.n	8002d56 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3a:	b29a      	uxth	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	8979      	ldrh	r1, [r7, #10]
 8002d48:	2300      	movs	r3, #0
 8002d4a:	9300      	str	r3, [sp, #0]
 8002d4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fa79 	bl	8003248 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d19d      	bne.n	8002c9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	6a39      	ldr	r1, [r7, #32]
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8cd 	bl	8002f04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e01a      	b.n	8002daa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b0c      	ldr	r3, [pc, #48]	; (8002db8 <HAL_I2C_Master_Receive+0x1e8>)
 8002d88:	400b      	ands	r3, r1
 8002d8a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	e000      	b.n	8002daa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	80002400 	.word	0x80002400
 8002db8:	fe00e800 	.word	0xfe00e800

08002dbc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d103      	bne.n	8002dda <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	699b      	ldr	r3, [r3, #24]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d007      	beq.n	8002df8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699a      	ldr	r2, [r3, #24]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0201 	orr.w	r2, r2, #1
 8002df6:	619a      	str	r2, [r3, #24]
  }
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e022      	b.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d01e      	beq.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7ff fa93 	bl	8002348 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d113      	bne.n	8002e5c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2220      	movs	r2, #32
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e00f      	b.n	8002e7c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	699a      	ldr	r2, [r3, #24]
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	4013      	ands	r3, r2
 8002e66:	68ba      	ldr	r2, [r7, #8]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	bf0c      	ite	eq
 8002e6c:	2301      	moveq	r3, #1
 8002e6e:	2300      	movne	r3, #0
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	461a      	mov	r2, r3
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d0cd      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e90:	e02c      	b.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 f8ea 	bl	8003070 <I2C_IsErrorOccurred>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e02a      	b.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d01e      	beq.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7ff fa4b 	bl	8002348 <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d1cb      	bne.n	8002e92 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f10:	e028      	b.n	8002f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f8aa 	bl	8003070 <I2C_IsErrorOccurred>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e026      	b.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f26:	f7ff fa0f 	bl	8002348 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d302      	bcc.n	8002f3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d113      	bne.n	8002f64 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	f043 0220 	orr.w	r2, r3, #32
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e007      	b.n	8002f74 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f003 0320 	and.w	r3, r3, #32
 8002f6e:	2b20      	cmp	r3, #32
 8002f70:	d1cf      	bne.n	8002f12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f88:	e064      	b.n	8003054 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	68f8      	ldr	r0, [r7, #12]
 8002f90:	f000 f86e 	bl	8003070 <I2C_IsErrorOccurred>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e062      	b.n	8003064 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d138      	bne.n	800301e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b04      	cmp	r3, #4
 8002fb8:	d105      	bne.n	8002fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d001      	beq.n	8002fc6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	e04e      	b.n	8003064 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 0310 	and.w	r3, r3, #16
 8002fd0:	2b10      	cmp	r3, #16
 8002fd2:	d107      	bne.n	8002fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2210      	movs	r2, #16
 8002fda:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2204      	movs	r2, #4
 8002fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8002fe2:	e002      	b.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	6859      	ldr	r1, [r3, #4]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002ffe:	400b      	ands	r3, r1
 8003000:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2220      	movs	r2, #32
 8003006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e022      	b.n	8003064 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301e:	f7ff f993 	bl	8002348 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	68ba      	ldr	r2, [r7, #8]
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10f      	bne.n	8003054 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	f043 0220 	orr.w	r2, r3, #32
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2220      	movs	r2, #32
 8003044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e007      	b.n	8003064 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699b      	ldr	r3, [r3, #24]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b04      	cmp	r3, #4
 8003060:	d193      	bne.n	8002f8a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	fe00e800 	.word	0xfe00e800

08003070 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d075      	beq.n	8003188 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2210      	movs	r2, #16
 80030a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030a4:	e056      	b.n	8003154 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ac:	d052      	beq.n	8003154 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030ae:	f7ff f94b 	bl	8002348 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	68ba      	ldr	r2, [r7, #8]
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d302      	bcc.n	80030c4 <I2C_IsErrorOccurred+0x54>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d147      	bne.n	8003154 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030e6:	d12e      	bne.n	8003146 <I2C_IsErrorOccurred+0xd6>
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ee:	d02a      	beq.n	8003146 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d027      	beq.n	8003146 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003104:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003106:	f7ff f91f 	bl	8002348 <HAL_GetTick>
 800310a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800310c:	e01b      	b.n	8003146 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800310e:	f7ff f91b 	bl	8002348 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b19      	cmp	r3, #25
 800311a:	d914      	bls.n	8003146 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f043 0220 	orr.w	r2, r3, #32
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b20      	cmp	r3, #32
 8003152:	d1dc      	bne.n	800310e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b20      	cmp	r3, #32
 8003160:	d003      	beq.n	800316a <I2C_IsErrorOccurred+0xfa>
 8003162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003166:	2b00      	cmp	r3, #0
 8003168:	d09d      	beq.n	80030a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800316a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800317a:	6a3b      	ldr	r3, [r7, #32]
 800317c:	f043 0304 	orr.w	r3, r3, #4
 8003180:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031bc:	6a3b      	ldr	r3, [r7, #32]
 80031be:	f043 0308 	orr.w	r3, r3, #8
 80031c2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	f043 0302 	orr.w	r3, r3, #2
 80031e4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d01c      	beq.n	8003238 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031fe:	68f8      	ldr	r0, [r7, #12]
 8003200:	f7ff fddc 	bl	8002dbc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b0d      	ldr	r3, [pc, #52]	; (8003244 <I2C_IsErrorOccurred+0x1d4>)
 8003210:	400b      	ands	r3, r1
 8003212:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800323c:	4618      	mov	r0, r3
 800323e:	3728      	adds	r7, #40	; 0x28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	fe00e800 	.word	0xfe00e800

08003248 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	607b      	str	r3, [r7, #4]
 8003252:	460b      	mov	r3, r1
 8003254:	817b      	strh	r3, [r7, #10]
 8003256:	4613      	mov	r3, r2
 8003258:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800325a:	897b      	ldrh	r3, [r7, #10]
 800325c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003260:	7a7b      	ldrb	r3, [r7, #9]
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003268:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800326e:	6a3b      	ldr	r3, [r7, #32]
 8003270:	4313      	orrs	r3, r2
 8003272:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003276:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	0d5b      	lsrs	r3, r3, #21
 8003282:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <I2C_TransferConfig+0x60>)
 8003288:	430b      	orrs	r3, r1
 800328a:	43db      	mvns	r3, r3
 800328c:	ea02 0103 	and.w	r1, r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800329a:	bf00      	nop
 800329c:	371c      	adds	r7, #28
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	03ff63ff 	.word	0x03ff63ff

080032ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b20      	cmp	r3, #32
 80032c0:	d138      	bne.n	8003334 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e032      	b.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2224      	movs	r2, #36	; 0x24
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 0201 	bic.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	683a      	ldr	r2, [r7, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
 8003332:	e000      	b.n	8003336 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003334:	2302      	movs	r3, #2
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003342:	b480      	push	{r7}
 8003344:	b085      	sub	sp, #20
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b20      	cmp	r3, #32
 8003356:	d139      	bne.n	80033cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003362:	2302      	movs	r3, #2
 8003364:	e033      	b.n	80033ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2224      	movs	r2, #36	; 0x24
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003394:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	021b      	lsls	r3, r3, #8
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4313      	orrs	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	e000      	b.n	80033ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
  }
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033e0:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ec:	d102      	bne.n	80033f4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80033ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033f2:	e00b      	b.n	800340c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_PWREx_GetVoltageRange+0x3c>)
 80033f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003402:	d102      	bne.n	800340a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003404:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003408:	e000      	b.n	800340c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800340a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	40007000 	.word	0x40007000

0800341c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d141      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800342a:	4b4b      	ldr	r3, [pc, #300]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003432:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003436:	d131      	bne.n	800349c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003438:	4b47      	ldr	r3, [pc, #284]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800343e:	4a46      	ldr	r2, [pc, #280]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003444:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003448:	4b43      	ldr	r3, [pc, #268]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003450:	4a41      	ldr	r2, [pc, #260]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003452:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003456:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003458:	4b40      	ldr	r3, [pc, #256]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2232      	movs	r2, #50	; 0x32
 800345e:	fb02 f303 	mul.w	r3, r2, r3
 8003462:	4a3f      	ldr	r2, [pc, #252]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003464:	fba2 2303 	umull	r2, r3, r2, r3
 8003468:	0c9b      	lsrs	r3, r3, #18
 800346a:	3301      	adds	r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800346e:	e002      	b.n	8003476 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3b01      	subs	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800347e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003482:	d102      	bne.n	800348a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d1f2      	bne.n	8003470 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800348a:	4b33      	ldr	r3, [pc, #204]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003496:	d158      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e057      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800349c:	4b2e      	ldr	r3, [pc, #184]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800349e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a2:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034ac:	e04d      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034b4:	d141      	bne.n	800353a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034b6:	4b28      	ldr	r3, [pc, #160]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034c2:	d131      	bne.n	8003528 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034c4:	4b24      	ldr	r3, [pc, #144]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	4a23      	ldr	r2, [pc, #140]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80034e4:	4b1d      	ldr	r3, [pc, #116]	; (800355c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2232      	movs	r2, #50	; 0x32
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	4a1c      	ldr	r2, [pc, #112]	; (8003560 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	0c9b      	lsrs	r3, r3, #18
 80034f6:	3301      	adds	r3, #1
 80034f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034fa:	e002      	b.n	8003502 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	3b01      	subs	r3, #1
 8003500:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003502:	4b15      	ldr	r3, [pc, #84]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350e:	d102      	bne.n	8003516 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d1f2      	bne.n	80034fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003516:	4b10      	ldr	r3, [pc, #64]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003518:	695b      	ldr	r3, [r3, #20]
 800351a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800351e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003522:	d112      	bne.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e011      	b.n	800354c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003534:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003538:	e007      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800353a:	4b07      	ldr	r3, [pc, #28]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003542:	4a05      	ldr	r2, [pc, #20]	; (8003558 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003548:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40007000 	.word	0x40007000
 800355c:	20000000 	.word	0x20000000
 8003560:	431bde83 	.word	0x431bde83

08003564 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8003568:	4b05      	ldr	r3, [pc, #20]	; (8003580 <HAL_PWREx_EnableVddIO2+0x1c>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4a04      	ldr	r2, [pc, #16]	; (8003580 <HAL_PWREx_EnableVddIO2+0x1c>)
 800356e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003572:	6053      	str	r3, [r2, #4]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40007000 	.word	0x40007000

08003584 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b088      	sub	sp, #32
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	f000 bc16 	b.w	8003dc4 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003598:	4b96      	ldr	r3, [pc, #600]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f003 030c 	and.w	r3, r3, #12
 80035a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035a2:	4b94      	ldr	r3, [pc, #592]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0303 	and.w	r3, r3, #3
 80035aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80e4 	beq.w	8003782 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_RCC_OscConfig+0x4c>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	f040 808b 	bne.w	80036de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	f040 8087 	bne.w	80036de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80035d0:	4b88      	ldr	r3, [pc, #544]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_OscConfig+0x64>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e3ed      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1a      	ldr	r2, [r3, #32]
 80035ec:	4b81      	ldr	r3, [pc, #516]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0308 	and.w	r3, r3, #8
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d004      	beq.n	8003602 <HAL_RCC_OscConfig+0x7e>
 80035f8:	4b7e      	ldr	r3, [pc, #504]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003600:	e005      	b.n	800360e <HAL_RCC_OscConfig+0x8a>
 8003602:	4b7c      	ldr	r3, [pc, #496]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003608:	091b      	lsrs	r3, r3, #4
 800360a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360e:	4293      	cmp	r3, r2
 8003610:	d223      	bcs.n	800365a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 fdca 	bl	80041b0 <RCC_SetFlashLatencyFromMSIRange>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e3ce      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003626:	4b73      	ldr	r3, [pc, #460]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a72      	ldr	r2, [pc, #456]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800362c:	f043 0308 	orr.w	r3, r3, #8
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b70      	ldr	r3, [pc, #448]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	496d      	ldr	r1, [pc, #436]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003644:	4b6b      	ldr	r3, [pc, #428]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	4968      	ldr	r1, [pc, #416]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003654:	4313      	orrs	r3, r2
 8003656:	604b      	str	r3, [r1, #4]
 8003658:	e025      	b.n	80036a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800365a:	4b66      	ldr	r3, [pc, #408]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a65      	ldr	r2, [pc, #404]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003660:	f043 0308 	orr.w	r3, r3, #8
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	4b63      	ldr	r3, [pc, #396]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4960      	ldr	r1, [pc, #384]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003678:	4b5e      	ldr	r3, [pc, #376]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	021b      	lsls	r3, r3, #8
 8003686:	495b      	ldr	r1, [pc, #364]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003688:	4313      	orrs	r3, r2
 800368a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 fd8a 	bl	80041b0 <RCC_SetFlashLatencyFromMSIRange>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e38e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036a6:	f000 fcbf 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 80036aa:	4602      	mov	r2, r0
 80036ac:	4b51      	ldr	r3, [pc, #324]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	4950      	ldr	r1, [pc, #320]	; (80037f8 <HAL_RCC_OscConfig+0x274>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	f003 031f 	and.w	r3, r3, #31
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	4a4e      	ldr	r2, [pc, #312]	; (80037fc <HAL_RCC_OscConfig+0x278>)
 80036c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80036c6:	4b4e      	ldr	r3, [pc, #312]	; (8003800 <HAL_RCC_OscConfig+0x27c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe fdec 	bl	80022a8 <HAL_InitTick>
 80036d0:	4603      	mov	r3, r0
 80036d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d052      	beq.n	8003780 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	e372      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d032      	beq.n	800374c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80036e6:	4b43      	ldr	r3, [pc, #268]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a42      	ldr	r2, [pc, #264]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036f2:	f7fe fe29 	bl	8002348 <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036fa:	f7fe fe25 	bl	8002348 <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e35b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800370c:	4b39      	ldr	r3, [pc, #228]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d0f0      	beq.n	80036fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003718:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a35      	ldr	r2, [pc, #212]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800371e:	f043 0308 	orr.w	r3, r3, #8
 8003722:	6013      	str	r3, [r2, #0]
 8003724:	4b33      	ldr	r3, [pc, #204]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
 8003730:	4930      	ldr	r1, [pc, #192]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003736:	4b2f      	ldr	r3, [pc, #188]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	021b      	lsls	r3, r3, #8
 8003744:	492b      	ldr	r1, [pc, #172]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003746:	4313      	orrs	r3, r2
 8003748:	604b      	str	r3, [r1, #4]
 800374a:	e01a      	b.n	8003782 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800374c:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a28      	ldr	r2, [pc, #160]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003752:	f023 0301 	bic.w	r3, r3, #1
 8003756:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003758:	f7fe fdf6 	bl	8002348 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003760:	f7fe fdf2 	bl	8002348 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e328      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1dc>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d073      	beq.n	8003876 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d005      	beq.n	80037a0 <HAL_RCC_OscConfig+0x21c>
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	2b0c      	cmp	r3, #12
 8003798:	d10e      	bne.n	80037b8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b03      	cmp	r3, #3
 800379e:	d10b      	bne.n	80037b8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a0:	4b14      	ldr	r3, [pc, #80]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d063      	beq.n	8003874 <HAL_RCC_OscConfig+0x2f0>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d15f      	bne.n	8003874 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e305      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037c0:	d106      	bne.n	80037d0 <HAL_RCC_OscConfig+0x24c>
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a0b      	ldr	r2, [pc, #44]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037cc:	6013      	str	r3, [r2, #0]
 80037ce:	e025      	b.n	800381c <HAL_RCC_OscConfig+0x298>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037d8:	d114      	bne.n	8003804 <HAL_RCC_OscConfig+0x280>
 80037da:	4b06      	ldr	r3, [pc, #24]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b03      	ldr	r3, [pc, #12]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a02      	ldr	r2, [pc, #8]	; (80037f4 <HAL_RCC_OscConfig+0x270>)
 80037ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	e013      	b.n	800381c <HAL_RCC_OscConfig+0x298>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	080096e8 	.word	0x080096e8
 80037fc:	20000000 	.word	0x20000000
 8003800:	20000004 	.word	0x20000004
 8003804:	4ba0      	ldr	r3, [pc, #640]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a9f      	ldr	r2, [pc, #636]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800380a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b9d      	ldr	r3, [pc, #628]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a9c      	ldr	r2, [pc, #624]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800381a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d013      	beq.n	800384c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe fd90 	bl	8002348 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800382c:	f7fe fd8c 	bl	8002348 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b64      	cmp	r3, #100	; 0x64
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e2c2      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800383e:	4b92      	ldr	r3, [pc, #584]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0f0      	beq.n	800382c <HAL_RCC_OscConfig+0x2a8>
 800384a:	e014      	b.n	8003876 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe fd7c 	bl	8002348 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe fd78 	bl	8002348 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e2ae      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003866:	4b88      	ldr	r3, [pc, #544]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x2d0>
 8003872:	e000      	b.n	8003876 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d060      	beq.n	8003944 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	2b04      	cmp	r3, #4
 8003886:	d005      	beq.n	8003894 <HAL_RCC_OscConfig+0x310>
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b0c      	cmp	r3, #12
 800388c:	d119      	bne.n	80038c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b02      	cmp	r3, #2
 8003892:	d116      	bne.n	80038c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003894:	4b7c      	ldr	r3, [pc, #496]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_OscConfig+0x328>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e28b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ac:	4b76      	ldr	r3, [pc, #472]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	691b      	ldr	r3, [r3, #16]
 80038b8:	061b      	lsls	r3, r3, #24
 80038ba:	4973      	ldr	r1, [pc, #460]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038c0:	e040      	b.n	8003944 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d023      	beq.n	8003912 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ca:	4b6f      	ldr	r3, [pc, #444]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6e      	ldr	r2, [pc, #440]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80038d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d6:	f7fe fd37 	bl	8002348 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038de:	f7fe fd33 	bl	8002348 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e269      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80038f0:	4b65      	ldr	r3, [pc, #404]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0f0      	beq.n	80038de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038fc:	4b62      	ldr	r3, [pc, #392]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	061b      	lsls	r3, r3, #24
 800390a:	495f      	ldr	r1, [pc, #380]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800390c:	4313      	orrs	r3, r2
 800390e:	604b      	str	r3, [r1, #4]
 8003910:	e018      	b.n	8003944 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a5c      	ldr	r2, [pc, #368]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800391c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391e:	f7fe fd13 	bl	8002348 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003926:	f7fe fd0f 	bl	8002348 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e245      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003938:	4b53      	ldr	r3, [pc, #332]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1f0      	bne.n	8003926 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0308 	and.w	r3, r3, #8
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03c      	beq.n	80039ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	695b      	ldr	r3, [r3, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d01c      	beq.n	8003992 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800395a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800395e:	4a4a      	ldr	r2, [pc, #296]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003960:	f043 0301 	orr.w	r3, r3, #1
 8003964:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003968:	f7fe fcee 	bl	8002348 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe fcea 	bl	8002348 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e220      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003982:	4b41      	ldr	r3, [pc, #260]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003984:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003988:	f003 0302 	and.w	r3, r3, #2
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <HAL_RCC_OscConfig+0x3ec>
 8003990:	e01b      	b.n	80039ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003998:	4a3b      	ldr	r2, [pc, #236]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a2:	f7fe fcd1 	bl	8002348 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039aa:	f7fe fccd 	bl	8002348 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e203      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80039bc:	4b32      	ldr	r3, [pc, #200]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80039be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1ef      	bne.n	80039aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0304 	and.w	r3, r3, #4
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 80a6 	beq.w	8003b24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039d8:	2300      	movs	r3, #0
 80039da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80039dc:	4b2a      	ldr	r3, [pc, #168]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10d      	bne.n	8003a04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b27      	ldr	r3, [pc, #156]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a26      	ldr	r2, [pc, #152]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	; 0x58
 80039f4:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a04:	4b21      	ldr	r3, [pc, #132]	; (8003a8c <HAL_RCC_OscConfig+0x508>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d118      	bne.n	8003a42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a10:	4b1e      	ldr	r3, [pc, #120]	; (8003a8c <HAL_RCC_OscConfig+0x508>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <HAL_RCC_OscConfig+0x508>)
 8003a16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a1c:	f7fe fc94 	bl	8002348 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a24:	f7fe fc90 	bl	8002348 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1c6      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a36:	4b15      	ldr	r3, [pc, #84]	; (8003a8c <HAL_RCC_OscConfig+0x508>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d0f0      	beq.n	8003a24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d108      	bne.n	8003a5c <HAL_RCC_OscConfig+0x4d8>
 8003a4a:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a50:	4a0d      	ldr	r2, [pc, #52]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a5a:	e029      	b.n	8003ab0 <HAL_RCC_OscConfig+0x52c>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b05      	cmp	r3, #5
 8003a62:	d115      	bne.n	8003a90 <HAL_RCC_OscConfig+0x50c>
 8003a64:	4b08      	ldr	r3, [pc, #32]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6a:	4a07      	ldr	r2, [pc, #28]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003a6c:	f043 0304 	orr.w	r3, r3, #4
 8003a70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a74:	4b04      	ldr	r3, [pc, #16]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003a76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7a:	4a03      	ldr	r2, [pc, #12]	; (8003a88 <HAL_RCC_OscConfig+0x504>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a84:	e014      	b.n	8003ab0 <HAL_RCC_OscConfig+0x52c>
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40007000 	.word	0x40007000
 8003a90:	4b9d      	ldr	r3, [pc, #628]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	4a9c      	ldr	r2, [pc, #624]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aa0:	4b99      	ldr	r3, [pc, #612]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa6:	4a98      	ldr	r2, [pc, #608]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003aa8:	f023 0304 	bic.w	r3, r3, #4
 8003aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d016      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab8:	f7fe fc46 	bl	8002348 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ac0:	f7fe fc42 	bl	8002348 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e176      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ad6:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d0ed      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x53c>
 8003ae4:	e015      	b.n	8003b12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fc2f 	bl	8002348 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fe fc2b 	bl	8002348 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e15f      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b04:	4b80      	ldr	r3, [pc, #512]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ed      	bne.n	8003aee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b12:	7ffb      	ldrb	r3, [r7, #31]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d105      	bne.n	8003b24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b18:	4b7b      	ldr	r3, [pc, #492]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1c:	4a7a      	ldr	r2, [pc, #488]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d03c      	beq.n	8003baa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01c      	beq.n	8003b72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003b38:	4b73      	ldr	r3, [pc, #460]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b3e:	4a72      	ldr	r2, [pc, #456]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b40:	f043 0301 	orr.w	r3, r3, #1
 8003b44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe fbfe 	bl	8002348 <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b50:	f7fe fbfa 	bl	8002348 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e130      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003b62:	4b69      	ldr	r3, [pc, #420]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <HAL_RCC_OscConfig+0x5cc>
 8003b70:	e01b      	b.n	8003baa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003b72:	4b65      	ldr	r3, [pc, #404]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b78:	4a63      	ldr	r2, [pc, #396]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b7a:	f023 0301 	bic.w	r3, r3, #1
 8003b7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fe fbe1 	bl	8002348 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b88:	e008      	b.n	8003b9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b8a:	f7fe fbdd 	bl	8002348 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d901      	bls.n	8003b9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e113      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b9c:	4b5a      	ldr	r3, [pc, #360]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003b9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1ef      	bne.n	8003b8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	f000 8107 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	f040 80cf 	bne.w	8003d5c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003bbe:	4b52      	ldr	r3, [pc, #328]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f003 0203 	and.w	r2, r3, #3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d12c      	bne.n	8003c2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d123      	bne.n	8003c2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d11b      	bne.n	8003c2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d113      	bne.n	8003c2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	3b01      	subs	r3, #1
 8003c12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d109      	bne.n	8003c2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	3b01      	subs	r3, #1
 8003c26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d071      	beq.n	8003d10 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	2b0c      	cmp	r3, #12
 8003c30:	d068      	beq.n	8003d04 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003c32:	4b35      	ldr	r3, [pc, #212]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d105      	bne.n	8003c4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003c3e:	4b32      	ldr	r3, [pc, #200]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d001      	beq.n	8003c4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e0ba      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003c4e:	4b2e      	ldr	r3, [pc, #184]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c5a:	f7fe fb75 	bl	8002348 <HAL_GetTick>
 8003c5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	e008      	b.n	8003c74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c62:	f7fe fb71 	bl	8002348 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d901      	bls.n	8003c74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e0a7      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1f0      	bne.n	8003c62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	4b21      	ldr	r3, [pc, #132]	; (8003d0c <HAL_RCC_OscConfig+0x788>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0112      	lsls	r2, r2, #4
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c9a:	0212      	lsls	r2, r2, #8
 8003c9c:	4311      	orrs	r1, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ca2:	0852      	lsrs	r2, r2, #1
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	0552      	lsls	r2, r2, #21
 8003ca8:	4311      	orrs	r1, r2
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cae:	0852      	lsrs	r2, r2, #1
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0652      	lsls	r2, r2, #25
 8003cb4:	4311      	orrs	r1, r2
 8003cb6:	687a      	ldr	r2, [r7, #4]
 8003cb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cba:	06d2      	lsls	r2, r2, #27
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	4912      	ldr	r1, [pc, #72]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a0f      	ldr	r2, [pc, #60]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	4a0c      	ldr	r2, [pc, #48]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003cdc:	f7fe fb34 	bl	8002348 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ce4:	f7fe fb30 	bl	8002348 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e066      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cf6:	4b04      	ldr	r3, [pc, #16]	; (8003d08 <HAL_RCC_OscConfig+0x784>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d02:	e05e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e05d      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d10:	4b2e      	ldr	r3, [pc, #184]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d152      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003d1c:	4b2b      	ldr	r3, [pc, #172]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a2a      	ldr	r2, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d28:	4b28      	ldr	r3, [pc, #160]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	4a27      	ldr	r2, [pc, #156]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d32:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003d34:	f7fe fb08 	bl	8002348 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d3c:	f7fe fb04 	bl	8002348 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e03a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x7b8>
 8003d5a:	e032      	b.n	8003dc2 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b0c      	cmp	r3, #12
 8003d60:	d02d      	beq.n	8003dbe <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d62:	4b1a      	ldr	r3, [pc, #104]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a19      	ldr	r2, [pc, #100]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d68:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8003d6e:	4b17      	ldr	r3, [pc, #92]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d105      	bne.n	8003d86 <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d7a:	4b14      	ldr	r3, [pc, #80]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d80:	f023 0303 	bic.w	r3, r3, #3
 8003d84:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d86:	4b11      	ldr	r3, [pc, #68]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	4a10      	ldr	r2, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003d8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d94:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fe fad7 	bl	8002348 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe fad3 	bl	8002348 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e009      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003db0:	4b06      	ldr	r3, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x848>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x81a>
 8003dbc:	e001      	b.n	8003dc2 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000

08003dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e10f      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b89      	ldr	r3, [pc, #548]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b86      	ldr	r3, [pc, #536]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	4984      	ldr	r1, [pc, #528]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b82      	ldr	r3, [pc, #520]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e0f7      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8089 	beq.w	8003f38 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	2b03      	cmp	r3, #3
 8003e2c:	d133      	bne.n	8003e96 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2e:	4b79      	ldr	r3, [pc, #484]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0e4      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003e3e:	f000 fa11 	bl	8004264 <RCC_GetSysClockFreqFromPLLSource>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a74      	ldr	r2, [pc, #464]	; (8004018 <HAL_RCC_ClockConfig+0x248>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d955      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e4a:	4b72      	ldr	r3, [pc, #456]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10a      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e56:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e5e:	4a6d      	ldr	r2, [pc, #436]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e64:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	617b      	str	r3, [r7, #20]
 8003e6a:	e044      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d03e      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x126>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d13a      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e80:	4b64      	ldr	r3, [pc, #400]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e88:	4a62      	ldr	r2, [pc, #392]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003e8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e02f      	b.n	8003ef6 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d107      	bne.n	8003eae <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e9e:	4b5d      	ldr	r3, [pc, #372]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d115      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0ac      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d107      	bne.n	8003ec6 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb6:	4b57      	ldr	r3, [pc, #348]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0a0      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ec6:	4b53      	ldr	r3, [pc, #332]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e098      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003ed6:	f000 f8a7 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003eda:	4603      	mov	r3, r0
 8003edc:	4a4e      	ldr	r2, [pc, #312]	; (8004018 <HAL_RCC_ClockConfig+0x248>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d909      	bls.n	8003ef6 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ee2:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003eea:	4a4a      	ldr	r2, [pc, #296]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ef0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ef6:	4b47      	ldr	r3, [pc, #284]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f023 0203 	bic.w	r2, r3, #3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4944      	ldr	r1, [pc, #272]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f08:	f7fe fa1e 	bl	8002348 <HAL_GetTick>
 8003f0c:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f10:	f7fe fa1a 	bl	8002348 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e070      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f26:	4b3b      	ldr	r3, [pc, #236]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f003 020c 	and.w	r2, r3, #12
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d1eb      	bne.n	8003f10 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d009      	beq.n	8003f58 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f44:	4b33      	ldr	r3, [pc, #204]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	4930      	ldr	r1, [pc, #192]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2b80      	cmp	r3, #128	; 0x80
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f5e:	4b2d      	ldr	r3, [pc, #180]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	4a2c      	ldr	r2, [pc, #176]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f68:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f6a:	4b29      	ldr	r3, [pc, #164]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d210      	bcs.n	8003f9a <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f78:	4b25      	ldr	r3, [pc, #148]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f023 020f 	bic.w	r2, r3, #15
 8003f80:	4923      	ldr	r1, [pc, #140]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f88:	4b21      	ldr	r3, [pc, #132]	; (8004010 <HAL_RCC_ClockConfig+0x240>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d001      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e036      	b.n	8004008 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d008      	beq.n	8003fb8 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa6:	4b1b      	ldr	r3, [pc, #108]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4918      	ldr	r1, [pc, #96]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0308 	and.w	r3, r3, #8
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc4:	4b13      	ldr	r3, [pc, #76]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4910      	ldr	r1, [pc, #64]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003fd8:	f000 f826 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <HAL_RCC_ClockConfig+0x244>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	091b      	lsrs	r3, r3, #4
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	490c      	ldr	r1, [pc, #48]	; (800401c <HAL_RCC_ClockConfig+0x24c>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	4a0a      	ldr	r2, [pc, #40]	; (8004020 <HAL_RCC_ClockConfig+0x250>)
 8003ff6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ff8:	4b0a      	ldr	r3, [pc, #40]	; (8004024 <HAL_RCC_ClockConfig+0x254>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe f953 	bl	80022a8 <HAL_InitTick>
 8004002:	4603      	mov	r3, r0
 8004004:	73fb      	strb	r3, [r7, #15]

  return status;
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3718      	adds	r7, #24
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40022000 	.word	0x40022000
 8004014:	40021000 	.word	0x40021000
 8004018:	04c4b400 	.word	0x04c4b400
 800401c:	080096e8 	.word	0x080096e8
 8004020:	20000000 	.word	0x20000000
 8004024:	20000004 	.word	0x20000004

08004028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004028:	b480      	push	{r7}
 800402a:	b089      	sub	sp, #36	; 0x24
 800402c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	2300      	movs	r3, #0
 8004034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004036:	4b3e      	ldr	r3, [pc, #248]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f003 030c 	and.w	r3, r3, #12
 800403e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004040:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x34>
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	2b0c      	cmp	r3, #12
 8004054:	d121      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d11e      	bne.n	800409a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800405c:	4b34      	ldr	r3, [pc, #208]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d107      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004068:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800406e:	0a1b      	lsrs	r3, r3, #8
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	61fb      	str	r3, [r7, #28]
 8004076:	e005      	b.n	8004084 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004078:	4b2d      	ldr	r3, [pc, #180]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	091b      	lsrs	r3, r3, #4
 800407e:	f003 030f 	and.w	r3, r3, #15
 8004082:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004084:	4a2b      	ldr	r2, [pc, #172]	; (8004134 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004098:	e00a      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	2b04      	cmp	r3, #4
 800409e:	d102      	bne.n	80040a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <HAL_RCC_GetSysClockFreq+0x110>)
 80040a2:	61bb      	str	r3, [r7, #24]
 80040a4:	e004      	b.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d101      	bne.n	80040b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040ac:	4b23      	ldr	r3, [pc, #140]	; (800413c <HAL_RCC_GetSysClockFreq+0x114>)
 80040ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	2b0c      	cmp	r3, #12
 80040b4:	d134      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040b6:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0xa6>
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d003      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0xac>
 80040cc:	e005      	b.n	80040da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80040ce:	4b1a      	ldr	r3, [pc, #104]	; (8004138 <HAL_RCC_GetSysClockFreq+0x110>)
 80040d0:	617b      	str	r3, [r7, #20]
      break;
 80040d2:	e005      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80040d4:	4b19      	ldr	r3, [pc, #100]	; (800413c <HAL_RCC_GetSysClockFreq+0x114>)
 80040d6:	617b      	str	r3, [r7, #20]
      break;
 80040d8:	e002      	b.n	80040e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	617b      	str	r3, [r7, #20]
      break;
 80040de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040e0:	4b13      	ldr	r3, [pc, #76]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	3301      	adds	r3, #1
 80040ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	fb03 f202 	mul.w	r2, r3, r2
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004106:	4b0a      	ldr	r3, [pc, #40]	; (8004130 <HAL_RCC_GetSysClockFreq+0x108>)
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	0e5b      	lsrs	r3, r3, #25
 800410c:	f003 0303 	and.w	r3, r3, #3
 8004110:	3301      	adds	r3, #1
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	fbb2 f3f3 	udiv	r3, r2, r3
 800411e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004120:	69bb      	ldr	r3, [r7, #24]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40021000 	.word	0x40021000
 8004134:	08009700 	.word	0x08009700
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200

08004140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004140:	b480      	push	{r7}
 8004142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004144:	4b03      	ldr	r3, [pc, #12]	; (8004154 <HAL_RCC_GetHCLKFreq+0x14>)
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	20000000 	.word	0x20000000

08004158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800415c:	f7ff fff0 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b06      	ldr	r3, [pc, #24]	; (800417c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	0a1b      	lsrs	r3, r3, #8
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	4904      	ldr	r1, [pc, #16]	; (8004180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004178:	4618      	mov	r0, r3
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40021000 	.word	0x40021000
 8004180:	080096f8 	.word	0x080096f8

08004184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004188:	f7ff ffda 	bl	8004140 <HAL_RCC_GetHCLKFreq>
 800418c:	4602      	mov	r2, r0
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	0adb      	lsrs	r3, r3, #11
 8004194:	f003 0307 	and.w	r3, r3, #7
 8004198:	4904      	ldr	r1, [pc, #16]	; (80041ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800419a:	5ccb      	ldrb	r3, [r1, r3]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	080096f8 	.word	0x080096f8

080041b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b086      	sub	sp, #24
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041b8:	2300      	movs	r3, #0
 80041ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041bc:	4b27      	ldr	r3, [pc, #156]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041c8:	f7ff f908 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 80041cc:	6178      	str	r0, [r7, #20]
 80041ce:	e014      	b.n	80041fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041d0:	4b22      	ldr	r3, [pc, #136]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	4a21      	ldr	r2, [pc, #132]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041da:	6593      	str	r3, [r2, #88]	; 0x58
 80041dc:	4b1f      	ldr	r3, [pc, #124]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041e8:	f7ff f8f8 	bl	80033dc <HAL_PWREx_GetVoltageRange>
 80041ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	4a1a      	ldr	r2, [pc, #104]	; (800425c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80041f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004200:	d10b      	bne.n	800421a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2b80      	cmp	r3, #128	; 0x80
 8004206:	d913      	bls.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2ba0      	cmp	r3, #160	; 0xa0
 800420c:	d902      	bls.n	8004214 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800420e:	2302      	movs	r3, #2
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e00d      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004214:	2301      	movs	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	e00a      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b7f      	cmp	r3, #127	; 0x7f
 800421e:	d902      	bls.n	8004226 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004220:	2302      	movs	r3, #2
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	e004      	b.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b70      	cmp	r3, #112	; 0x70
 800422a:	d101      	bne.n	8004230 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800422c:	2301      	movs	r3, #1
 800422e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f023 020f 	bic.w	r2, r3, #15
 8004238:	4909      	ldr	r1, [pc, #36]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4313      	orrs	r3, r2
 800423e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	d001      	beq.n	8004252 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e000      	b.n	8004254 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3718      	adds	r7, #24
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}
 800425c:	40021000 	.word	0x40021000
 8004260:	40022000 	.word	0x40022000

08004264 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800426e:	4b2d      	ldr	r3, [pc, #180]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	f003 0303 	and.w	r3, r3, #3
 8004276:	2b01      	cmp	r3, #1
 8004278:	d118      	bne.n	80042ac <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800427a:	4b2a      	ldr	r3, [pc, #168]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0308 	and.w	r3, r3, #8
 8004282:	2b00      	cmp	r3, #0
 8004284:	d107      	bne.n	8004296 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004286:	4b27      	ldr	r3, [pc, #156]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428c:	0a1b      	lsrs	r3, r3, #8
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	e005      	b.n	80042a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004296:	4b23      	ldr	r3, [pc, #140]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	091b      	lsrs	r3, r3, #4
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042aa:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80042ac:	4b1d      	ldr	r3, [pc, #116]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d003      	beq.n	80042c4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d003      	beq.n	80042ca <RCC_GetSysClockFreqFromPLLSource+0x66>
 80042c2:	e005      	b.n	80042d0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80042c4:	4b19      	ldr	r3, [pc, #100]	; (800432c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80042c6:	613b      	str	r3, [r7, #16]
    break;
 80042c8:	e005      	b.n	80042d6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80042ca:	4b19      	ldr	r3, [pc, #100]	; (8004330 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80042cc:	613b      	str	r3, [r7, #16]
    break;
 80042ce:	e002      	b.n	80042d6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	613b      	str	r3, [r7, #16]
    break;
 80042d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80042d6:	4b13      	ldr	r3, [pc, #76]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	091b      	lsrs	r3, r3, #4
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	3301      	adds	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80042e4:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	fb03 f202 	mul.w	r2, r3, r2
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042fc:	4b09      	ldr	r3, [pc, #36]	; (8004324 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	0e5b      	lsrs	r3, r3, #25
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	3301      	adds	r3, #1
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	fbb2 f3f3 	udiv	r3, r2, r3
 8004314:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004316:	683b      	ldr	r3, [r7, #0]
}
 8004318:	4618      	mov	r0, r3
 800431a:	371c      	adds	r7, #28
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40021000 	.word	0x40021000
 8004328:	08009700 	.word	0x08009700
 800432c:	00f42400 	.word	0x00f42400
 8004330:	007a1200 	.word	0x007a1200

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800433c:	2300      	movs	r3, #0
 800433e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004340:	2300      	movs	r3, #0
 8004342:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800434c:	2b00      	cmp	r3, #0
 800434e:	d040      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d02a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004358:	2b80      	cmp	r3, #128	; 0x80
 800435a:	d825      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800435c:	2b60      	cmp	r3, #96	; 0x60
 800435e:	d026      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004360:	2b60      	cmp	r3, #96	; 0x60
 8004362:	d821      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004364:	2b40      	cmp	r3, #64	; 0x40
 8004366:	d006      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d81d      	bhi.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d009      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004370:	2b20      	cmp	r3, #32
 8004372:	d010      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004374:	e018      	b.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004376:	4b89      	ldr	r3, [pc, #548]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	4a88      	ldr	r2, [pc, #544]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004380:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004382:	e015      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3304      	adds	r3, #4
 8004388:	2100      	movs	r1, #0
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fb02 	bl	8004994 <RCCEx_PLLSAI1_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004394:	e00c      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3320      	adds	r3, #32
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fbed 	bl	8004b7c <RCCEx_PLLSAI2_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	74fb      	strb	r3, [r7, #19]
      break;
 80043ac:	e000      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80043ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043b0:	7cfb      	ldrb	r3, [r7, #19]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043b6:	4b79      	ldr	r3, [pc, #484]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043bc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043c4:	4975      	ldr	r1, [pc, #468]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80043cc:	e001      	b.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ce:	7cfb      	ldrb	r3, [r7, #19]
 80043d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d047      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043e6:	d030      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043ec:	d82a      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f2:	d02a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80043f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043f8:	d824      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80043fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043fe:	d008      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004400:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004404:	d81e      	bhi.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00a      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800440a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440e:	d010      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004410:	e018      	b.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004412:	4b62      	ldr	r3, [pc, #392]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	4a61      	ldr	r2, [pc, #388]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800441c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800441e:	e015      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3304      	adds	r3, #4
 8004424:	2100      	movs	r1, #0
 8004426:	4618      	mov	r0, r3
 8004428:	f000 fab4 	bl	8004994 <RCCEx_PLLSAI1_Config>
 800442c:	4603      	mov	r3, r0
 800442e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004430:	e00c      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3320      	adds	r3, #32
 8004436:	2100      	movs	r1, #0
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fb9f 	bl	8004b7c <RCCEx_PLLSAI2_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	74fb      	strb	r3, [r7, #19]
      break;
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800444a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444c:	7cfb      	ldrb	r3, [r7, #19]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004452:	4b52      	ldr	r3, [pc, #328]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004454:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004460:	494e      	ldr	r1, [pc, #312]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004462:	4313      	orrs	r3, r2
 8004464:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004468:	e001      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	7cfb      	ldrb	r3, [r7, #19]
 800446c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 809f 	beq.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447c:	2300      	movs	r3, #0
 800447e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004480:	4b46      	ldr	r3, [pc, #280]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d101      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800448c:	2301      	movs	r3, #1
 800448e:	e000      	b.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004490:	2300      	movs	r3, #0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004496:	4b41      	ldr	r3, [pc, #260]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449a:	4a40      	ldr	r2, [pc, #256]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800449c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a0:	6593      	str	r3, [r2, #88]	; 0x58
 80044a2:	4b3e      	ldr	r3, [pc, #248]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ae:	2301      	movs	r3, #1
 80044b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b2:	4b3b      	ldr	r3, [pc, #236]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a3a      	ldr	r2, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044be:	f7fd ff43 	bl	8002348 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c4:	e009      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c6:	f7fd ff3f 	bl	8002348 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d902      	bls.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	74fb      	strb	r3, [r7, #19]
        break;
 80044d8:	e005      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044da:	4b31      	ldr	r3, [pc, #196]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ef      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80044e6:	7cfb      	ldrb	r3, [r7, #19]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d15b      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ec:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d01f      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d019      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004514:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004516:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004536:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fefe 	bl	8002348 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454e:	e00b      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fd fefa 	bl	8002348 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d902      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	74fb      	strb	r3, [r7, #19]
            break;
 8004566:	e006      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0ec      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10c      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458c:	4903      	ldr	r1, [pc, #12]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004594:	e008      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004596:	7cfb      	ldrb	r3, [r7, #19]
 8004598:	74bb      	strb	r3, [r7, #18]
 800459a:	e005      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800459c:	40021000 	.word	0x40021000
 80045a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a8:	7c7b      	ldrb	r3, [r7, #17]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4ba0      	ldr	r3, [pc, #640]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	4a9f      	ldr	r2, [pc, #636]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c6:	4b9a      	ldr	r3, [pc, #616]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f023 0203 	bic.w	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	4996      	ldr	r1, [pc, #600]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e8:	4b91      	ldr	r3, [pc, #580]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f023 020c 	bic.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	498e      	ldr	r1, [pc, #568]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0304 	and.w	r3, r3, #4
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800460a:	4b89      	ldr	r3, [pc, #548]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004618:	4985      	ldr	r1, [pc, #532]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0308 	and.w	r3, r3, #8
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800462c:	4b80      	ldr	r3, [pc, #512]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463a:	497d      	ldr	r1, [pc, #500]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800464e:	4b78      	ldr	r3, [pc, #480]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465c:	4974      	ldr	r1, [pc, #464]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0320 	and.w	r3, r3, #32
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800467e:	496c      	ldr	r1, [pc, #432]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004692:	4b67      	ldr	r3, [pc, #412]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046a0:	4963      	ldr	r1, [pc, #396]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80046b4:	4b5e      	ldr	r3, [pc, #376]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046c2:	495b      	ldr	r1, [pc, #364]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046d6:	4b56      	ldr	r3, [pc, #344]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e4:	4952      	ldr	r1, [pc, #328]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00a      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046f8:	4b4d      	ldr	r3, [pc, #308]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	494a      	ldr	r1, [pc, #296]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004708:	4313      	orrs	r3, r2
 800470a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00a      	beq.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800471a:	4b45      	ldr	r3, [pc, #276]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800471c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004728:	4941      	ldr	r1, [pc, #260]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00a      	beq.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800473c:	4b3c      	ldr	r3, [pc, #240]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004742:	f023 0203 	bic.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800474a:	4939      	ldr	r1, [pc, #228]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d028      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800475e:	4b34      	ldr	r3, [pc, #208]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476c:	4930      	ldr	r1, [pc, #192]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800476e:	4313      	orrs	r3, r2
 8004770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800477c:	d106      	bne.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800477e:	4b2c      	ldr	r3, [pc, #176]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	4a2b      	ldr	r2, [pc, #172]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004788:	60d3      	str	r3, [r2, #12]
 800478a:	e011      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004790:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004794:	d10c      	bne.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	3304      	adds	r3, #4
 800479a:	2101      	movs	r1, #1
 800479c:	4618      	mov	r0, r3
 800479e:	f000 f8f9 	bl	8004994 <RCCEx_PLLSAI1_Config>
 80047a2:	4603      	mov	r3, r0
 80047a4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d04d      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c4:	d108      	bne.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80047c6:	4b1a      	ldr	r3, [pc, #104]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047cc:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80047d6:	e012      	b.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80047d8:	4b15      	ldr	r3, [pc, #84]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047de:	4a14      	ldr	r2, [pc, #80]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047e4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80047e8:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047f6:	490e      	ldr	r1, [pc, #56]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004802:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004806:	d106      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004808:	4b09      	ldr	r3, [pc, #36]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	4a08      	ldr	r2, [pc, #32]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800480e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004812:	60d3      	str	r3, [r2, #12]
 8004814:	e020      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800481a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481e:	d109      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	4a02      	ldr	r2, [pc, #8]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800482a:	60d3      	str	r3, [r2, #12]
 800482c:	e014      	b.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004838:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800483c:	d10c      	bne.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3304      	adds	r3, #4
 8004842:	2101      	movs	r1, #1
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f8a5 	bl	8004994 <RCCEx_PLLSAI1_Config>
 800484a:	4603      	mov	r3, r0
 800484c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800484e:	7cfb      	ldrb	r3, [r7, #19]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004860:	2b00      	cmp	r3, #0
 8004862:	d028      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004864:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004872:	4947      	ldr	r1, [pc, #284]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800487e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004882:	d106      	bne.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004884:	4b42      	ldr	r3, [pc, #264]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	4a41      	ldr	r2, [pc, #260]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800488a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800488e:	60d3      	str	r3, [r2, #12]
 8004890:	e011      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004896:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800489a:	d10c      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	3304      	adds	r3, #4
 80048a0:	2101      	movs	r1, #1
 80048a2:	4618      	mov	r0, r3
 80048a4:	f000 f876 	bl	8004994 <RCCEx_PLLSAI1_Config>
 80048a8:	4603      	mov	r3, r0
 80048aa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80048b2:	7cfb      	ldrb	r3, [r7, #19]
 80048b4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d01e      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048c2:	4b33      	ldr	r3, [pc, #204]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048d2:	492f      	ldr	r1, [pc, #188]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048e4:	d10c      	bne.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	3304      	adds	r3, #4
 80048ea:	2102      	movs	r1, #2
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 f851 	bl	8004994 <RCCEx_PLLSAI1_Config>
 80048f2:	4603      	mov	r3, r0
 80048f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80048fc:	7cfb      	ldrb	r3, [r7, #19]
 80048fe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00b      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800490c:	4b20      	ldr	r3, [pc, #128]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800490e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004912:	f023 0204 	bic.w	r2, r3, #4
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800491c:	491c      	ldr	r1, [pc, #112]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004932:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004936:	f023 0218 	bic.w	r2, r3, #24
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004940:	4913      	ldr	r1, [pc, #76]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004942:	4313      	orrs	r3, r2
 8004944:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004950:	2b00      	cmp	r3, #0
 8004952:	d017      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800495a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004964:	490a      	ldr	r1, [pc, #40]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004972:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004976:	d105      	bne.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004982:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004984:	7cbb      	ldrb	r3, [r7, #18]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000

08004994 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80049a2:	4b72      	ldr	r3, [pc, #456]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00e      	beq.n	80049cc <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80049ae:	4b6f      	ldr	r3, [pc, #444]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f003 0203 	and.w	r2, r3, #3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d103      	bne.n	80049c6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
       ||
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d142      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	73fb      	strb	r3, [r7, #15]
 80049ca:	e03f      	b.n	8004a4c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d018      	beq.n	8004a06 <RCCEx_PLLSAI1_Config+0x72>
 80049d4:	2b03      	cmp	r3, #3
 80049d6:	d825      	bhi.n	8004a24 <RCCEx_PLLSAI1_Config+0x90>
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d002      	beq.n	80049e2 <RCCEx_PLLSAI1_Config+0x4e>
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d009      	beq.n	80049f4 <RCCEx_PLLSAI1_Config+0x60>
 80049e0:	e020      	b.n	8004a24 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80049e2:	4b62      	ldr	r3, [pc, #392]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11d      	bne.n	8004a2a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80049f2:	e01a      	b.n	8004a2a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80049f4:	4b5d      	ldr	r3, [pc, #372]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d116      	bne.n	8004a2e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a04:	e013      	b.n	8004a2e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004a06:	4b59      	ldr	r3, [pc, #356]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d10f      	bne.n	8004a32 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004a12:	4b56      	ldr	r3, [pc, #344]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d109      	bne.n	8004a32 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004a22:	e006      	b.n	8004a32 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
      break;
 8004a28:	e004      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004a32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004a34:	7bfb      	ldrb	r3, [r7, #15]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004a3a:	4b4c      	ldr	r3, [pc, #304]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f023 0203 	bic.w	r2, r3, #3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4949      	ldr	r1, [pc, #292]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004a4c:	7bfb      	ldrb	r3, [r7, #15]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f040 8086 	bne.w	8004b60 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004a54:	4b45      	ldr	r3, [pc, #276]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a44      	ldr	r2, [pc, #272]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a60:	f7fd fc72 	bl	8002348 <HAL_GetTick>
 8004a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a66:	e009      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a68:	f7fd fc6e 	bl	8002348 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d902      	bls.n	8004a7c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	73fb      	strb	r3, [r7, #15]
        break;
 8004a7a:	e005      	b.n	8004a88 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1ef      	bne.n	8004a68 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d168      	bne.n	8004b60 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d113      	bne.n	8004abc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a94:	4b35      	ldr	r3, [pc, #212]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	6892      	ldr	r2, [r2, #8]
 8004aa0:	0211      	lsls	r1, r2, #8
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	68d2      	ldr	r2, [r2, #12]
 8004aa6:	06d2      	lsls	r2, r2, #27
 8004aa8:	4311      	orrs	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6852      	ldr	r2, [r2, #4]
 8004aae:	3a01      	subs	r2, #1
 8004ab0:	0112      	lsls	r2, r2, #4
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	492d      	ldr	r1, [pc, #180]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	610b      	str	r3, [r1, #16]
 8004aba:	e02d      	b.n	8004b18 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d115      	bne.n	8004aee <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	4b2b      	ldr	r3, [pc, #172]	; (8004b74 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6892      	ldr	r2, [r2, #8]
 8004ace:	0211      	lsls	r1, r2, #8
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	6912      	ldr	r2, [r2, #16]
 8004ad4:	0852      	lsrs	r2, r2, #1
 8004ad6:	3a01      	subs	r2, #1
 8004ad8:	0552      	lsls	r2, r2, #21
 8004ada:	4311      	orrs	r1, r2
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	6852      	ldr	r2, [r2, #4]
 8004ae0:	3a01      	subs	r2, #1
 8004ae2:	0112      	lsls	r2, r2, #4
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	4921      	ldr	r1, [pc, #132]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	610b      	str	r3, [r1, #16]
 8004aec:	e014      	b.n	8004b18 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004aee:	4b1f      	ldr	r3, [pc, #124]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004af0:	691a      	ldr	r2, [r3, #16]
 8004af2:	4b21      	ldr	r3, [pc, #132]	; (8004b78 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004af4:	4013      	ands	r3, r2
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6892      	ldr	r2, [r2, #8]
 8004afa:	0211      	lsls	r1, r2, #8
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6952      	ldr	r2, [r2, #20]
 8004b00:	0852      	lsrs	r2, r2, #1
 8004b02:	3a01      	subs	r2, #1
 8004b04:	0652      	lsls	r2, r2, #25
 8004b06:	4311      	orrs	r1, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6852      	ldr	r2, [r2, #4]
 8004b0c:	3a01      	subs	r2, #1
 8004b0e:	0112      	lsls	r2, r2, #4
 8004b10:	430a      	orrs	r2, r1
 8004b12:	4916      	ldr	r1, [pc, #88]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004b18:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a13      	ldr	r2, [pc, #76]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b24:	f7fd fc10 	bl	8002348 <HAL_GetTick>
 8004b28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b2a:	e009      	b.n	8004b40 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b2c:	f7fd fc0c 	bl	8002348 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d902      	bls.n	8004b40 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	73fb      	strb	r3, [r7, #15]
          break;
 8004b3e:	e005      	b.n	8004b4c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ef      	beq.n	8004b2c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004b4c:	7bfb      	ldrb	r3, [r7, #15]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004b52:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b54:	691a      	ldr	r2, [r3, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	4904      	ldr	r1, [pc, #16]	; (8004b6c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	3710      	adds	r7, #16
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	07ff800f 	.word	0x07ff800f
 8004b74:	ff9f800f 	.word	0xff9f800f
 8004b78:	f9ff800f 	.word	0xf9ff800f

08004b7c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b8a:	4b72      	ldr	r3, [pc, #456]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00e      	beq.n	8004bb4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b96:	4b6f      	ldr	r3, [pc, #444]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0203 	and.w	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d103      	bne.n	8004bae <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
       ||
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d142      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
 8004bb2:	e03f      	b.n	8004c34 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	d018      	beq.n	8004bee <RCCEx_PLLSAI2_Config+0x72>
 8004bbc:	2b03      	cmp	r3, #3
 8004bbe:	d825      	bhi.n	8004c0c <RCCEx_PLLSAI2_Config+0x90>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d002      	beq.n	8004bca <RCCEx_PLLSAI2_Config+0x4e>
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d009      	beq.n	8004bdc <RCCEx_PLLSAI2_Config+0x60>
 8004bc8:	e020      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bca:	4b62      	ldr	r3, [pc, #392]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d11d      	bne.n	8004c12 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bda:	e01a      	b.n	8004c12 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bdc:	4b5d      	ldr	r3, [pc, #372]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d116      	bne.n	8004c16 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bec:	e013      	b.n	8004c16 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004bee:	4b59      	ldr	r3, [pc, #356]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10f      	bne.n	8004c1a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bfa:	4b56      	ldr	r3, [pc, #344]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c0a:	e006      	b.n	8004c1a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c10:	e004      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004c12:	bf00      	nop
 8004c14:	e002      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004c1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d108      	bne.n	8004c34 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004c22:	4b4c      	ldr	r3, [pc, #304]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4949      	ldr	r1, [pc, #292]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004c34:	7bfb      	ldrb	r3, [r7, #15]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f040 8086 	bne.w	8004d48 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004c3c:	4b45      	ldr	r3, [pc, #276]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a44      	ldr	r2, [pc, #272]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c48:	f7fd fb7e 	bl	8002348 <HAL_GetTick>
 8004c4c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c4e:	e009      	b.n	8004c64 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c50:	f7fd fb7a 	bl	8002348 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d902      	bls.n	8004c64 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	73fb      	strb	r3, [r7, #15]
        break;
 8004c62:	e005      	b.n	8004c70 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004c64:	4b3b      	ldr	r3, [pc, #236]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ef      	bne.n	8004c50 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d168      	bne.n	8004d48 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d113      	bne.n	8004ca4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c7c:	4b35      	ldr	r3, [pc, #212]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c7e:	695a      	ldr	r2, [r3, #20]
 8004c80:	4b35      	ldr	r3, [pc, #212]	; (8004d58 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6892      	ldr	r2, [r2, #8]
 8004c88:	0211      	lsls	r1, r2, #8
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	06d2      	lsls	r2, r2, #27
 8004c90:	4311      	orrs	r1, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6852      	ldr	r2, [r2, #4]
 8004c96:	3a01      	subs	r2, #1
 8004c98:	0112      	lsls	r2, r2, #4
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	492d      	ldr	r1, [pc, #180]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	614b      	str	r3, [r1, #20]
 8004ca2:	e02d      	b.n	8004d00 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d115      	bne.n	8004cd6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6892      	ldr	r2, [r2, #8]
 8004cb6:	0211      	lsls	r1, r2, #8
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6912      	ldr	r2, [r2, #16]
 8004cbc:	0852      	lsrs	r2, r2, #1
 8004cbe:	3a01      	subs	r2, #1
 8004cc0:	0552      	lsls	r2, r2, #21
 8004cc2:	4311      	orrs	r1, r2
 8004cc4:	687a      	ldr	r2, [r7, #4]
 8004cc6:	6852      	ldr	r2, [r2, #4]
 8004cc8:	3a01      	subs	r2, #1
 8004cca:	0112      	lsls	r2, r2, #4
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	4921      	ldr	r1, [pc, #132]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	614b      	str	r3, [r1, #20]
 8004cd4:	e014      	b.n	8004d00 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cd8:	695a      	ldr	r2, [r3, #20]
 8004cda:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6892      	ldr	r2, [r2, #8]
 8004ce2:	0211      	lsls	r1, r2, #8
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6952      	ldr	r2, [r2, #20]
 8004ce8:	0852      	lsrs	r2, r2, #1
 8004cea:	3a01      	subs	r2, #1
 8004cec:	0652      	lsls	r2, r2, #25
 8004cee:	4311      	orrs	r1, r2
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6852      	ldr	r2, [r2, #4]
 8004cf4:	3a01      	subs	r2, #1
 8004cf6:	0112      	lsls	r2, r2, #4
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	4916      	ldr	r1, [pc, #88]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004d00:	4b14      	ldr	r3, [pc, #80]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a13      	ldr	r2, [pc, #76]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d0c:	f7fd fb1c 	bl	8002348 <HAL_GetTick>
 8004d10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d12:	e009      	b.n	8004d28 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d14:	f7fd fb18 	bl	8002348 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d902      	bls.n	8004d28 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	73fb      	strb	r3, [r7, #15]
          break;
 8004d26:	e005      	b.n	8004d34 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004d28:	4b0a      	ldr	r3, [pc, #40]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0ef      	beq.n	8004d14 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004d34:	7bfb      	ldrb	r3, [r7, #15]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d106      	bne.n	8004d48 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004d3a:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d3c:	695a      	ldr	r2, [r3, #20]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	699b      	ldr	r3, [r3, #24]
 8004d42:	4904      	ldr	r1, [pc, #16]	; (8004d54 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000
 8004d58:	07ff800f 	.word	0x07ff800f
 8004d5c:	ff9f800f 	.word	0xff9f800f
 8004d60:	f9ff800f 	.word	0xf9ff800f

08004d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e049      	b.n	8004e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7fc ff9a 	bl	8001cc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2202      	movs	r2, #2
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	4619      	mov	r1, r3
 8004da2:	4610      	mov	r0, r2
 8004da4:	f000 fb7a 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d101      	bne.n	8004e24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e049      	b.n	8004eb8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d106      	bne.n	8004e3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f841 	bl	8004ec0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2202      	movs	r2, #2
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3304      	adds	r3, #4
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f000 fb23 	bl	800549c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2201      	movs	r2, #1
 8004e92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2201      	movs	r2, #1
 8004eaa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d109      	bne.n	8004ef8 <HAL_TIM_PWM_Start+0x24>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004eea:	b2db      	uxtb	r3, r3
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	e03c      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d109      	bne.n	8004f12 <HAL_TIM_PWM_Start+0x3e>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	bf14      	ite	ne
 8004f0a:	2301      	movne	r3, #1
 8004f0c:	2300      	moveq	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	e02f      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d109      	bne.n	8004f2c <HAL_TIM_PWM_Start+0x58>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	bf14      	ite	ne
 8004f24:	2301      	movne	r3, #1
 8004f26:	2300      	moveq	r3, #0
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	e022      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d109      	bne.n	8004f46 <HAL_TIM_PWM_Start+0x72>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f38:	b2db      	uxtb	r3, r3
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e015      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	d109      	bne.n	8004f60 <HAL_TIM_PWM_Start+0x8c>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	e008      	b.n	8004f72 <HAL_TIM_PWM_Start+0x9e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d001      	beq.n	8004f7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e09c      	b.n	80050b4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d104      	bne.n	8004f8a <HAL_TIM_PWM_Start+0xb6>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2202      	movs	r2, #2
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	e023      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d104      	bne.n	8004f9a <HAL_TIM_PWM_Start+0xc6>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f98:	e01b      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d104      	bne.n	8004faa <HAL_TIM_PWM_Start+0xd6>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fa8:	e013      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b0c      	cmp	r3, #12
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Start+0xe6>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb8:	e00b      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Start+0xf6>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fc8:	e003      	b.n	8004fd2 <HAL_TIM_PWM_Start+0xfe>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2202      	movs	r2, #2
 8004fce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	6839      	ldr	r1, [r7, #0]
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f000 fe68 	bl	8005cb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a35      	ldr	r2, [pc, #212]	; (80050bc <HAL_TIM_PWM_Start+0x1e8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d013      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a34      	ldr	r2, [pc, #208]	; (80050c0 <HAL_TIM_PWM_Start+0x1ec>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00e      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a32      	ldr	r2, [pc, #200]	; (80050c4 <HAL_TIM_PWM_Start+0x1f0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d009      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a31      	ldr	r2, [pc, #196]	; (80050c8 <HAL_TIM_PWM_Start+0x1f4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d004      	beq.n	8005012 <HAL_TIM_PWM_Start+0x13e>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2f      	ldr	r2, [pc, #188]	; (80050cc <HAL_TIM_PWM_Start+0x1f8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d101      	bne.n	8005016 <HAL_TIM_PWM_Start+0x142>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_TIM_PWM_Start+0x144>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d007      	beq.n	800502c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800502a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a22      	ldr	r2, [pc, #136]	; (80050bc <HAL_TIM_PWM_Start+0x1e8>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d01d      	beq.n	8005072 <HAL_TIM_PWM_Start+0x19e>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d018      	beq.n	8005072 <HAL_TIM_PWM_Start+0x19e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a22      	ldr	r2, [pc, #136]	; (80050d0 <HAL_TIM_PWM_Start+0x1fc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_TIM_PWM_Start+0x19e>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a21      	ldr	r2, [pc, #132]	; (80050d4 <HAL_TIM_PWM_Start+0x200>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_TIM_PWM_Start+0x19e>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1f      	ldr	r2, [pc, #124]	; (80050d8 <HAL_TIM_PWM_Start+0x204>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_TIM_PWM_Start+0x19e>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a17      	ldr	r2, [pc, #92]	; (80050c0 <HAL_TIM_PWM_Start+0x1ec>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_TIM_PWM_Start+0x19e>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <HAL_TIM_PWM_Start+0x1f0>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d115      	bne.n	800509e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <HAL_TIM_PWM_Start+0x208>)
 800507a:	4013      	ands	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d015      	beq.n	80050b0 <HAL_TIM_PWM_Start+0x1dc>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d011      	beq.n	80050b0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	e008      	b.n	80050b0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e000      	b.n	80050b2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	40013400 	.word	0x40013400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40014400 	.word	0x40014400
 80050cc:	40014800 	.word	0x40014800
 80050d0:	40000400 	.word	0x40000400
 80050d4:	40000800 	.word	0x40000800
 80050d8:	40000c00 	.word	0x40000c00
 80050dc:	00010007 	.word	0x00010007

080050e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050ec:	2300      	movs	r3, #0
 80050ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d101      	bne.n	80050fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80050fa:	2302      	movs	r3, #2
 80050fc:	e0ff      	b.n	80052fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b14      	cmp	r3, #20
 800510a:	f200 80f0 	bhi.w	80052ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800510e:	a201      	add	r2, pc, #4	; (adr r2, 8005114 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	08005169 	.word	0x08005169
 8005118:	080052ef 	.word	0x080052ef
 800511c:	080052ef 	.word	0x080052ef
 8005120:	080052ef 	.word	0x080052ef
 8005124:	080051a9 	.word	0x080051a9
 8005128:	080052ef 	.word	0x080052ef
 800512c:	080052ef 	.word	0x080052ef
 8005130:	080052ef 	.word	0x080052ef
 8005134:	080051eb 	.word	0x080051eb
 8005138:	080052ef 	.word	0x080052ef
 800513c:	080052ef 	.word	0x080052ef
 8005140:	080052ef 	.word	0x080052ef
 8005144:	0800522b 	.word	0x0800522b
 8005148:	080052ef 	.word	0x080052ef
 800514c:	080052ef 	.word	0x080052ef
 8005150:	080052ef 	.word	0x080052ef
 8005154:	0800526d 	.word	0x0800526d
 8005158:	080052ef 	.word	0x080052ef
 800515c:	080052ef 	.word	0x080052ef
 8005160:	080052ef 	.word	0x080052ef
 8005164:	080052ad 	.word	0x080052ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68b9      	ldr	r1, [r7, #8]
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fa2e 	bl	80055d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0208 	orr.w	r2, r2, #8
 8005182:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0204 	bic.w	r2, r2, #4
 8005192:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6999      	ldr	r1, [r3, #24]
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	619a      	str	r2, [r3, #24]
      break;
 80051a6:	e0a5      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fa9e 	bl	80056f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6999      	ldr	r1, [r3, #24]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	021a      	lsls	r2, r3, #8
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	619a      	str	r2, [r3, #24]
      break;
 80051e8:	e084      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68b9      	ldr	r1, [r7, #8]
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 fb07 	bl	8005804 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	69da      	ldr	r2, [r3, #28]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0208 	orr.w	r2, r2, #8
 8005204:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	69da      	ldr	r2, [r3, #28]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0204 	bic.w	r2, r2, #4
 8005214:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69d9      	ldr	r1, [r3, #28]
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	61da      	str	r2, [r3, #28]
      break;
 8005228:	e064      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68b9      	ldr	r1, [r7, #8]
 8005230:	4618      	mov	r0, r3
 8005232:	f000 fb6f 	bl	8005914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69da      	ldr	r2, [r3, #28]
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69d9      	ldr	r1, [r3, #28]
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	021a      	lsls	r2, r3, #8
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	61da      	str	r2, [r3, #28]
      break;
 800526a:	e043      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fbb8 	bl	80059e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0204 	bic.w	r2, r2, #4
 8005296:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052aa:	e023      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fbfc 	bl	8005ab0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ec:	e002      	b.n	80052f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80052ee:	2301      	movs	r3, #1
 80052f0:	75fb      	strb	r3, [r7, #23]
      break;
 80052f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3718      	adds	r7, #24
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop

08005308 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005312:	2300      	movs	r3, #0
 8005314:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_TIM_ConfigClockSource+0x1c>
 8005320:	2302      	movs	r3, #2
 8005322:	e0b6      	b.n	8005492 <HAL_TIM_ConfigClockSource+0x18a>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2201      	movs	r2, #1
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2202      	movs	r2, #2
 8005330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005342:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800534e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	68ba      	ldr	r2, [r7, #8]
 8005356:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005360:	d03e      	beq.n	80053e0 <HAL_TIM_ConfigClockSource+0xd8>
 8005362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005366:	f200 8087 	bhi.w	8005478 <HAL_TIM_ConfigClockSource+0x170>
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	f000 8086 	beq.w	800547e <HAL_TIM_ConfigClockSource+0x176>
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d87f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005378:	2b70      	cmp	r3, #112	; 0x70
 800537a:	d01a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0xaa>
 800537c:	2b70      	cmp	r3, #112	; 0x70
 800537e:	d87b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005380:	2b60      	cmp	r3, #96	; 0x60
 8005382:	d050      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0x11e>
 8005384:	2b60      	cmp	r3, #96	; 0x60
 8005386:	d877      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005388:	2b50      	cmp	r3, #80	; 0x50
 800538a:	d03c      	beq.n	8005406 <HAL_TIM_ConfigClockSource+0xfe>
 800538c:	2b50      	cmp	r3, #80	; 0x50
 800538e:	d873      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d058      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x13e>
 8005394:	2b40      	cmp	r3, #64	; 0x40
 8005396:	d86f      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 8005398:	2b30      	cmp	r3, #48	; 0x30
 800539a:	d064      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 800539c:	2b30      	cmp	r3, #48	; 0x30
 800539e:	d86b      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d060      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d867      	bhi.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d05c      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d05a      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x15e>
 80053b0:	e062      	b.n	8005478 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6818      	ldr	r0, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	6899      	ldr	r1, [r3, #8]
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f000 fc55 	bl	8005c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	609a      	str	r2, [r3, #8]
      break;
 80053de:	e04f      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	6899      	ldr	r1, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685a      	ldr	r2, [r3, #4]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f000 fc3e 	bl	8005c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005402:	609a      	str	r2, [r3, #8]
      break;
 8005404:	e03c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6818      	ldr	r0, [r3, #0]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	6859      	ldr	r1, [r3, #4]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	461a      	mov	r2, r3
 8005414:	f000 fbb2 	bl	8005b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2150      	movs	r1, #80	; 0x50
 800541e:	4618      	mov	r0, r3
 8005420:	f000 fc0b 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005424:	e02c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fbd1 	bl	8005bda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2160      	movs	r1, #96	; 0x60
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fbfb 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005444:	e01c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fb92 	bl	8005b7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2140      	movs	r1, #64	; 0x40
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fbeb 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005464:	e00c      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4619      	mov	r1, r3
 8005470:	4610      	mov	r0, r2
 8005472:	f000 fbe2 	bl	8005c3a <TIM_ITRx_SetConfig>
      break;
 8005476:	e003      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e000      	b.n	8005480 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800547e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2201      	movs	r2, #1
 8005484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005490:	7bfb      	ldrb	r3, [r7, #15]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a40      	ldr	r2, [pc, #256]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d013      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ba:	d00f      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a3d      	ldr	r2, [pc, #244]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a3c      	ldr	r2, [pc, #240]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a3b      	ldr	r2, [pc, #236]	; (80055bc <TIM_Base_SetConfig+0x120>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_Base_SetConfig+0x40>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a3a      	ldr	r2, [pc, #232]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d108      	bne.n	80054ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	68fa      	ldr	r2, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2c      	ldr	r2, [pc, #176]	; (80055b4 <TIM_Base_SetConfig+0x118>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2b      	ldr	r2, [pc, #172]	; (80055b8 <TIM_Base_SetConfig+0x11c>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2a      	ldr	r2, [pc, #168]	; (80055bc <TIM_Base_SetConfig+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a29      	ldr	r2, [pc, #164]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a28      	ldr	r2, [pc, #160]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a27      	ldr	r2, [pc, #156]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0x9a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a26      	ldr	r2, [pc, #152]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	; (80055b0 <TIM_Base_SetConfig+0x114>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00f      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	; (80055c0 <TIM_Base_SetConfig+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d00b      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a11      	ldr	r2, [pc, #68]	; (80055c4 <TIM_Base_SetConfig+0x128>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d007      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a10      	ldr	r2, [pc, #64]	; (80055c8 <TIM_Base_SetConfig+0x12c>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_Base_SetConfig+0xf8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a0f      	ldr	r2, [pc, #60]	; (80055cc <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d103      	bne.n	800559c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	615a      	str	r2, [r3, #20]
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40012c00 	.word	0x40012c00
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800

080055d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 0303 	bic.w	r3, r3, #3
 800560a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	4313      	orrs	r3, r2
 8005614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	f023 0302 	bic.w	r3, r3, #2
 800561c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	697a      	ldr	r2, [r7, #20]
 8005624:	4313      	orrs	r3, r2
 8005626:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d00f      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a2b      	ldr	r2, [pc, #172]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a29      	ldr	r2, [pc, #164]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_OC1_SetConfig+0x80>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a28      	ldr	r2, [pc, #160]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d10c      	bne.n	800566a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	f023 0308 	bic.w	r3, r3, #8
 8005656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0304 	bic.w	r3, r3, #4
 8005668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a1b      	ldr	r2, [pc, #108]	; (80056dc <TIM_OC1_SetConfig+0x10c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d00f      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a1a      	ldr	r2, [pc, #104]	; (80056e0 <TIM_OC1_SetConfig+0x110>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00b      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a19      	ldr	r2, [pc, #100]	; (80056e4 <TIM_OC1_SetConfig+0x114>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a18      	ldr	r2, [pc, #96]	; (80056e8 <TIM_OC1_SetConfig+0x118>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d003      	beq.n	8005692 <TIM_OC1_SetConfig+0xc2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a17      	ldr	r2, [pc, #92]	; (80056ec <TIM_OC1_SetConfig+0x11c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d111      	bne.n	80056b6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005698:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	693a      	ldr	r2, [r7, #16]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	697a      	ldr	r2, [r7, #20]
 80056ce:	621a      	str	r2, [r3, #32]
}
 80056d0:	bf00      	nop
 80056d2:	371c      	adds	r7, #28
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	40012c00 	.word	0x40012c00
 80056e0:	40013400 	.word	0x40013400
 80056e4:	40014000 	.word	0x40014000
 80056e8:	40014400 	.word	0x40014400
 80056ec:	40014800 	.word	0x40014800

080056f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	f023 0210 	bic.w	r2, r3, #16
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800571e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	021b      	lsls	r3, r3, #8
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	f023 0320 	bic.w	r3, r3, #32
 800573e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a28      	ldr	r2, [pc, #160]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_OC2_SetConfig+0x6c>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a27      	ldr	r2, [pc, #156]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d10d      	bne.n	8005778 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <TIM_OC2_SetConfig+0x100>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d00f      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a1c      	ldr	r2, [pc, #112]	; (80057f4 <TIM_OC2_SetConfig+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a1b      	ldr	r2, [pc, #108]	; (80057f8 <TIM_OC2_SetConfig+0x108>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <TIM_OC2_SetConfig+0x10c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_OC2_SetConfig+0xb0>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a19      	ldr	r2, [pc, #100]	; (8005800 <TIM_OC2_SetConfig+0x110>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d113      	bne.n	80057c8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	009b      	lsls	r3, r3, #2
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	693a      	ldr	r2, [r7, #16]
 80057cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	621a      	str	r2, [r3, #32]
}
 80057e2:	bf00      	nop
 80057e4:	371c      	adds	r7, #28
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40012c00 	.word	0x40012c00
 80057f4:	40013400 	.word	0x40013400
 80057f8:	40014000 	.word	0x40014000
 80057fc:	40014400 	.word	0x40014400
 8005800:	40014800 	.word	0x40014800

08005804 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69db      	ldr	r3, [r3, #28]
 800582a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	021b      	lsls	r3, r3, #8
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	4313      	orrs	r3, r2
 800585c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4a27      	ldr	r2, [pc, #156]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d003      	beq.n	800586e <TIM_OC3_SetConfig+0x6a>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4a26      	ldr	r2, [pc, #152]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d10d      	bne.n	800588a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005874:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005888:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a1c      	ldr	r2, [pc, #112]	; (8005900 <TIM_OC3_SetConfig+0xfc>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d00f      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a1b      	ldr	r2, [pc, #108]	; (8005904 <TIM_OC3_SetConfig+0x100>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d00b      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a1a      	ldr	r2, [pc, #104]	; (8005908 <TIM_OC3_SetConfig+0x104>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d007      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a19      	ldr	r2, [pc, #100]	; (800590c <TIM_OC3_SetConfig+0x108>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d003      	beq.n	80058b2 <TIM_OC3_SetConfig+0xae>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <TIM_OC3_SetConfig+0x10c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d113      	bne.n	80058da <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	685a      	ldr	r2, [r3, #4]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	697a      	ldr	r2, [r7, #20]
 80058f2:	621a      	str	r2, [r3, #32]
}
 80058f4:	bf00      	nop
 80058f6:	371c      	adds	r7, #28
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	40012c00 	.word	0x40012c00
 8005904:	40013400 	.word	0x40013400
 8005908:	40014000 	.word	0x40014000
 800590c:	40014400 	.word	0x40014400
 8005910:	40014800 	.word	0x40014800

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005942:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	021b      	lsls	r3, r3, #8
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005962:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	031b      	lsls	r3, r3, #12
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	4a18      	ldr	r2, [pc, #96]	; (80059d4 <TIM_OC4_SetConfig+0xc0>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d00f      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <TIM_OC4_SetConfig+0xc4>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d00b      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a16      	ldr	r2, [pc, #88]	; (80059dc <TIM_OC4_SetConfig+0xc8>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d007      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4a15      	ldr	r2, [pc, #84]	; (80059e0 <TIM_OC4_SetConfig+0xcc>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d003      	beq.n	8005998 <TIM_OC4_SetConfig+0x84>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <TIM_OC4_SetConfig+0xd0>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d109      	bne.n	80059ac <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800599e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	019b      	lsls	r3, r3, #6
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	4313      	orrs	r3, r2
 80059aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	697a      	ldr	r2, [r7, #20]
 80059b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	685a      	ldr	r2, [r3, #4]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	621a      	str	r2, [r3, #32]
}
 80059c6:	bf00      	nop
 80059c8:	371c      	adds	r7, #28
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr
 80059d2:	bf00      	nop
 80059d4:	40012c00 	.word	0x40012c00
 80059d8:	40013400 	.word	0x40013400
 80059dc:	40014000 	.word	0x40014000
 80059e0:	40014400 	.word	0x40014400
 80059e4:	40014800 	.word	0x40014800

080059e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <TIM_OC5_SetConfig+0xb4>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d00f      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a16      	ldr	r2, [pc, #88]	; (8005aa0 <TIM_OC5_SetConfig+0xb8>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00b      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a15      	ldr	r2, [pc, #84]	; (8005aa4 <TIM_OC5_SetConfig+0xbc>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d007      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a14      	ldr	r2, [pc, #80]	; (8005aa8 <TIM_OC5_SetConfig+0xc0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d003      	beq.n	8005a62 <TIM_OC5_SetConfig+0x7a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a13      	ldr	r2, [pc, #76]	; (8005aac <TIM_OC5_SetConfig+0xc4>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d109      	bne.n	8005a76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	021b      	lsls	r3, r3, #8
 8005a70:	697a      	ldr	r2, [r7, #20]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	bf00      	nop
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	40012c00 	.word	0x40012c00
 8005aa0:	40013400 	.word	0x40013400
 8005aa4:	40014000 	.word	0x40014000
 8005aa8:	40014400 	.word	0x40014400
 8005aac:	40014800 	.word	0x40014800

08005ab0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	021b      	lsls	r3, r3, #8
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005af6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	051b      	lsls	r3, r3, #20
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a18      	ldr	r2, [pc, #96]	; (8005b68 <TIM_OC6_SetConfig+0xb8>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d00f      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a17      	ldr	r2, [pc, #92]	; (8005b6c <TIM_OC6_SetConfig+0xbc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d00b      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a16      	ldr	r2, [pc, #88]	; (8005b70 <TIM_OC6_SetConfig+0xc0>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d007      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a15      	ldr	r2, [pc, #84]	; (8005b74 <TIM_OC6_SetConfig+0xc4>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d003      	beq.n	8005b2c <TIM_OC6_SetConfig+0x7c>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a14      	ldr	r2, [pc, #80]	; (8005b78 <TIM_OC6_SetConfig+0xc8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d109      	bne.n	8005b40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	029b      	lsls	r3, r3, #10
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685a      	ldr	r2, [r3, #4]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	693a      	ldr	r2, [r7, #16]
 8005b58:	621a      	str	r2, [r3, #32]
}
 8005b5a:	bf00      	nop
 8005b5c:	371c      	adds	r7, #28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40012c00 	.word	0x40012c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800

08005b7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1b      	ldr	r3, [r3, #32]
 8005b92:	f023 0201 	bic.w	r2, r3, #1
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	011b      	lsls	r3, r3, #4
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f023 030a 	bic.w	r3, r3, #10
 8005bb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	697a      	ldr	r2, [r7, #20]
 8005bcc:	621a      	str	r2, [r3, #32]
}
 8005bce:	bf00      	nop
 8005bd0:	371c      	adds	r7, #28
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b087      	sub	sp, #28
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60f8      	str	r0, [r7, #12]
 8005be2:	60b9      	str	r1, [r7, #8]
 8005be4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	f023 0210 	bic.w	r2, r3, #16
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6a1b      	ldr	r3, [r3, #32]
 8005bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	031b      	lsls	r3, r3, #12
 8005c0a:	697a      	ldr	r2, [r7, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005c16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b085      	sub	sp, #20
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
 8005c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c52:	683a      	ldr	r2, [r7, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f043 0307 	orr.w	r3, r3, #7
 8005c5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	609a      	str	r2, [r3, #8]
}
 8005c64:	bf00      	nop
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	021a      	lsls	r2, r3, #8
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	609a      	str	r2, [r3, #8]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b087      	sub	sp, #28
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f003 031f 	and.w	r3, r3, #31
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6a1a      	ldr	r2, [r3, #32]
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	401a      	ands	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	f003 031f 	and.w	r3, r3, #31
 8005ce2:	6879      	ldr	r1, [r7, #4]
 8005ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
	...

08005cfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d101      	bne.n	8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d10:	2302      	movs	r3, #2
 8005d12:	e068      	b.n	8005de6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689b      	ldr	r3, [r3, #8]
 8005d32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a2e      	ldr	r2, [pc, #184]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d004      	beq.n	8005d48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a2d      	ldr	r2, [pc, #180]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d108      	bne.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005d4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d01d      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d86:	d018      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a1b      	ldr	r2, [pc, #108]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1a      	ldr	r2, [pc, #104]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d00e      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d009      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a13      	ldr	r2, [pc, #76]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d004      	beq.n	8005dba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d10c      	bne.n	8005dd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3714      	adds	r7, #20
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000

08005e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d101      	bne.n	8005e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e24:	2302      	movs	r3, #2
 8005e26:	e065      	b.n	8005ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a14      	ldr	r2, [pc, #80]	; (8005f04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d115      	bne.n	8005ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	051b      	lsls	r3, r3, #20
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	69db      	ldr	r3, [r3, #28]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6a1b      	ldr	r3, [r3, #32]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40012c00 	.word	0x40012c00
 8005f04:	40013400 	.word	0x40013400

08005f08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f16:	2301      	movs	r3, #1
 8005f18:	e042      	b.n	8005fa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d106      	bne.n	8005f32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2200      	movs	r2, #0
 8005f28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f2c:	6878      	ldr	r0, [r7, #4]
 8005f2e:	f7fb fe69 	bl	8001c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2224      	movs	r2, #36	; 0x24
 8005f36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 0201 	bic.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 f8c4 	bl	80060d8 <UART_SetConfig>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e022      	b.n	8005fa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d002      	beq.n	8005f68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fbb4 	bl	80066d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689a      	ldr	r2, [r3, #8]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc3b 	bl	8006814 <UART_CheckIdleState>
 8005f9e:	4603      	mov	r3, r0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af02      	add	r7, sp, #8
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4613      	mov	r3, r2
 8005fb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fbe:	2b20      	cmp	r3, #32
 8005fc0:	f040 8084 	bne.w	80060cc <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_UART_Transmit+0x28>
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d101      	bne.n	8005fd4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e07c      	b.n	80060ce <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d101      	bne.n	8005fe2 <HAL_UART_Transmit+0x3a>
 8005fde:	2302      	movs	r3, #2
 8005fe0:	e075      	b.n	80060ce <HAL_UART_Transmit+0x126>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2221      	movs	r2, #33	; 0x21
 8005ff6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ffa:	f7fc f9a5 	bl	8002348 <HAL_GetTick>
 8005ffe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	88fa      	ldrh	r2, [r7, #6]
 8006004:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	88fa      	ldrh	r2, [r7, #6]
 800600c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006018:	d108      	bne.n	800602c <HAL_UART_Transmit+0x84>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	691b      	ldr	r3, [r3, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d104      	bne.n	800602c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e003      	b.n	8006034 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800603c:	e02d      	b.n	800609a <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	9300      	str	r3, [sp, #0]
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	2200      	movs	r2, #0
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	68f8      	ldr	r0, [r7, #12]
 800604a:	f000 fc2e 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 800604e:	4603      	mov	r3, r0
 8006050:	2b00      	cmp	r3, #0
 8006052:	d001      	beq.n	8006058 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e03a      	b.n	80060ce <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10b      	bne.n	8006076 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800605e:	69bb      	ldr	r3, [r7, #24]
 8006060:	881a      	ldrh	r2, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800606a:	b292      	uxth	r2, r2
 800606c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	3302      	adds	r3, #2
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	e008      	b.n	8006088 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	781a      	ldrb	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	b292      	uxth	r2, r2
 8006080:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	3301      	adds	r3, #1
 8006086:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29a      	uxth	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d1cb      	bne.n	800603e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2200      	movs	r2, #0
 80060ae:	2140      	movs	r1, #64	; 0x40
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f000 fbfa 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d001      	beq.n	80060c0 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e006      	b.n	80060ce <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2220      	movs	r2, #32
 80060c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80060c8:	2300      	movs	r3, #0
 80060ca:	e000      	b.n	80060ce <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 80060cc:	2302      	movs	r3, #2
  }
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
	...

080060d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060dc:	b08c      	sub	sp, #48	; 0x30
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	691b      	ldr	r3, [r3, #16]
 80060f0:	431a      	orrs	r2, r3
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	695b      	ldr	r3, [r3, #20]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	4baa      	ldr	r3, [pc, #680]	; (80063b0 <UART_SetConfig+0x2d8>)
 8006108:	4013      	ands	r3, r2
 800610a:	697a      	ldr	r2, [r7, #20]
 800610c:	6812      	ldr	r2, [r2, #0]
 800610e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006110:	430b      	orrs	r3, r1
 8006112:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a9f      	ldr	r2, [pc, #636]	; (80063b4 <UART_SetConfig+0x2dc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d004      	beq.n	8006144 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006140:	4313      	orrs	r3, r2
 8006142:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	689b      	ldr	r3, [r3, #8]
 800614a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800614e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006158:	430b      	orrs	r3, r1
 800615a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006162:	f023 010f 	bic.w	r1, r3, #15
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a90      	ldr	r2, [pc, #576]	; (80063b8 <UART_SetConfig+0x2e0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d125      	bne.n	80061c8 <UART_SetConfig+0xf0>
 800617c:	4b8f      	ldr	r3, [pc, #572]	; (80063bc <UART_SetConfig+0x2e4>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f003 0303 	and.w	r3, r3, #3
 8006186:	2b03      	cmp	r3, #3
 8006188:	d81a      	bhi.n	80061c0 <UART_SetConfig+0xe8>
 800618a:	a201      	add	r2, pc, #4	; (adr r2, 8006190 <UART_SetConfig+0xb8>)
 800618c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006190:	080061a1 	.word	0x080061a1
 8006194:	080061b1 	.word	0x080061b1
 8006198:	080061a9 	.word	0x080061a9
 800619c:	080061b9 	.word	0x080061b9
 80061a0:	2301      	movs	r3, #1
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e116      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80061a8:	2302      	movs	r3, #2
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e112      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80061b0:	2304      	movs	r3, #4
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e10e      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80061b8:	2308      	movs	r3, #8
 80061ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061be:	e10a      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80061c0:	2310      	movs	r3, #16
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c6:	e106      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a7c      	ldr	r2, [pc, #496]	; (80063c0 <UART_SetConfig+0x2e8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d138      	bne.n	8006244 <UART_SetConfig+0x16c>
 80061d2:	4b7a      	ldr	r3, [pc, #488]	; (80063bc <UART_SetConfig+0x2e4>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b0c      	cmp	r3, #12
 80061de:	d82d      	bhi.n	800623c <UART_SetConfig+0x164>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0x110>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	0800623d 	.word	0x0800623d
 80061f0:	0800623d 	.word	0x0800623d
 80061f4:	0800623d 	.word	0x0800623d
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	0800623d 	.word	0x0800623d
 8006200:	0800623d 	.word	0x0800623d
 8006204:	0800623d 	.word	0x0800623d
 8006208:	08006225 	.word	0x08006225
 800620c:	0800623d 	.word	0x0800623d
 8006210:	0800623d 	.word	0x0800623d
 8006214:	0800623d 	.word	0x0800623d
 8006218:	08006235 	.word	0x08006235
 800621c:	2300      	movs	r3, #0
 800621e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006222:	e0d8      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006224:	2302      	movs	r3, #2
 8006226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800622a:	e0d4      	b.n	80063d6 <UART_SetConfig+0x2fe>
 800622c:	2304      	movs	r3, #4
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e0d0      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006234:	2308      	movs	r3, #8
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e0cc      	b.n	80063d6 <UART_SetConfig+0x2fe>
 800623c:	2310      	movs	r3, #16
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e0c8      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a5e      	ldr	r2, [pc, #376]	; (80063c4 <UART_SetConfig+0x2ec>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d125      	bne.n	800629a <UART_SetConfig+0x1c2>
 800624e:	4b5b      	ldr	r3, [pc, #364]	; (80063bc <UART_SetConfig+0x2e4>)
 8006250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006254:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006258:	2b30      	cmp	r3, #48	; 0x30
 800625a:	d016      	beq.n	800628a <UART_SetConfig+0x1b2>
 800625c:	2b30      	cmp	r3, #48	; 0x30
 800625e:	d818      	bhi.n	8006292 <UART_SetConfig+0x1ba>
 8006260:	2b20      	cmp	r3, #32
 8006262:	d00a      	beq.n	800627a <UART_SetConfig+0x1a2>
 8006264:	2b20      	cmp	r3, #32
 8006266:	d814      	bhi.n	8006292 <UART_SetConfig+0x1ba>
 8006268:	2b00      	cmp	r3, #0
 800626a:	d002      	beq.n	8006272 <UART_SetConfig+0x19a>
 800626c:	2b10      	cmp	r3, #16
 800626e:	d008      	beq.n	8006282 <UART_SetConfig+0x1aa>
 8006270:	e00f      	b.n	8006292 <UART_SetConfig+0x1ba>
 8006272:	2300      	movs	r3, #0
 8006274:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006278:	e0ad      	b.n	80063d6 <UART_SetConfig+0x2fe>
 800627a:	2302      	movs	r3, #2
 800627c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006280:	e0a9      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006282:	2304      	movs	r3, #4
 8006284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006288:	e0a5      	b.n	80063d6 <UART_SetConfig+0x2fe>
 800628a:	2308      	movs	r3, #8
 800628c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006290:	e0a1      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006292:	2310      	movs	r3, #16
 8006294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006298:	e09d      	b.n	80063d6 <UART_SetConfig+0x2fe>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a4a      	ldr	r2, [pc, #296]	; (80063c8 <UART_SetConfig+0x2f0>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d125      	bne.n	80062f0 <UART_SetConfig+0x218>
 80062a4:	4b45      	ldr	r3, [pc, #276]	; (80063bc <UART_SetConfig+0x2e4>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062ae:	2bc0      	cmp	r3, #192	; 0xc0
 80062b0:	d016      	beq.n	80062e0 <UART_SetConfig+0x208>
 80062b2:	2bc0      	cmp	r3, #192	; 0xc0
 80062b4:	d818      	bhi.n	80062e8 <UART_SetConfig+0x210>
 80062b6:	2b80      	cmp	r3, #128	; 0x80
 80062b8:	d00a      	beq.n	80062d0 <UART_SetConfig+0x1f8>
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d814      	bhi.n	80062e8 <UART_SetConfig+0x210>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <UART_SetConfig+0x1f0>
 80062c2:	2b40      	cmp	r3, #64	; 0x40
 80062c4:	d008      	beq.n	80062d8 <UART_SetConfig+0x200>
 80062c6:	e00f      	b.n	80062e8 <UART_SetConfig+0x210>
 80062c8:	2300      	movs	r3, #0
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ce:	e082      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80062d0:	2302      	movs	r3, #2
 80062d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d6:	e07e      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80062d8:	2304      	movs	r3, #4
 80062da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062de:	e07a      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80062e0:	2308      	movs	r3, #8
 80062e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e6:	e076      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80062e8:	2310      	movs	r3, #16
 80062ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ee:	e072      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a35      	ldr	r2, [pc, #212]	; (80063cc <UART_SetConfig+0x2f4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d12a      	bne.n	8006350 <UART_SetConfig+0x278>
 80062fa:	4b30      	ldr	r3, [pc, #192]	; (80063bc <UART_SetConfig+0x2e4>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006300:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006308:	d01a      	beq.n	8006340 <UART_SetConfig+0x268>
 800630a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800630e:	d81b      	bhi.n	8006348 <UART_SetConfig+0x270>
 8006310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006314:	d00c      	beq.n	8006330 <UART_SetConfig+0x258>
 8006316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800631a:	d815      	bhi.n	8006348 <UART_SetConfig+0x270>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0x250>
 8006320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006324:	d008      	beq.n	8006338 <UART_SetConfig+0x260>
 8006326:	e00f      	b.n	8006348 <UART_SetConfig+0x270>
 8006328:	2300      	movs	r3, #0
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632e:	e052      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006330:	2302      	movs	r3, #2
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006336:	e04e      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006338:	2304      	movs	r3, #4
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633e:	e04a      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006340:	2308      	movs	r3, #8
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006346:	e046      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006348:	2310      	movs	r3, #16
 800634a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800634e:	e042      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a17      	ldr	r2, [pc, #92]	; (80063b4 <UART_SetConfig+0x2dc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d13a      	bne.n	80063d0 <UART_SetConfig+0x2f8>
 800635a:	4b18      	ldr	r3, [pc, #96]	; (80063bc <UART_SetConfig+0x2e4>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006364:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006368:	d01a      	beq.n	80063a0 <UART_SetConfig+0x2c8>
 800636a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800636e:	d81b      	bhi.n	80063a8 <UART_SetConfig+0x2d0>
 8006370:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006374:	d00c      	beq.n	8006390 <UART_SetConfig+0x2b8>
 8006376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637a:	d815      	bhi.n	80063a8 <UART_SetConfig+0x2d0>
 800637c:	2b00      	cmp	r3, #0
 800637e:	d003      	beq.n	8006388 <UART_SetConfig+0x2b0>
 8006380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006384:	d008      	beq.n	8006398 <UART_SetConfig+0x2c0>
 8006386:	e00f      	b.n	80063a8 <UART_SetConfig+0x2d0>
 8006388:	2300      	movs	r3, #0
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e022      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006390:	2302      	movs	r3, #2
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e01e      	b.n	80063d6 <UART_SetConfig+0x2fe>
 8006398:	2304      	movs	r3, #4
 800639a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639e:	e01a      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80063a0:	2308      	movs	r3, #8
 80063a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a6:	e016      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80063a8:	2310      	movs	r3, #16
 80063aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ae:	e012      	b.n	80063d6 <UART_SetConfig+0x2fe>
 80063b0:	cfff69f3 	.word	0xcfff69f3
 80063b4:	40008000 	.word	0x40008000
 80063b8:	40013800 	.word	0x40013800
 80063bc:	40021000 	.word	0x40021000
 80063c0:	40004400 	.word	0x40004400
 80063c4:	40004800 	.word	0x40004800
 80063c8:	40004c00 	.word	0x40004c00
 80063cc:	40005000 	.word	0x40005000
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4aae      	ldr	r2, [pc, #696]	; (8006694 <UART_SetConfig+0x5bc>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	f040 8097 	bne.w	8006510 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063e6:	2b08      	cmp	r3, #8
 80063e8:	d823      	bhi.n	8006432 <UART_SetConfig+0x35a>
 80063ea:	a201      	add	r2, pc, #4	; (adr r2, 80063f0 <UART_SetConfig+0x318>)
 80063ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f0:	08006415 	.word	0x08006415
 80063f4:	08006433 	.word	0x08006433
 80063f8:	0800641d 	.word	0x0800641d
 80063fc:	08006433 	.word	0x08006433
 8006400:	08006423 	.word	0x08006423
 8006404:	08006433 	.word	0x08006433
 8006408:	08006433 	.word	0x08006433
 800640c:	08006433 	.word	0x08006433
 8006410:	0800642b 	.word	0x0800642b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006414:	f7fd fea0 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800641a:	e010      	b.n	800643e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800641c:	4b9e      	ldr	r3, [pc, #632]	; (8006698 <UART_SetConfig+0x5c0>)
 800641e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006420:	e00d      	b.n	800643e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006422:	f7fd fe01 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8006426:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006428:	e009      	b.n	800643e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800642a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006430:	e005      	b.n	800643e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800643c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800643e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8130 	beq.w	80066a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644a:	4a94      	ldr	r2, [pc, #592]	; (800669c <UART_SetConfig+0x5c4>)
 800644c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006450:	461a      	mov	r2, r3
 8006452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006454:	fbb3 f3f2 	udiv	r3, r3, r2
 8006458:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	685a      	ldr	r2, [r3, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	69ba      	ldr	r2, [r7, #24]
 8006466:	429a      	cmp	r2, r3
 8006468:	d305      	bcc.n	8006476 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006470:	69ba      	ldr	r2, [r7, #24]
 8006472:	429a      	cmp	r2, r3
 8006474:	d903      	bls.n	800647e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800647c:	e113      	b.n	80066a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006480:	2200      	movs	r2, #0
 8006482:	60bb      	str	r3, [r7, #8]
 8006484:	60fa      	str	r2, [r7, #12]
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	4a84      	ldr	r2, [pc, #528]	; (800669c <UART_SetConfig+0x5c4>)
 800648c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006490:	b29b      	uxth	r3, r3
 8006492:	2200      	movs	r2, #0
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	e9d7 2300 	ldrd	r2, r3, [r7]
 800649c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064a0:	f7fa fb9a 	bl	8000bd8 <__aeabi_uldivmod>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4610      	mov	r0, r2
 80064aa:	4619      	mov	r1, r3
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	020b      	lsls	r3, r1, #8
 80064b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064ba:	0202      	lsls	r2, r0, #8
 80064bc:	6979      	ldr	r1, [r7, #20]
 80064be:	6849      	ldr	r1, [r1, #4]
 80064c0:	0849      	lsrs	r1, r1, #1
 80064c2:	2000      	movs	r0, #0
 80064c4:	460c      	mov	r4, r1
 80064c6:	4605      	mov	r5, r0
 80064c8:	eb12 0804 	adds.w	r8, r2, r4
 80064cc:	eb43 0905 	adc.w	r9, r3, r5
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	469a      	mov	sl, r3
 80064d8:	4693      	mov	fp, r2
 80064da:	4652      	mov	r2, sl
 80064dc:	465b      	mov	r3, fp
 80064de:	4640      	mov	r0, r8
 80064e0:	4649      	mov	r1, r9
 80064e2:	f7fa fb79 	bl	8000bd8 <__aeabi_uldivmod>
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	4613      	mov	r3, r2
 80064ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064f4:	d308      	bcc.n	8006508 <UART_SetConfig+0x430>
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80064fc:	d204      	bcs.n	8006508 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	60da      	str	r2, [r3, #12]
 8006506:	e0ce      	b.n	80066a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800650e:	e0ca      	b.n	80066a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006518:	d166      	bne.n	80065e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800651a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800651e:	2b08      	cmp	r3, #8
 8006520:	d827      	bhi.n	8006572 <UART_SetConfig+0x49a>
 8006522:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <UART_SetConfig+0x450>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006555 	.word	0x08006555
 8006530:	0800655d 	.word	0x0800655d
 8006534:	08006573 	.word	0x08006573
 8006538:	08006563 	.word	0x08006563
 800653c:	08006573 	.word	0x08006573
 8006540:	08006573 	.word	0x08006573
 8006544:	08006573 	.word	0x08006573
 8006548:	0800656b 	.word	0x0800656b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800654c:	f7fd fe04 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006550:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006552:	e014      	b.n	800657e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fd fe16 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8006558:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800655a:	e010      	b.n	800657e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800655c:	4b4e      	ldr	r3, [pc, #312]	; (8006698 <UART_SetConfig+0x5c0>)
 800655e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006560:	e00d      	b.n	800657e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006562:	f7fd fd61 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8006566:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006568:	e009      	b.n	800657e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006570:	e005      	b.n	800657e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006572:	2300      	movs	r3, #0
 8006574:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800657c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 8090 	beq.w	80066a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658a:	4a44      	ldr	r2, [pc, #272]	; (800669c <UART_SetConfig+0x5c4>)
 800658c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006590:	461a      	mov	r2, r3
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	fbb3 f3f2 	udiv	r3, r3, r2
 8006598:	005a      	lsls	r2, r3, #1
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	441a      	add	r2, r3
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	2b0f      	cmp	r3, #15
 80065b0:	d916      	bls.n	80065e0 <UART_SetConfig+0x508>
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b8:	d212      	bcs.n	80065e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065ba:	6a3b      	ldr	r3, [r7, #32]
 80065bc:	b29b      	uxth	r3, r3
 80065be:	f023 030f 	bic.w	r3, r3, #15
 80065c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	085b      	lsrs	r3, r3, #1
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	8bfb      	ldrh	r3, [r7, #30]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	8bfa      	ldrh	r2, [r7, #30]
 80065dc:	60da      	str	r2, [r3, #12]
 80065de:	e062      	b.n	80066a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065e6:	e05e      	b.n	80066a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d828      	bhi.n	8006642 <UART_SetConfig+0x56a>
 80065f0:	a201      	add	r2, pc, #4	; (adr r2, 80065f8 <UART_SetConfig+0x520>)
 80065f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f6:	bf00      	nop
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	08006625 	.word	0x08006625
 8006600:	0800662d 	.word	0x0800662d
 8006604:	08006643 	.word	0x08006643
 8006608:	08006633 	.word	0x08006633
 800660c:	08006643 	.word	0x08006643
 8006610:	08006643 	.word	0x08006643
 8006614:	08006643 	.word	0x08006643
 8006618:	0800663b 	.word	0x0800663b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800661c:	f7fd fd9c 	bl	8004158 <HAL_RCC_GetPCLK1Freq>
 8006620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006622:	e014      	b.n	800664e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006624:	f7fd fdae 	bl	8004184 <HAL_RCC_GetPCLK2Freq>
 8006628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800662a:	e010      	b.n	800664e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800662c:	4b1a      	ldr	r3, [pc, #104]	; (8006698 <UART_SetConfig+0x5c0>)
 800662e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006630:	e00d      	b.n	800664e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006632:	f7fd fcf9 	bl	8004028 <HAL_RCC_GetSysClockFreq>
 8006636:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006638:	e009      	b.n	800664e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800663a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006640:	e005      	b.n	800664e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006642:	2300      	movs	r3, #0
 8006644:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800664c:	bf00      	nop
    }

    if (pclk != 0U)
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	d028      	beq.n	80066a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006658:	4a10      	ldr	r2, [pc, #64]	; (800669c <UART_SetConfig+0x5c4>)
 800665a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800665e:	461a      	mov	r2, r3
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	fbb3 f2f2 	udiv	r2, r3, r2
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	085b      	lsrs	r3, r3, #1
 800666c:	441a      	add	r2, r3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	fbb2 f3f3 	udiv	r3, r2, r3
 8006676:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b0f      	cmp	r3, #15
 800667c:	d910      	bls.n	80066a0 <UART_SetConfig+0x5c8>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006684:	d20c      	bcs.n	80066a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	b29a      	uxth	r2, r3
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	60da      	str	r2, [r3, #12]
 8006690:	e009      	b.n	80066a6 <UART_SetConfig+0x5ce>
 8006692:	bf00      	nop
 8006694:	40008000 	.word	0x40008000
 8006698:	00f42400 	.word	0x00f42400
 800669c:	08009730 	.word	0x08009730
      }
      else
      {
        ret = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2201      	movs	r2, #1
 80066aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2200      	movs	r2, #0
 80066c0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80066c2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3730      	adds	r7, #48	; 0x30
 80066ca:	46bd      	mov	sp, r7
 80066cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00a      	beq.n	80066fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	430a      	orrs	r2, r1
 80066f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fe:	f003 0302 	and.w	r3, r3, #2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00a      	beq.n	800671c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	430a      	orrs	r2, r1
 800671a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006720:	f003 0304 	and.w	r3, r3, #4
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00a      	beq.n	800673e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	430a      	orrs	r2, r1
 800673c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00a      	beq.n	8006760 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006764:	f003 0310 	and.w	r3, r3, #16
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	f003 0320 	and.w	r3, r3, #32
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d01a      	beq.n	80067e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ce:	d10a      	bne.n	80067e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00a      	beq.n	8006808 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	605a      	str	r2, [r3, #4]
  }
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006824:	f7fb fd90 	bl	8002348 <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f003 0308 	and.w	r3, r3, #8
 8006834:	2b08      	cmp	r3, #8
 8006836:	d10e      	bne.n	8006856 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006838:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 f82f 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d001      	beq.n	8006856 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e025      	b.n	80068a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b04      	cmp	r3, #4
 8006862:	d10e      	bne.n	8006882 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006868:	9300      	str	r3, [sp, #0]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f819 	bl	80068aa <UART_WaitOnFlagUntilTimeout>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d001      	beq.n	8006882 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e00f      	b.n	80068a2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2220      	movs	r2, #32
 8006886:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068a0:	2300      	movs	r3, #0
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068aa:	b580      	push	{r7, lr}
 80068ac:	b09c      	sub	sp, #112	; 0x70
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	60f8      	str	r0, [r7, #12]
 80068b2:	60b9      	str	r1, [r7, #8]
 80068b4:	603b      	str	r3, [r7, #0]
 80068b6:	4613      	mov	r3, r2
 80068b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ba:	e0a9      	b.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c2:	f000 80a5 	beq.w	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fb fd3f 	bl	8002348 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
 80068d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d140      	bne.n	800695e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e4:	e853 3f00 	ldrex	r3, [r3]
 80068e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068f0:	667b      	str	r3, [r7, #100]	; 0x64
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068fc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006900:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006902:	e841 2300 	strex	r3, r2, [r1]
 8006906:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1e6      	bne.n	80068dc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006918:	e853 3f00 	ldrex	r3, [r3]
 800691c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f023 0301 	bic.w	r3, r3, #1
 8006924:	663b      	str	r3, [r7, #96]	; 0x60
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800692e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006930:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006932:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006934:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006936:	e841 2300 	strex	r3, r2, [r1]
 800693a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1e5      	bne.n	800690e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2220      	movs	r2, #32
 800694e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e069      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d051      	beq.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006976:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800697a:	d149      	bne.n	8006a10 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006984:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	e853 3f00 	ldrex	r3, [r3]
 8006992:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800699a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	461a      	mov	r2, r3
 80069a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069a4:	637b      	str	r3, [r7, #52]	; 0x34
 80069a6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069ac:	e841 2300 	strex	r3, r2, [r1]
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d1e6      	bne.n	8006986 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	e853 3f00 	ldrex	r3, [r3]
 80069c6:	613b      	str	r3, [r7, #16]
   return(result);
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	f023 0301 	bic.w	r3, r3, #1
 80069ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	3308      	adds	r3, #8
 80069d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069d8:	623a      	str	r2, [r7, #32]
 80069da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069dc:	69f9      	ldr	r1, [r7, #28]
 80069de:	6a3a      	ldr	r2, [r7, #32]
 80069e0:	e841 2300 	strex	r3, r2, [r1]
 80069e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d1e5      	bne.n	80069b8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a0c:	2303      	movs	r3, #3
 8006a0e:	e010      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	69da      	ldr	r2, [r3, #28]
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4013      	ands	r3, r2
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	bf0c      	ite	eq
 8006a20:	2301      	moveq	r3, #1
 8006a22:	2300      	movne	r3, #0
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	461a      	mov	r2, r3
 8006a28:	79fb      	ldrb	r3, [r7, #7]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	f43f af46 	beq.w	80068bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3770      	adds	r7, #112	; 0x70
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b085      	sub	sp, #20
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e027      	b.n	8006aa0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2224      	movs	r2, #36	; 0x24
 8006a5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f022 0201 	bic.w	r2, r2, #1
 8006a76:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3714      	adds	r7, #20
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d101      	bne.n	8006ac4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	e02d      	b.n	8006b20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2224      	movs	r2, #36	; 0x24
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f022 0201 	bic.w	r2, r2, #1
 8006aea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	683a      	ldr	r2, [r7, #0]
 8006afc:	430a      	orrs	r2, r1
 8006afe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f84f 	bl	8006ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2220      	movs	r2, #32
 8006b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e02d      	b.n	8006b9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2224      	movs	r2, #36	; 0x24
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f022 0201 	bic.w	r2, r2, #1
 8006b66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f811 	bl	8006ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d108      	bne.n	8006bc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bc4:	e031      	b.n	8006c2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bca:	2308      	movs	r3, #8
 8006bcc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	0e5b      	lsrs	r3, r3, #25
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	f003 0307 	and.w	r3, r3, #7
 8006bdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	0f5b      	lsrs	r3, r3, #29
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	7b3a      	ldrb	r2, [r7, #12]
 8006bf2:	4911      	ldr	r1, [pc, #68]	; (8006c38 <UARTEx_SetNbDataToProcess+0x94>)
 8006bf4:	5c8a      	ldrb	r2, [r1, r2]
 8006bf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bfa:	7b3a      	ldrb	r2, [r7, #12]
 8006bfc:	490f      	ldr	r1, [pc, #60]	; (8006c3c <UARTEx_SetNbDataToProcess+0x98>)
 8006bfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c00:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c04:	b29a      	uxth	r2, r3
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	7b7a      	ldrb	r2, [r7, #13]
 8006c10:	4909      	ldr	r1, [pc, #36]	; (8006c38 <UARTEx_SetNbDataToProcess+0x94>)
 8006c12:	5c8a      	ldrb	r2, [r1, r2]
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c18:	7b7a      	ldrb	r2, [r7, #13]
 8006c1a:	4908      	ldr	r1, [pc, #32]	; (8006c3c <UARTEx_SetNbDataToProcess+0x98>)
 8006c1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c2a:	bf00      	nop
 8006c2c:	3714      	adds	r7, #20
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	08009748 	.word	0x08009748
 8006c3c:	08009750 	.word	0x08009750

08006c40 <__errno>:
 8006c40:	4b01      	ldr	r3, [pc, #4]	; (8006c48 <__errno+0x8>)
 8006c42:	6818      	ldr	r0, [r3, #0]
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	2000000c 	.word	0x2000000c

08006c4c <__libc_init_array>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	4d0d      	ldr	r5, [pc, #52]	; (8006c84 <__libc_init_array+0x38>)
 8006c50:	4c0d      	ldr	r4, [pc, #52]	; (8006c88 <__libc_init_array+0x3c>)
 8006c52:	1b64      	subs	r4, r4, r5
 8006c54:	10a4      	asrs	r4, r4, #2
 8006c56:	2600      	movs	r6, #0
 8006c58:	42a6      	cmp	r6, r4
 8006c5a:	d109      	bne.n	8006c70 <__libc_init_array+0x24>
 8006c5c:	4d0b      	ldr	r5, [pc, #44]	; (8006c8c <__libc_init_array+0x40>)
 8006c5e:	4c0c      	ldr	r4, [pc, #48]	; (8006c90 <__libc_init_array+0x44>)
 8006c60:	f002 fd36 	bl	80096d0 <_init>
 8006c64:	1b64      	subs	r4, r4, r5
 8006c66:	10a4      	asrs	r4, r4, #2
 8006c68:	2600      	movs	r6, #0
 8006c6a:	42a6      	cmp	r6, r4
 8006c6c:	d105      	bne.n	8006c7a <__libc_init_array+0x2e>
 8006c6e:	bd70      	pop	{r4, r5, r6, pc}
 8006c70:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c74:	4798      	blx	r3
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7ee      	b.n	8006c58 <__libc_init_array+0xc>
 8006c7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7e:	4798      	blx	r3
 8006c80:	3601      	adds	r6, #1
 8006c82:	e7f2      	b.n	8006c6a <__libc_init_array+0x1e>
 8006c84:	08009b3c 	.word	0x08009b3c
 8006c88:	08009b3c 	.word	0x08009b3c
 8006c8c:	08009b3c 	.word	0x08009b3c
 8006c90:	08009b40 	.word	0x08009b40

08006c94 <memset>:
 8006c94:	4402      	add	r2, r0
 8006c96:	4603      	mov	r3, r0
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <memset+0xa>
 8006c9c:	4770      	bx	lr
 8006c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca2:	e7f9      	b.n	8006c98 <memset+0x4>

08006ca4 <__cvt>:
 8006ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ca8:	ec55 4b10 	vmov	r4, r5, d0
 8006cac:	2d00      	cmp	r5, #0
 8006cae:	460e      	mov	r6, r1
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	462b      	mov	r3, r5
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006cba:	461d      	movlt	r5, r3
 8006cbc:	2300      	movge	r3, #0
 8006cbe:	232d      	movlt	r3, #45	; 0x2d
 8006cc0:	700b      	strb	r3, [r1, #0]
 8006cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cc4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006cc8:	4691      	mov	r9, r2
 8006cca:	f023 0820 	bic.w	r8, r3, #32
 8006cce:	bfbc      	itt	lt
 8006cd0:	4622      	movlt	r2, r4
 8006cd2:	4614      	movlt	r4, r2
 8006cd4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006cd8:	d005      	beq.n	8006ce6 <__cvt+0x42>
 8006cda:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006cde:	d100      	bne.n	8006ce2 <__cvt+0x3e>
 8006ce0:	3601      	adds	r6, #1
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	e000      	b.n	8006ce8 <__cvt+0x44>
 8006ce6:	2103      	movs	r1, #3
 8006ce8:	ab03      	add	r3, sp, #12
 8006cea:	9301      	str	r3, [sp, #4]
 8006cec:	ab02      	add	r3, sp, #8
 8006cee:	9300      	str	r3, [sp, #0]
 8006cf0:	ec45 4b10 	vmov	d0, r4, r5
 8006cf4:	4653      	mov	r3, sl
 8006cf6:	4632      	mov	r2, r6
 8006cf8:	f000 fcca 	bl	8007690 <_dtoa_r>
 8006cfc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006d00:	4607      	mov	r7, r0
 8006d02:	d102      	bne.n	8006d0a <__cvt+0x66>
 8006d04:	f019 0f01 	tst.w	r9, #1
 8006d08:	d022      	beq.n	8006d50 <__cvt+0xac>
 8006d0a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006d0e:	eb07 0906 	add.w	r9, r7, r6
 8006d12:	d110      	bne.n	8006d36 <__cvt+0x92>
 8006d14:	783b      	ldrb	r3, [r7, #0]
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d10a      	bne.n	8006d30 <__cvt+0x8c>
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	4620      	mov	r0, r4
 8006d20:	4629      	mov	r1, r5
 8006d22:	f7f9 fee9 	bl	8000af8 <__aeabi_dcmpeq>
 8006d26:	b918      	cbnz	r0, 8006d30 <__cvt+0x8c>
 8006d28:	f1c6 0601 	rsb	r6, r6, #1
 8006d2c:	f8ca 6000 	str.w	r6, [sl]
 8006d30:	f8da 3000 	ldr.w	r3, [sl]
 8006d34:	4499      	add	r9, r3
 8006d36:	2200      	movs	r2, #0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	f7f9 fedb 	bl	8000af8 <__aeabi_dcmpeq>
 8006d42:	b108      	cbz	r0, 8006d48 <__cvt+0xa4>
 8006d44:	f8cd 900c 	str.w	r9, [sp, #12]
 8006d48:	2230      	movs	r2, #48	; 0x30
 8006d4a:	9b03      	ldr	r3, [sp, #12]
 8006d4c:	454b      	cmp	r3, r9
 8006d4e:	d307      	bcc.n	8006d60 <__cvt+0xbc>
 8006d50:	9b03      	ldr	r3, [sp, #12]
 8006d52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006d54:	1bdb      	subs	r3, r3, r7
 8006d56:	4638      	mov	r0, r7
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	b004      	add	sp, #16
 8006d5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	9103      	str	r1, [sp, #12]
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e7f0      	b.n	8006d4a <__cvt+0xa6>

08006d68 <__exponent>:
 8006d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2900      	cmp	r1, #0
 8006d6e:	bfb8      	it	lt
 8006d70:	4249      	neglt	r1, r1
 8006d72:	f803 2b02 	strb.w	r2, [r3], #2
 8006d76:	bfb4      	ite	lt
 8006d78:	222d      	movlt	r2, #45	; 0x2d
 8006d7a:	222b      	movge	r2, #43	; 0x2b
 8006d7c:	2909      	cmp	r1, #9
 8006d7e:	7042      	strb	r2, [r0, #1]
 8006d80:	dd2a      	ble.n	8006dd8 <__exponent+0x70>
 8006d82:	f10d 0407 	add.w	r4, sp, #7
 8006d86:	46a4      	mov	ip, r4
 8006d88:	270a      	movs	r7, #10
 8006d8a:	46a6      	mov	lr, r4
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006d92:	fb07 1516 	mls	r5, r7, r6, r1
 8006d96:	3530      	adds	r5, #48	; 0x30
 8006d98:	2a63      	cmp	r2, #99	; 0x63
 8006d9a:	f104 34ff 	add.w	r4, r4, #4294967295
 8006d9e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006da2:	4631      	mov	r1, r6
 8006da4:	dcf1      	bgt.n	8006d8a <__exponent+0x22>
 8006da6:	3130      	adds	r1, #48	; 0x30
 8006da8:	f1ae 0502 	sub.w	r5, lr, #2
 8006dac:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006db0:	1c44      	adds	r4, r0, #1
 8006db2:	4629      	mov	r1, r5
 8006db4:	4561      	cmp	r1, ip
 8006db6:	d30a      	bcc.n	8006dce <__exponent+0x66>
 8006db8:	f10d 0209 	add.w	r2, sp, #9
 8006dbc:	eba2 020e 	sub.w	r2, r2, lr
 8006dc0:	4565      	cmp	r5, ip
 8006dc2:	bf88      	it	hi
 8006dc4:	2200      	movhi	r2, #0
 8006dc6:	4413      	add	r3, r2
 8006dc8:	1a18      	subs	r0, r3, r0
 8006dca:	b003      	add	sp, #12
 8006dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dd2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006dd6:	e7ed      	b.n	8006db4 <__exponent+0x4c>
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	3130      	adds	r1, #48	; 0x30
 8006ddc:	7083      	strb	r3, [r0, #2]
 8006dde:	70c1      	strb	r1, [r0, #3]
 8006de0:	1d03      	adds	r3, r0, #4
 8006de2:	e7f1      	b.n	8006dc8 <__exponent+0x60>

08006de4 <_printf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	ed2d 8b02 	vpush	{d8}
 8006dec:	b08d      	sub	sp, #52	; 0x34
 8006dee:	460c      	mov	r4, r1
 8006df0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006df4:	4616      	mov	r6, r2
 8006df6:	461f      	mov	r7, r3
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f001 fb2d 	bl	8008458 <_localeconv_r>
 8006dfe:	f8d0 a000 	ldr.w	sl, [r0]
 8006e02:	4650      	mov	r0, sl
 8006e04:	f7f9 f9fc 	bl	8000200 <strlen>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	930a      	str	r3, [sp, #40]	; 0x28
 8006e0c:	6823      	ldr	r3, [r4, #0]
 8006e0e:	9305      	str	r3, [sp, #20]
 8006e10:	f8d8 3000 	ldr.w	r3, [r8]
 8006e14:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006e18:	3307      	adds	r3, #7
 8006e1a:	f023 0307 	bic.w	r3, r3, #7
 8006e1e:	f103 0208 	add.w	r2, r3, #8
 8006e22:	f8c8 2000 	str.w	r2, [r8]
 8006e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006e2e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006e32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006e36:	9307      	str	r3, [sp, #28]
 8006e38:	f8cd 8018 	str.w	r8, [sp, #24]
 8006e3c:	ee08 0a10 	vmov	s16, r0
 8006e40:	4b9f      	ldr	r3, [pc, #636]	; (80070c0 <_printf_float+0x2dc>)
 8006e42:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e46:	f04f 32ff 	mov.w	r2, #4294967295
 8006e4a:	f7f9 fe87 	bl	8000b5c <__aeabi_dcmpun>
 8006e4e:	bb88      	cbnz	r0, 8006eb4 <_printf_float+0xd0>
 8006e50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006e54:	4b9a      	ldr	r3, [pc, #616]	; (80070c0 <_printf_float+0x2dc>)
 8006e56:	f04f 32ff 	mov.w	r2, #4294967295
 8006e5a:	f7f9 fe61 	bl	8000b20 <__aeabi_dcmple>
 8006e5e:	bb48      	cbnz	r0, 8006eb4 <_printf_float+0xd0>
 8006e60:	2200      	movs	r2, #0
 8006e62:	2300      	movs	r3, #0
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fe50 	bl	8000b0c <__aeabi_dcmplt>
 8006e6c:	b110      	cbz	r0, 8006e74 <_printf_float+0x90>
 8006e6e:	232d      	movs	r3, #45	; 0x2d
 8006e70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e74:	4b93      	ldr	r3, [pc, #588]	; (80070c4 <_printf_float+0x2e0>)
 8006e76:	4894      	ldr	r0, [pc, #592]	; (80070c8 <_printf_float+0x2e4>)
 8006e78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006e7c:	bf94      	ite	ls
 8006e7e:	4698      	movls	r8, r3
 8006e80:	4680      	movhi	r8, r0
 8006e82:	2303      	movs	r3, #3
 8006e84:	6123      	str	r3, [r4, #16]
 8006e86:	9b05      	ldr	r3, [sp, #20]
 8006e88:	f023 0204 	bic.w	r2, r3, #4
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	f04f 0900 	mov.w	r9, #0
 8006e92:	9700      	str	r7, [sp, #0]
 8006e94:	4633      	mov	r3, r6
 8006e96:	aa0b      	add	r2, sp, #44	; 0x2c
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f000 f9d8 	bl	8007250 <_printf_common>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	f040 8090 	bne.w	8006fc6 <_printf_float+0x1e2>
 8006ea6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eaa:	b00d      	add	sp, #52	; 0x34
 8006eac:	ecbd 8b02 	vpop	{d8}
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	464b      	mov	r3, r9
 8006eb8:	4640      	mov	r0, r8
 8006eba:	4649      	mov	r1, r9
 8006ebc:	f7f9 fe4e 	bl	8000b5c <__aeabi_dcmpun>
 8006ec0:	b140      	cbz	r0, 8006ed4 <_printf_float+0xf0>
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfbc      	itt	lt
 8006ec8:	232d      	movlt	r3, #45	; 0x2d
 8006eca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006ece:	487f      	ldr	r0, [pc, #508]	; (80070cc <_printf_float+0x2e8>)
 8006ed0:	4b7f      	ldr	r3, [pc, #508]	; (80070d0 <_printf_float+0x2ec>)
 8006ed2:	e7d1      	b.n	8006e78 <_printf_float+0x94>
 8006ed4:	6863      	ldr	r3, [r4, #4]
 8006ed6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006eda:	9206      	str	r2, [sp, #24]
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	d13f      	bne.n	8006f60 <_printf_float+0x17c>
 8006ee0:	2306      	movs	r3, #6
 8006ee2:	6063      	str	r3, [r4, #4]
 8006ee4:	9b05      	ldr	r3, [sp, #20]
 8006ee6:	6861      	ldr	r1, [r4, #4]
 8006ee8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006eec:	2300      	movs	r3, #0
 8006eee:	9303      	str	r3, [sp, #12]
 8006ef0:	ab0a      	add	r3, sp, #40	; 0x28
 8006ef2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006ef6:	ab09      	add	r3, sp, #36	; 0x24
 8006ef8:	ec49 8b10 	vmov	d0, r8, r9
 8006efc:	9300      	str	r3, [sp, #0]
 8006efe:	6022      	str	r2, [r4, #0]
 8006f00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fecd 	bl	8006ca4 <__cvt>
 8006f0a:	9b06      	ldr	r3, [sp, #24]
 8006f0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006f0e:	2b47      	cmp	r3, #71	; 0x47
 8006f10:	4680      	mov	r8, r0
 8006f12:	d108      	bne.n	8006f26 <_printf_float+0x142>
 8006f14:	1cc8      	adds	r0, r1, #3
 8006f16:	db02      	blt.n	8006f1e <_printf_float+0x13a>
 8006f18:	6863      	ldr	r3, [r4, #4]
 8006f1a:	4299      	cmp	r1, r3
 8006f1c:	dd41      	ble.n	8006fa2 <_printf_float+0x1be>
 8006f1e:	f1ab 0b02 	sub.w	fp, fp, #2
 8006f22:	fa5f fb8b 	uxtb.w	fp, fp
 8006f26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006f2a:	d820      	bhi.n	8006f6e <_printf_float+0x18a>
 8006f2c:	3901      	subs	r1, #1
 8006f2e:	465a      	mov	r2, fp
 8006f30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006f34:	9109      	str	r1, [sp, #36]	; 0x24
 8006f36:	f7ff ff17 	bl	8006d68 <__exponent>
 8006f3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f3c:	1813      	adds	r3, r2, r0
 8006f3e:	2a01      	cmp	r2, #1
 8006f40:	4681      	mov	r9, r0
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	dc02      	bgt.n	8006f4c <_printf_float+0x168>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	07d2      	lsls	r2, r2, #31
 8006f4a:	d501      	bpl.n	8006f50 <_printf_float+0x16c>
 8006f4c:	3301      	adds	r3, #1
 8006f4e:	6123      	str	r3, [r4, #16]
 8006f50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d09c      	beq.n	8006e92 <_printf_float+0xae>
 8006f58:	232d      	movs	r3, #45	; 0x2d
 8006f5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f5e:	e798      	b.n	8006e92 <_printf_float+0xae>
 8006f60:	9a06      	ldr	r2, [sp, #24]
 8006f62:	2a47      	cmp	r2, #71	; 0x47
 8006f64:	d1be      	bne.n	8006ee4 <_printf_float+0x100>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1bc      	bne.n	8006ee4 <_printf_float+0x100>
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	e7b9      	b.n	8006ee2 <_printf_float+0xfe>
 8006f6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006f72:	d118      	bne.n	8006fa6 <_printf_float+0x1c2>
 8006f74:	2900      	cmp	r1, #0
 8006f76:	6863      	ldr	r3, [r4, #4]
 8006f78:	dd0b      	ble.n	8006f92 <_printf_float+0x1ae>
 8006f7a:	6121      	str	r1, [r4, #16]
 8006f7c:	b913      	cbnz	r3, 8006f84 <_printf_float+0x1a0>
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	07d0      	lsls	r0, r2, #31
 8006f82:	d502      	bpl.n	8006f8a <_printf_float+0x1a6>
 8006f84:	3301      	adds	r3, #1
 8006f86:	440b      	add	r3, r1
 8006f88:	6123      	str	r3, [r4, #16]
 8006f8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	e7de      	b.n	8006f50 <_printf_float+0x16c>
 8006f92:	b913      	cbnz	r3, 8006f9a <_printf_float+0x1b6>
 8006f94:	6822      	ldr	r2, [r4, #0]
 8006f96:	07d2      	lsls	r2, r2, #31
 8006f98:	d501      	bpl.n	8006f9e <_printf_float+0x1ba>
 8006f9a:	3302      	adds	r3, #2
 8006f9c:	e7f4      	b.n	8006f88 <_printf_float+0x1a4>
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	e7f2      	b.n	8006f88 <_printf_float+0x1a4>
 8006fa2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	db05      	blt.n	8006fb8 <_printf_float+0x1d4>
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	6121      	str	r1, [r4, #16]
 8006fb0:	07d8      	lsls	r0, r3, #31
 8006fb2:	d5ea      	bpl.n	8006f8a <_printf_float+0x1a6>
 8006fb4:	1c4b      	adds	r3, r1, #1
 8006fb6:	e7e7      	b.n	8006f88 <_printf_float+0x1a4>
 8006fb8:	2900      	cmp	r1, #0
 8006fba:	bfd4      	ite	le
 8006fbc:	f1c1 0202 	rsble	r2, r1, #2
 8006fc0:	2201      	movgt	r2, #1
 8006fc2:	4413      	add	r3, r2
 8006fc4:	e7e0      	b.n	8006f88 <_printf_float+0x1a4>
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	055a      	lsls	r2, r3, #21
 8006fca:	d407      	bmi.n	8006fdc <_printf_float+0x1f8>
 8006fcc:	6923      	ldr	r3, [r4, #16]
 8006fce:	4642      	mov	r2, r8
 8006fd0:	4631      	mov	r1, r6
 8006fd2:	4628      	mov	r0, r5
 8006fd4:	47b8      	blx	r7
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	d12c      	bne.n	8007034 <_printf_float+0x250>
 8006fda:	e764      	b.n	8006ea6 <_printf_float+0xc2>
 8006fdc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006fe0:	f240 80e0 	bls.w	80071a4 <_printf_float+0x3c0>
 8006fe4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2300      	movs	r3, #0
 8006fec:	f7f9 fd84 	bl	8000af8 <__aeabi_dcmpeq>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d034      	beq.n	800705e <_printf_float+0x27a>
 8006ff4:	4a37      	ldr	r2, [pc, #220]	; (80070d4 <_printf_float+0x2f0>)
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	4631      	mov	r1, r6
 8006ffa:	4628      	mov	r0, r5
 8006ffc:	47b8      	blx	r7
 8006ffe:	3001      	adds	r0, #1
 8007000:	f43f af51 	beq.w	8006ea6 <_printf_float+0xc2>
 8007004:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007008:	429a      	cmp	r2, r3
 800700a:	db02      	blt.n	8007012 <_printf_float+0x22e>
 800700c:	6823      	ldr	r3, [r4, #0]
 800700e:	07d8      	lsls	r0, r3, #31
 8007010:	d510      	bpl.n	8007034 <_printf_float+0x250>
 8007012:	ee18 3a10 	vmov	r3, s16
 8007016:	4652      	mov	r2, sl
 8007018:	4631      	mov	r1, r6
 800701a:	4628      	mov	r0, r5
 800701c:	47b8      	blx	r7
 800701e:	3001      	adds	r0, #1
 8007020:	f43f af41 	beq.w	8006ea6 <_printf_float+0xc2>
 8007024:	f04f 0800 	mov.w	r8, #0
 8007028:	f104 091a 	add.w	r9, r4, #26
 800702c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800702e:	3b01      	subs	r3, #1
 8007030:	4543      	cmp	r3, r8
 8007032:	dc09      	bgt.n	8007048 <_printf_float+0x264>
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	079b      	lsls	r3, r3, #30
 8007038:	f100 8105 	bmi.w	8007246 <_printf_float+0x462>
 800703c:	68e0      	ldr	r0, [r4, #12]
 800703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007040:	4298      	cmp	r0, r3
 8007042:	bfb8      	it	lt
 8007044:	4618      	movlt	r0, r3
 8007046:	e730      	b.n	8006eaa <_printf_float+0xc6>
 8007048:	2301      	movs	r3, #1
 800704a:	464a      	mov	r2, r9
 800704c:	4631      	mov	r1, r6
 800704e:	4628      	mov	r0, r5
 8007050:	47b8      	blx	r7
 8007052:	3001      	adds	r0, #1
 8007054:	f43f af27 	beq.w	8006ea6 <_printf_float+0xc2>
 8007058:	f108 0801 	add.w	r8, r8, #1
 800705c:	e7e6      	b.n	800702c <_printf_float+0x248>
 800705e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007060:	2b00      	cmp	r3, #0
 8007062:	dc39      	bgt.n	80070d8 <_printf_float+0x2f4>
 8007064:	4a1b      	ldr	r2, [pc, #108]	; (80070d4 <_printf_float+0x2f0>)
 8007066:	2301      	movs	r3, #1
 8007068:	4631      	mov	r1, r6
 800706a:	4628      	mov	r0, r5
 800706c:	47b8      	blx	r7
 800706e:	3001      	adds	r0, #1
 8007070:	f43f af19 	beq.w	8006ea6 <_printf_float+0xc2>
 8007074:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007078:	4313      	orrs	r3, r2
 800707a:	d102      	bne.n	8007082 <_printf_float+0x29e>
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	07d9      	lsls	r1, r3, #31
 8007080:	d5d8      	bpl.n	8007034 <_printf_float+0x250>
 8007082:	ee18 3a10 	vmov	r3, s16
 8007086:	4652      	mov	r2, sl
 8007088:	4631      	mov	r1, r6
 800708a:	4628      	mov	r0, r5
 800708c:	47b8      	blx	r7
 800708e:	3001      	adds	r0, #1
 8007090:	f43f af09 	beq.w	8006ea6 <_printf_float+0xc2>
 8007094:	f04f 0900 	mov.w	r9, #0
 8007098:	f104 0a1a 	add.w	sl, r4, #26
 800709c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800709e:	425b      	negs	r3, r3
 80070a0:	454b      	cmp	r3, r9
 80070a2:	dc01      	bgt.n	80070a8 <_printf_float+0x2c4>
 80070a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070a6:	e792      	b.n	8006fce <_printf_float+0x1ea>
 80070a8:	2301      	movs	r3, #1
 80070aa:	4652      	mov	r2, sl
 80070ac:	4631      	mov	r1, r6
 80070ae:	4628      	mov	r0, r5
 80070b0:	47b8      	blx	r7
 80070b2:	3001      	adds	r0, #1
 80070b4:	f43f aef7 	beq.w	8006ea6 <_printf_float+0xc2>
 80070b8:	f109 0901 	add.w	r9, r9, #1
 80070bc:	e7ee      	b.n	800709c <_printf_float+0x2b8>
 80070be:	bf00      	nop
 80070c0:	7fefffff 	.word	0x7fefffff
 80070c4:	0800975c 	.word	0x0800975c
 80070c8:	08009760 	.word	0x08009760
 80070cc:	08009768 	.word	0x08009768
 80070d0:	08009764 	.word	0x08009764
 80070d4:	0800976c 	.word	0x0800976c
 80070d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070dc:	429a      	cmp	r2, r3
 80070de:	bfa8      	it	ge
 80070e0:	461a      	movge	r2, r3
 80070e2:	2a00      	cmp	r2, #0
 80070e4:	4691      	mov	r9, r2
 80070e6:	dc37      	bgt.n	8007158 <_printf_float+0x374>
 80070e8:	f04f 0b00 	mov.w	fp, #0
 80070ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80070f0:	f104 021a 	add.w	r2, r4, #26
 80070f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80070f6:	9305      	str	r3, [sp, #20]
 80070f8:	eba3 0309 	sub.w	r3, r3, r9
 80070fc:	455b      	cmp	r3, fp
 80070fe:	dc33      	bgt.n	8007168 <_printf_float+0x384>
 8007100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007104:	429a      	cmp	r2, r3
 8007106:	db3b      	blt.n	8007180 <_printf_float+0x39c>
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	07da      	lsls	r2, r3, #31
 800710c:	d438      	bmi.n	8007180 <_printf_float+0x39c>
 800710e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007110:	9a05      	ldr	r2, [sp, #20]
 8007112:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007114:	1a9a      	subs	r2, r3, r2
 8007116:	eba3 0901 	sub.w	r9, r3, r1
 800711a:	4591      	cmp	r9, r2
 800711c:	bfa8      	it	ge
 800711e:	4691      	movge	r9, r2
 8007120:	f1b9 0f00 	cmp.w	r9, #0
 8007124:	dc35      	bgt.n	8007192 <_printf_float+0x3ae>
 8007126:	f04f 0800 	mov.w	r8, #0
 800712a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800712e:	f104 0a1a 	add.w	sl, r4, #26
 8007132:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007136:	1a9b      	subs	r3, r3, r2
 8007138:	eba3 0309 	sub.w	r3, r3, r9
 800713c:	4543      	cmp	r3, r8
 800713e:	f77f af79 	ble.w	8007034 <_printf_float+0x250>
 8007142:	2301      	movs	r3, #1
 8007144:	4652      	mov	r2, sl
 8007146:	4631      	mov	r1, r6
 8007148:	4628      	mov	r0, r5
 800714a:	47b8      	blx	r7
 800714c:	3001      	adds	r0, #1
 800714e:	f43f aeaa 	beq.w	8006ea6 <_printf_float+0xc2>
 8007152:	f108 0801 	add.w	r8, r8, #1
 8007156:	e7ec      	b.n	8007132 <_printf_float+0x34e>
 8007158:	4613      	mov	r3, r2
 800715a:	4631      	mov	r1, r6
 800715c:	4642      	mov	r2, r8
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	d1c0      	bne.n	80070e8 <_printf_float+0x304>
 8007166:	e69e      	b.n	8006ea6 <_printf_float+0xc2>
 8007168:	2301      	movs	r3, #1
 800716a:	4631      	mov	r1, r6
 800716c:	4628      	mov	r0, r5
 800716e:	9205      	str	r2, [sp, #20]
 8007170:	47b8      	blx	r7
 8007172:	3001      	adds	r0, #1
 8007174:	f43f ae97 	beq.w	8006ea6 <_printf_float+0xc2>
 8007178:	9a05      	ldr	r2, [sp, #20]
 800717a:	f10b 0b01 	add.w	fp, fp, #1
 800717e:	e7b9      	b.n	80070f4 <_printf_float+0x310>
 8007180:	ee18 3a10 	vmov	r3, s16
 8007184:	4652      	mov	r2, sl
 8007186:	4631      	mov	r1, r6
 8007188:	4628      	mov	r0, r5
 800718a:	47b8      	blx	r7
 800718c:	3001      	adds	r0, #1
 800718e:	d1be      	bne.n	800710e <_printf_float+0x32a>
 8007190:	e689      	b.n	8006ea6 <_printf_float+0xc2>
 8007192:	9a05      	ldr	r2, [sp, #20]
 8007194:	464b      	mov	r3, r9
 8007196:	4442      	add	r2, r8
 8007198:	4631      	mov	r1, r6
 800719a:	4628      	mov	r0, r5
 800719c:	47b8      	blx	r7
 800719e:	3001      	adds	r0, #1
 80071a0:	d1c1      	bne.n	8007126 <_printf_float+0x342>
 80071a2:	e680      	b.n	8006ea6 <_printf_float+0xc2>
 80071a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	dc01      	bgt.n	80071ae <_printf_float+0x3ca>
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d538      	bpl.n	8007220 <_printf_float+0x43c>
 80071ae:	2301      	movs	r3, #1
 80071b0:	4642      	mov	r2, r8
 80071b2:	4631      	mov	r1, r6
 80071b4:	4628      	mov	r0, r5
 80071b6:	47b8      	blx	r7
 80071b8:	3001      	adds	r0, #1
 80071ba:	f43f ae74 	beq.w	8006ea6 <_printf_float+0xc2>
 80071be:	ee18 3a10 	vmov	r3, s16
 80071c2:	4652      	mov	r2, sl
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	f43f ae6b 	beq.w	8006ea6 <_printf_float+0xc2>
 80071d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071d4:	2200      	movs	r2, #0
 80071d6:	2300      	movs	r3, #0
 80071d8:	f7f9 fc8e 	bl	8000af8 <__aeabi_dcmpeq>
 80071dc:	b9d8      	cbnz	r0, 8007216 <_printf_float+0x432>
 80071de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e0:	f108 0201 	add.w	r2, r8, #1
 80071e4:	3b01      	subs	r3, #1
 80071e6:	4631      	mov	r1, r6
 80071e8:	4628      	mov	r0, r5
 80071ea:	47b8      	blx	r7
 80071ec:	3001      	adds	r0, #1
 80071ee:	d10e      	bne.n	800720e <_printf_float+0x42a>
 80071f0:	e659      	b.n	8006ea6 <_printf_float+0xc2>
 80071f2:	2301      	movs	r3, #1
 80071f4:	4652      	mov	r2, sl
 80071f6:	4631      	mov	r1, r6
 80071f8:	4628      	mov	r0, r5
 80071fa:	47b8      	blx	r7
 80071fc:	3001      	adds	r0, #1
 80071fe:	f43f ae52 	beq.w	8006ea6 <_printf_float+0xc2>
 8007202:	f108 0801 	add.w	r8, r8, #1
 8007206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007208:	3b01      	subs	r3, #1
 800720a:	4543      	cmp	r3, r8
 800720c:	dcf1      	bgt.n	80071f2 <_printf_float+0x40e>
 800720e:	464b      	mov	r3, r9
 8007210:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007214:	e6dc      	b.n	8006fd0 <_printf_float+0x1ec>
 8007216:	f04f 0800 	mov.w	r8, #0
 800721a:	f104 0a1a 	add.w	sl, r4, #26
 800721e:	e7f2      	b.n	8007206 <_printf_float+0x422>
 8007220:	2301      	movs	r3, #1
 8007222:	4642      	mov	r2, r8
 8007224:	e7df      	b.n	80071e6 <_printf_float+0x402>
 8007226:	2301      	movs	r3, #1
 8007228:	464a      	mov	r2, r9
 800722a:	4631      	mov	r1, r6
 800722c:	4628      	mov	r0, r5
 800722e:	47b8      	blx	r7
 8007230:	3001      	adds	r0, #1
 8007232:	f43f ae38 	beq.w	8006ea6 <_printf_float+0xc2>
 8007236:	f108 0801 	add.w	r8, r8, #1
 800723a:	68e3      	ldr	r3, [r4, #12]
 800723c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800723e:	1a5b      	subs	r3, r3, r1
 8007240:	4543      	cmp	r3, r8
 8007242:	dcf0      	bgt.n	8007226 <_printf_float+0x442>
 8007244:	e6fa      	b.n	800703c <_printf_float+0x258>
 8007246:	f04f 0800 	mov.w	r8, #0
 800724a:	f104 0919 	add.w	r9, r4, #25
 800724e:	e7f4      	b.n	800723a <_printf_float+0x456>

08007250 <_printf_common>:
 8007250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007254:	4616      	mov	r6, r2
 8007256:	4699      	mov	r9, r3
 8007258:	688a      	ldr	r2, [r1, #8]
 800725a:	690b      	ldr	r3, [r1, #16]
 800725c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007260:	4293      	cmp	r3, r2
 8007262:	bfb8      	it	lt
 8007264:	4613      	movlt	r3, r2
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800726c:	4607      	mov	r7, r0
 800726e:	460c      	mov	r4, r1
 8007270:	b10a      	cbz	r2, 8007276 <_printf_common+0x26>
 8007272:	3301      	adds	r3, #1
 8007274:	6033      	str	r3, [r6, #0]
 8007276:	6823      	ldr	r3, [r4, #0]
 8007278:	0699      	lsls	r1, r3, #26
 800727a:	bf42      	ittt	mi
 800727c:	6833      	ldrmi	r3, [r6, #0]
 800727e:	3302      	addmi	r3, #2
 8007280:	6033      	strmi	r3, [r6, #0]
 8007282:	6825      	ldr	r5, [r4, #0]
 8007284:	f015 0506 	ands.w	r5, r5, #6
 8007288:	d106      	bne.n	8007298 <_printf_common+0x48>
 800728a:	f104 0a19 	add.w	sl, r4, #25
 800728e:	68e3      	ldr	r3, [r4, #12]
 8007290:	6832      	ldr	r2, [r6, #0]
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	42ab      	cmp	r3, r5
 8007296:	dc26      	bgt.n	80072e6 <_printf_common+0x96>
 8007298:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800729c:	1e13      	subs	r3, r2, #0
 800729e:	6822      	ldr	r2, [r4, #0]
 80072a0:	bf18      	it	ne
 80072a2:	2301      	movne	r3, #1
 80072a4:	0692      	lsls	r2, r2, #26
 80072a6:	d42b      	bmi.n	8007300 <_printf_common+0xb0>
 80072a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072ac:	4649      	mov	r1, r9
 80072ae:	4638      	mov	r0, r7
 80072b0:	47c0      	blx	r8
 80072b2:	3001      	adds	r0, #1
 80072b4:	d01e      	beq.n	80072f4 <_printf_common+0xa4>
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	68e5      	ldr	r5, [r4, #12]
 80072ba:	6832      	ldr	r2, [r6, #0]
 80072bc:	f003 0306 	and.w	r3, r3, #6
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	bf08      	it	eq
 80072c4:	1aad      	subeq	r5, r5, r2
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	6922      	ldr	r2, [r4, #16]
 80072ca:	bf0c      	ite	eq
 80072cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072d0:	2500      	movne	r5, #0
 80072d2:	4293      	cmp	r3, r2
 80072d4:	bfc4      	itt	gt
 80072d6:	1a9b      	subgt	r3, r3, r2
 80072d8:	18ed      	addgt	r5, r5, r3
 80072da:	2600      	movs	r6, #0
 80072dc:	341a      	adds	r4, #26
 80072de:	42b5      	cmp	r5, r6
 80072e0:	d11a      	bne.n	8007318 <_printf_common+0xc8>
 80072e2:	2000      	movs	r0, #0
 80072e4:	e008      	b.n	80072f8 <_printf_common+0xa8>
 80072e6:	2301      	movs	r3, #1
 80072e8:	4652      	mov	r2, sl
 80072ea:	4649      	mov	r1, r9
 80072ec:	4638      	mov	r0, r7
 80072ee:	47c0      	blx	r8
 80072f0:	3001      	adds	r0, #1
 80072f2:	d103      	bne.n	80072fc <_printf_common+0xac>
 80072f4:	f04f 30ff 	mov.w	r0, #4294967295
 80072f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072fc:	3501      	adds	r5, #1
 80072fe:	e7c6      	b.n	800728e <_printf_common+0x3e>
 8007300:	18e1      	adds	r1, r4, r3
 8007302:	1c5a      	adds	r2, r3, #1
 8007304:	2030      	movs	r0, #48	; 0x30
 8007306:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800730a:	4422      	add	r2, r4
 800730c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007310:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007314:	3302      	adds	r3, #2
 8007316:	e7c7      	b.n	80072a8 <_printf_common+0x58>
 8007318:	2301      	movs	r3, #1
 800731a:	4622      	mov	r2, r4
 800731c:	4649      	mov	r1, r9
 800731e:	4638      	mov	r0, r7
 8007320:	47c0      	blx	r8
 8007322:	3001      	adds	r0, #1
 8007324:	d0e6      	beq.n	80072f4 <_printf_common+0xa4>
 8007326:	3601      	adds	r6, #1
 8007328:	e7d9      	b.n	80072de <_printf_common+0x8e>
	...

0800732c <_printf_i>:
 800732c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007330:	7e0f      	ldrb	r7, [r1, #24]
 8007332:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007334:	2f78      	cmp	r7, #120	; 0x78
 8007336:	4691      	mov	r9, r2
 8007338:	4680      	mov	r8, r0
 800733a:	460c      	mov	r4, r1
 800733c:	469a      	mov	sl, r3
 800733e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007342:	d807      	bhi.n	8007354 <_printf_i+0x28>
 8007344:	2f62      	cmp	r7, #98	; 0x62
 8007346:	d80a      	bhi.n	800735e <_printf_i+0x32>
 8007348:	2f00      	cmp	r7, #0
 800734a:	f000 80d8 	beq.w	80074fe <_printf_i+0x1d2>
 800734e:	2f58      	cmp	r7, #88	; 0x58
 8007350:	f000 80a3 	beq.w	800749a <_printf_i+0x16e>
 8007354:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007358:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800735c:	e03a      	b.n	80073d4 <_printf_i+0xa8>
 800735e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007362:	2b15      	cmp	r3, #21
 8007364:	d8f6      	bhi.n	8007354 <_printf_i+0x28>
 8007366:	a101      	add	r1, pc, #4	; (adr r1, 800736c <_printf_i+0x40>)
 8007368:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800736c:	080073c5 	.word	0x080073c5
 8007370:	080073d9 	.word	0x080073d9
 8007374:	08007355 	.word	0x08007355
 8007378:	08007355 	.word	0x08007355
 800737c:	08007355 	.word	0x08007355
 8007380:	08007355 	.word	0x08007355
 8007384:	080073d9 	.word	0x080073d9
 8007388:	08007355 	.word	0x08007355
 800738c:	08007355 	.word	0x08007355
 8007390:	08007355 	.word	0x08007355
 8007394:	08007355 	.word	0x08007355
 8007398:	080074e5 	.word	0x080074e5
 800739c:	08007409 	.word	0x08007409
 80073a0:	080074c7 	.word	0x080074c7
 80073a4:	08007355 	.word	0x08007355
 80073a8:	08007355 	.word	0x08007355
 80073ac:	08007507 	.word	0x08007507
 80073b0:	08007355 	.word	0x08007355
 80073b4:	08007409 	.word	0x08007409
 80073b8:	08007355 	.word	0x08007355
 80073bc:	08007355 	.word	0x08007355
 80073c0:	080074cf 	.word	0x080074cf
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	1d1a      	adds	r2, r3, #4
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	602a      	str	r2, [r5, #0]
 80073cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0a3      	b.n	8007520 <_printf_i+0x1f4>
 80073d8:	6820      	ldr	r0, [r4, #0]
 80073da:	6829      	ldr	r1, [r5, #0]
 80073dc:	0606      	lsls	r6, r0, #24
 80073de:	f101 0304 	add.w	r3, r1, #4
 80073e2:	d50a      	bpl.n	80073fa <_printf_i+0xce>
 80073e4:	680e      	ldr	r6, [r1, #0]
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	da03      	bge.n	80073f4 <_printf_i+0xc8>
 80073ec:	232d      	movs	r3, #45	; 0x2d
 80073ee:	4276      	negs	r6, r6
 80073f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f4:	485e      	ldr	r0, [pc, #376]	; (8007570 <_printf_i+0x244>)
 80073f6:	230a      	movs	r3, #10
 80073f8:	e019      	b.n	800742e <_printf_i+0x102>
 80073fa:	680e      	ldr	r6, [r1, #0]
 80073fc:	602b      	str	r3, [r5, #0]
 80073fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007402:	bf18      	it	ne
 8007404:	b236      	sxthne	r6, r6
 8007406:	e7ef      	b.n	80073e8 <_printf_i+0xbc>
 8007408:	682b      	ldr	r3, [r5, #0]
 800740a:	6820      	ldr	r0, [r4, #0]
 800740c:	1d19      	adds	r1, r3, #4
 800740e:	6029      	str	r1, [r5, #0]
 8007410:	0601      	lsls	r1, r0, #24
 8007412:	d501      	bpl.n	8007418 <_printf_i+0xec>
 8007414:	681e      	ldr	r6, [r3, #0]
 8007416:	e002      	b.n	800741e <_printf_i+0xf2>
 8007418:	0646      	lsls	r6, r0, #25
 800741a:	d5fb      	bpl.n	8007414 <_printf_i+0xe8>
 800741c:	881e      	ldrh	r6, [r3, #0]
 800741e:	4854      	ldr	r0, [pc, #336]	; (8007570 <_printf_i+0x244>)
 8007420:	2f6f      	cmp	r7, #111	; 0x6f
 8007422:	bf0c      	ite	eq
 8007424:	2308      	moveq	r3, #8
 8007426:	230a      	movne	r3, #10
 8007428:	2100      	movs	r1, #0
 800742a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800742e:	6865      	ldr	r5, [r4, #4]
 8007430:	60a5      	str	r5, [r4, #8]
 8007432:	2d00      	cmp	r5, #0
 8007434:	bfa2      	ittt	ge
 8007436:	6821      	ldrge	r1, [r4, #0]
 8007438:	f021 0104 	bicge.w	r1, r1, #4
 800743c:	6021      	strge	r1, [r4, #0]
 800743e:	b90e      	cbnz	r6, 8007444 <_printf_i+0x118>
 8007440:	2d00      	cmp	r5, #0
 8007442:	d04d      	beq.n	80074e0 <_printf_i+0x1b4>
 8007444:	4615      	mov	r5, r2
 8007446:	fbb6 f1f3 	udiv	r1, r6, r3
 800744a:	fb03 6711 	mls	r7, r3, r1, r6
 800744e:	5dc7      	ldrb	r7, [r0, r7]
 8007450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007454:	4637      	mov	r7, r6
 8007456:	42bb      	cmp	r3, r7
 8007458:	460e      	mov	r6, r1
 800745a:	d9f4      	bls.n	8007446 <_printf_i+0x11a>
 800745c:	2b08      	cmp	r3, #8
 800745e:	d10b      	bne.n	8007478 <_printf_i+0x14c>
 8007460:	6823      	ldr	r3, [r4, #0]
 8007462:	07de      	lsls	r6, r3, #31
 8007464:	d508      	bpl.n	8007478 <_printf_i+0x14c>
 8007466:	6923      	ldr	r3, [r4, #16]
 8007468:	6861      	ldr	r1, [r4, #4]
 800746a:	4299      	cmp	r1, r3
 800746c:	bfde      	ittt	le
 800746e:	2330      	movle	r3, #48	; 0x30
 8007470:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007474:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007478:	1b52      	subs	r2, r2, r5
 800747a:	6122      	str	r2, [r4, #16]
 800747c:	f8cd a000 	str.w	sl, [sp]
 8007480:	464b      	mov	r3, r9
 8007482:	aa03      	add	r2, sp, #12
 8007484:	4621      	mov	r1, r4
 8007486:	4640      	mov	r0, r8
 8007488:	f7ff fee2 	bl	8007250 <_printf_common>
 800748c:	3001      	adds	r0, #1
 800748e:	d14c      	bne.n	800752a <_printf_i+0x1fe>
 8007490:	f04f 30ff 	mov.w	r0, #4294967295
 8007494:	b004      	add	sp, #16
 8007496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749a:	4835      	ldr	r0, [pc, #212]	; (8007570 <_printf_i+0x244>)
 800749c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80074a0:	6829      	ldr	r1, [r5, #0]
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80074a8:	6029      	str	r1, [r5, #0]
 80074aa:	061d      	lsls	r5, r3, #24
 80074ac:	d514      	bpl.n	80074d8 <_printf_i+0x1ac>
 80074ae:	07df      	lsls	r7, r3, #31
 80074b0:	bf44      	itt	mi
 80074b2:	f043 0320 	orrmi.w	r3, r3, #32
 80074b6:	6023      	strmi	r3, [r4, #0]
 80074b8:	b91e      	cbnz	r6, 80074c2 <_printf_i+0x196>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f023 0320 	bic.w	r3, r3, #32
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	2310      	movs	r3, #16
 80074c4:	e7b0      	b.n	8007428 <_printf_i+0xfc>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	f043 0320 	orr.w	r3, r3, #32
 80074cc:	6023      	str	r3, [r4, #0]
 80074ce:	2378      	movs	r3, #120	; 0x78
 80074d0:	4828      	ldr	r0, [pc, #160]	; (8007574 <_printf_i+0x248>)
 80074d2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074d6:	e7e3      	b.n	80074a0 <_printf_i+0x174>
 80074d8:	0659      	lsls	r1, r3, #25
 80074da:	bf48      	it	mi
 80074dc:	b2b6      	uxthmi	r6, r6
 80074de:	e7e6      	b.n	80074ae <_printf_i+0x182>
 80074e0:	4615      	mov	r5, r2
 80074e2:	e7bb      	b.n	800745c <_printf_i+0x130>
 80074e4:	682b      	ldr	r3, [r5, #0]
 80074e6:	6826      	ldr	r6, [r4, #0]
 80074e8:	6961      	ldr	r1, [r4, #20]
 80074ea:	1d18      	adds	r0, r3, #4
 80074ec:	6028      	str	r0, [r5, #0]
 80074ee:	0635      	lsls	r5, r6, #24
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	d501      	bpl.n	80074f8 <_printf_i+0x1cc>
 80074f4:	6019      	str	r1, [r3, #0]
 80074f6:	e002      	b.n	80074fe <_printf_i+0x1d2>
 80074f8:	0670      	lsls	r0, r6, #25
 80074fa:	d5fb      	bpl.n	80074f4 <_printf_i+0x1c8>
 80074fc:	8019      	strh	r1, [r3, #0]
 80074fe:	2300      	movs	r3, #0
 8007500:	6123      	str	r3, [r4, #16]
 8007502:	4615      	mov	r5, r2
 8007504:	e7ba      	b.n	800747c <_printf_i+0x150>
 8007506:	682b      	ldr	r3, [r5, #0]
 8007508:	1d1a      	adds	r2, r3, #4
 800750a:	602a      	str	r2, [r5, #0]
 800750c:	681d      	ldr	r5, [r3, #0]
 800750e:	6862      	ldr	r2, [r4, #4]
 8007510:	2100      	movs	r1, #0
 8007512:	4628      	mov	r0, r5
 8007514:	f7f8 fe7c 	bl	8000210 <memchr>
 8007518:	b108      	cbz	r0, 800751e <_printf_i+0x1f2>
 800751a:	1b40      	subs	r0, r0, r5
 800751c:	6060      	str	r0, [r4, #4]
 800751e:	6863      	ldr	r3, [r4, #4]
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	2300      	movs	r3, #0
 8007524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007528:	e7a8      	b.n	800747c <_printf_i+0x150>
 800752a:	6923      	ldr	r3, [r4, #16]
 800752c:	462a      	mov	r2, r5
 800752e:	4649      	mov	r1, r9
 8007530:	4640      	mov	r0, r8
 8007532:	47d0      	blx	sl
 8007534:	3001      	adds	r0, #1
 8007536:	d0ab      	beq.n	8007490 <_printf_i+0x164>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	079b      	lsls	r3, r3, #30
 800753c:	d413      	bmi.n	8007566 <_printf_i+0x23a>
 800753e:	68e0      	ldr	r0, [r4, #12]
 8007540:	9b03      	ldr	r3, [sp, #12]
 8007542:	4298      	cmp	r0, r3
 8007544:	bfb8      	it	lt
 8007546:	4618      	movlt	r0, r3
 8007548:	e7a4      	b.n	8007494 <_printf_i+0x168>
 800754a:	2301      	movs	r3, #1
 800754c:	4632      	mov	r2, r6
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d09b      	beq.n	8007490 <_printf_i+0x164>
 8007558:	3501      	adds	r5, #1
 800755a:	68e3      	ldr	r3, [r4, #12]
 800755c:	9903      	ldr	r1, [sp, #12]
 800755e:	1a5b      	subs	r3, r3, r1
 8007560:	42ab      	cmp	r3, r5
 8007562:	dcf2      	bgt.n	800754a <_printf_i+0x21e>
 8007564:	e7eb      	b.n	800753e <_printf_i+0x212>
 8007566:	2500      	movs	r5, #0
 8007568:	f104 0619 	add.w	r6, r4, #25
 800756c:	e7f5      	b.n	800755a <_printf_i+0x22e>
 800756e:	bf00      	nop
 8007570:	0800976e 	.word	0x0800976e
 8007574:	0800977f 	.word	0x0800977f

08007578 <quorem>:
 8007578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	6903      	ldr	r3, [r0, #16]
 800757e:	690c      	ldr	r4, [r1, #16]
 8007580:	42a3      	cmp	r3, r4
 8007582:	4607      	mov	r7, r0
 8007584:	f2c0 8081 	blt.w	800768a <quorem+0x112>
 8007588:	3c01      	subs	r4, #1
 800758a:	f101 0814 	add.w	r8, r1, #20
 800758e:	f100 0514 	add.w	r5, r0, #20
 8007592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007596:	9301      	str	r3, [sp, #4]
 8007598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800759c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a0:	3301      	adds	r3, #1
 80075a2:	429a      	cmp	r2, r3
 80075a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80075a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80075b0:	d331      	bcc.n	8007616 <quorem+0x9e>
 80075b2:	f04f 0e00 	mov.w	lr, #0
 80075b6:	4640      	mov	r0, r8
 80075b8:	46ac      	mov	ip, r5
 80075ba:	46f2      	mov	sl, lr
 80075bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80075c0:	b293      	uxth	r3, r2
 80075c2:	fb06 e303 	mla	r3, r6, r3, lr
 80075c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	ebaa 0303 	sub.w	r3, sl, r3
 80075d0:	f8dc a000 	ldr.w	sl, [ip]
 80075d4:	0c12      	lsrs	r2, r2, #16
 80075d6:	fa13 f38a 	uxtah	r3, r3, sl
 80075da:	fb06 e202 	mla	r2, r6, r2, lr
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	9b00      	ldr	r3, [sp, #0]
 80075e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80075e6:	b292      	uxth	r2, r2
 80075e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80075ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80075f4:	4581      	cmp	r9, r0
 80075f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075fa:	f84c 3b04 	str.w	r3, [ip], #4
 80075fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007602:	d2db      	bcs.n	80075bc <quorem+0x44>
 8007604:	f855 300b 	ldr.w	r3, [r5, fp]
 8007608:	b92b      	cbnz	r3, 8007616 <quorem+0x9e>
 800760a:	9b01      	ldr	r3, [sp, #4]
 800760c:	3b04      	subs	r3, #4
 800760e:	429d      	cmp	r5, r3
 8007610:	461a      	mov	r2, r3
 8007612:	d32e      	bcc.n	8007672 <quorem+0xfa>
 8007614:	613c      	str	r4, [r7, #16]
 8007616:	4638      	mov	r0, r7
 8007618:	f001 f9be 	bl	8008998 <__mcmp>
 800761c:	2800      	cmp	r0, #0
 800761e:	db24      	blt.n	800766a <quorem+0xf2>
 8007620:	3601      	adds	r6, #1
 8007622:	4628      	mov	r0, r5
 8007624:	f04f 0c00 	mov.w	ip, #0
 8007628:	f858 2b04 	ldr.w	r2, [r8], #4
 800762c:	f8d0 e000 	ldr.w	lr, [r0]
 8007630:	b293      	uxth	r3, r2
 8007632:	ebac 0303 	sub.w	r3, ip, r3
 8007636:	0c12      	lsrs	r2, r2, #16
 8007638:	fa13 f38e 	uxtah	r3, r3, lr
 800763c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007640:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007644:	b29b      	uxth	r3, r3
 8007646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800764a:	45c1      	cmp	r9, r8
 800764c:	f840 3b04 	str.w	r3, [r0], #4
 8007650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007654:	d2e8      	bcs.n	8007628 <quorem+0xb0>
 8007656:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800765a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800765e:	b922      	cbnz	r2, 800766a <quorem+0xf2>
 8007660:	3b04      	subs	r3, #4
 8007662:	429d      	cmp	r5, r3
 8007664:	461a      	mov	r2, r3
 8007666:	d30a      	bcc.n	800767e <quorem+0x106>
 8007668:	613c      	str	r4, [r7, #16]
 800766a:	4630      	mov	r0, r6
 800766c:	b003      	add	sp, #12
 800766e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007672:	6812      	ldr	r2, [r2, #0]
 8007674:	3b04      	subs	r3, #4
 8007676:	2a00      	cmp	r2, #0
 8007678:	d1cc      	bne.n	8007614 <quorem+0x9c>
 800767a:	3c01      	subs	r4, #1
 800767c:	e7c7      	b.n	800760e <quorem+0x96>
 800767e:	6812      	ldr	r2, [r2, #0]
 8007680:	3b04      	subs	r3, #4
 8007682:	2a00      	cmp	r2, #0
 8007684:	d1f0      	bne.n	8007668 <quorem+0xf0>
 8007686:	3c01      	subs	r4, #1
 8007688:	e7eb      	b.n	8007662 <quorem+0xea>
 800768a:	2000      	movs	r0, #0
 800768c:	e7ee      	b.n	800766c <quorem+0xf4>
	...

08007690 <_dtoa_r>:
 8007690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007694:	ed2d 8b04 	vpush	{d8-d9}
 8007698:	ec57 6b10 	vmov	r6, r7, d0
 800769c:	b093      	sub	sp, #76	; 0x4c
 800769e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80076a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80076a4:	9106      	str	r1, [sp, #24]
 80076a6:	ee10 aa10 	vmov	sl, s0
 80076aa:	4604      	mov	r4, r0
 80076ac:	9209      	str	r2, [sp, #36]	; 0x24
 80076ae:	930c      	str	r3, [sp, #48]	; 0x30
 80076b0:	46bb      	mov	fp, r7
 80076b2:	b975      	cbnz	r5, 80076d2 <_dtoa_r+0x42>
 80076b4:	2010      	movs	r0, #16
 80076b6:	f000 fed7 	bl	8008468 <malloc>
 80076ba:	4602      	mov	r2, r0
 80076bc:	6260      	str	r0, [r4, #36]	; 0x24
 80076be:	b920      	cbnz	r0, 80076ca <_dtoa_r+0x3a>
 80076c0:	4ba7      	ldr	r3, [pc, #668]	; (8007960 <_dtoa_r+0x2d0>)
 80076c2:	21ea      	movs	r1, #234	; 0xea
 80076c4:	48a7      	ldr	r0, [pc, #668]	; (8007964 <_dtoa_r+0x2d4>)
 80076c6:	f001 fddf 	bl	8009288 <__assert_func>
 80076ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80076ce:	6005      	str	r5, [r0, #0]
 80076d0:	60c5      	str	r5, [r0, #12]
 80076d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076d4:	6819      	ldr	r1, [r3, #0]
 80076d6:	b151      	cbz	r1, 80076ee <_dtoa_r+0x5e>
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	604a      	str	r2, [r1, #4]
 80076dc:	2301      	movs	r3, #1
 80076de:	4093      	lsls	r3, r2
 80076e0:	608b      	str	r3, [r1, #8]
 80076e2:	4620      	mov	r0, r4
 80076e4:	f000 ff16 	bl	8008514 <_Bfree>
 80076e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	1e3b      	subs	r3, r7, #0
 80076f0:	bfaa      	itet	ge
 80076f2:	2300      	movge	r3, #0
 80076f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80076f8:	f8c8 3000 	strge.w	r3, [r8]
 80076fc:	4b9a      	ldr	r3, [pc, #616]	; (8007968 <_dtoa_r+0x2d8>)
 80076fe:	bfbc      	itt	lt
 8007700:	2201      	movlt	r2, #1
 8007702:	f8c8 2000 	strlt.w	r2, [r8]
 8007706:	ea33 030b 	bics.w	r3, r3, fp
 800770a:	d11b      	bne.n	8007744 <_dtoa_r+0xb4>
 800770c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800770e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007712:	6013      	str	r3, [r2, #0]
 8007714:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007718:	4333      	orrs	r3, r6
 800771a:	f000 8592 	beq.w	8008242 <_dtoa_r+0xbb2>
 800771e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007720:	b963      	cbnz	r3, 800773c <_dtoa_r+0xac>
 8007722:	4b92      	ldr	r3, [pc, #584]	; (800796c <_dtoa_r+0x2dc>)
 8007724:	e022      	b.n	800776c <_dtoa_r+0xdc>
 8007726:	4b92      	ldr	r3, [pc, #584]	; (8007970 <_dtoa_r+0x2e0>)
 8007728:	9301      	str	r3, [sp, #4]
 800772a:	3308      	adds	r3, #8
 800772c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	9801      	ldr	r0, [sp, #4]
 8007732:	b013      	add	sp, #76	; 0x4c
 8007734:	ecbd 8b04 	vpop	{d8-d9}
 8007738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800773c:	4b8b      	ldr	r3, [pc, #556]	; (800796c <_dtoa_r+0x2dc>)
 800773e:	9301      	str	r3, [sp, #4]
 8007740:	3303      	adds	r3, #3
 8007742:	e7f3      	b.n	800772c <_dtoa_r+0x9c>
 8007744:	2200      	movs	r2, #0
 8007746:	2300      	movs	r3, #0
 8007748:	4650      	mov	r0, sl
 800774a:	4659      	mov	r1, fp
 800774c:	f7f9 f9d4 	bl	8000af8 <__aeabi_dcmpeq>
 8007750:	ec4b ab19 	vmov	d9, sl, fp
 8007754:	4680      	mov	r8, r0
 8007756:	b158      	cbz	r0, 8007770 <_dtoa_r+0xe0>
 8007758:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800775a:	2301      	movs	r3, #1
 800775c:	6013      	str	r3, [r2, #0]
 800775e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007760:	2b00      	cmp	r3, #0
 8007762:	f000 856b 	beq.w	800823c <_dtoa_r+0xbac>
 8007766:	4883      	ldr	r0, [pc, #524]	; (8007974 <_dtoa_r+0x2e4>)
 8007768:	6018      	str	r0, [r3, #0]
 800776a:	1e43      	subs	r3, r0, #1
 800776c:	9301      	str	r3, [sp, #4]
 800776e:	e7df      	b.n	8007730 <_dtoa_r+0xa0>
 8007770:	ec4b ab10 	vmov	d0, sl, fp
 8007774:	aa10      	add	r2, sp, #64	; 0x40
 8007776:	a911      	add	r1, sp, #68	; 0x44
 8007778:	4620      	mov	r0, r4
 800777a:	f001 f9b3 	bl	8008ae4 <__d2b>
 800777e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007782:	ee08 0a10 	vmov	s16, r0
 8007786:	2d00      	cmp	r5, #0
 8007788:	f000 8084 	beq.w	8007894 <_dtoa_r+0x204>
 800778c:	ee19 3a90 	vmov	r3, s19
 8007790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007794:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007798:	4656      	mov	r6, sl
 800779a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800779e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80077a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80077a6:	4b74      	ldr	r3, [pc, #464]	; (8007978 <_dtoa_r+0x2e8>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	4630      	mov	r0, r6
 80077ac:	4639      	mov	r1, r7
 80077ae:	f7f8 fd83 	bl	80002b8 <__aeabi_dsub>
 80077b2:	a365      	add	r3, pc, #404	; (adr r3, 8007948 <_dtoa_r+0x2b8>)
 80077b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b8:	f7f8 ff36 	bl	8000628 <__aeabi_dmul>
 80077bc:	a364      	add	r3, pc, #400	; (adr r3, 8007950 <_dtoa_r+0x2c0>)
 80077be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c2:	f7f8 fd7b 	bl	80002bc <__adddf3>
 80077c6:	4606      	mov	r6, r0
 80077c8:	4628      	mov	r0, r5
 80077ca:	460f      	mov	r7, r1
 80077cc:	f7f8 fec2 	bl	8000554 <__aeabi_i2d>
 80077d0:	a361      	add	r3, pc, #388	; (adr r3, 8007958 <_dtoa_r+0x2c8>)
 80077d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077d6:	f7f8 ff27 	bl	8000628 <__aeabi_dmul>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4630      	mov	r0, r6
 80077e0:	4639      	mov	r1, r7
 80077e2:	f7f8 fd6b 	bl	80002bc <__adddf3>
 80077e6:	4606      	mov	r6, r0
 80077e8:	460f      	mov	r7, r1
 80077ea:	f7f9 f9cd 	bl	8000b88 <__aeabi_d2iz>
 80077ee:	2200      	movs	r2, #0
 80077f0:	9000      	str	r0, [sp, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	4630      	mov	r0, r6
 80077f6:	4639      	mov	r1, r7
 80077f8:	f7f9 f988 	bl	8000b0c <__aeabi_dcmplt>
 80077fc:	b150      	cbz	r0, 8007814 <_dtoa_r+0x184>
 80077fe:	9800      	ldr	r0, [sp, #0]
 8007800:	f7f8 fea8 	bl	8000554 <__aeabi_i2d>
 8007804:	4632      	mov	r2, r6
 8007806:	463b      	mov	r3, r7
 8007808:	f7f9 f976 	bl	8000af8 <__aeabi_dcmpeq>
 800780c:	b910      	cbnz	r0, 8007814 <_dtoa_r+0x184>
 800780e:	9b00      	ldr	r3, [sp, #0]
 8007810:	3b01      	subs	r3, #1
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	2b16      	cmp	r3, #22
 8007818:	d85a      	bhi.n	80078d0 <_dtoa_r+0x240>
 800781a:	9a00      	ldr	r2, [sp, #0]
 800781c:	4b57      	ldr	r3, [pc, #348]	; (800797c <_dtoa_r+0x2ec>)
 800781e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007826:	ec51 0b19 	vmov	r0, r1, d9
 800782a:	f7f9 f96f 	bl	8000b0c <__aeabi_dcmplt>
 800782e:	2800      	cmp	r0, #0
 8007830:	d050      	beq.n	80078d4 <_dtoa_r+0x244>
 8007832:	9b00      	ldr	r3, [sp, #0]
 8007834:	3b01      	subs	r3, #1
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	2300      	movs	r3, #0
 800783a:	930b      	str	r3, [sp, #44]	; 0x2c
 800783c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800783e:	1b5d      	subs	r5, r3, r5
 8007840:	1e6b      	subs	r3, r5, #1
 8007842:	9305      	str	r3, [sp, #20]
 8007844:	bf45      	ittet	mi
 8007846:	f1c5 0301 	rsbmi	r3, r5, #1
 800784a:	9304      	strmi	r3, [sp, #16]
 800784c:	2300      	movpl	r3, #0
 800784e:	2300      	movmi	r3, #0
 8007850:	bf4c      	ite	mi
 8007852:	9305      	strmi	r3, [sp, #20]
 8007854:	9304      	strpl	r3, [sp, #16]
 8007856:	9b00      	ldr	r3, [sp, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	db3d      	blt.n	80078d8 <_dtoa_r+0x248>
 800785c:	9b05      	ldr	r3, [sp, #20]
 800785e:	9a00      	ldr	r2, [sp, #0]
 8007860:	920a      	str	r2, [sp, #40]	; 0x28
 8007862:	4413      	add	r3, r2
 8007864:	9305      	str	r3, [sp, #20]
 8007866:	2300      	movs	r3, #0
 8007868:	9307      	str	r3, [sp, #28]
 800786a:	9b06      	ldr	r3, [sp, #24]
 800786c:	2b09      	cmp	r3, #9
 800786e:	f200 8089 	bhi.w	8007984 <_dtoa_r+0x2f4>
 8007872:	2b05      	cmp	r3, #5
 8007874:	bfc4      	itt	gt
 8007876:	3b04      	subgt	r3, #4
 8007878:	9306      	strgt	r3, [sp, #24]
 800787a:	9b06      	ldr	r3, [sp, #24]
 800787c:	f1a3 0302 	sub.w	r3, r3, #2
 8007880:	bfcc      	ite	gt
 8007882:	2500      	movgt	r5, #0
 8007884:	2501      	movle	r5, #1
 8007886:	2b03      	cmp	r3, #3
 8007888:	f200 8087 	bhi.w	800799a <_dtoa_r+0x30a>
 800788c:	e8df f003 	tbb	[pc, r3]
 8007890:	59383a2d 	.word	0x59383a2d
 8007894:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007898:	441d      	add	r5, r3
 800789a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800789e:	2b20      	cmp	r3, #32
 80078a0:	bfc1      	itttt	gt
 80078a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80078a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80078aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80078ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80078b2:	bfda      	itte	le
 80078b4:	f1c3 0320 	rsble	r3, r3, #32
 80078b8:	fa06 f003 	lslle.w	r0, r6, r3
 80078bc:	4318      	orrgt	r0, r3
 80078be:	f7f8 fe39 	bl	8000534 <__aeabi_ui2d>
 80078c2:	2301      	movs	r3, #1
 80078c4:	4606      	mov	r6, r0
 80078c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80078ca:	3d01      	subs	r5, #1
 80078cc:	930e      	str	r3, [sp, #56]	; 0x38
 80078ce:	e76a      	b.n	80077a6 <_dtoa_r+0x116>
 80078d0:	2301      	movs	r3, #1
 80078d2:	e7b2      	b.n	800783a <_dtoa_r+0x1aa>
 80078d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80078d6:	e7b1      	b.n	800783c <_dtoa_r+0x1ac>
 80078d8:	9b04      	ldr	r3, [sp, #16]
 80078da:	9a00      	ldr	r2, [sp, #0]
 80078dc:	1a9b      	subs	r3, r3, r2
 80078de:	9304      	str	r3, [sp, #16]
 80078e0:	4253      	negs	r3, r2
 80078e2:	9307      	str	r3, [sp, #28]
 80078e4:	2300      	movs	r3, #0
 80078e6:	930a      	str	r3, [sp, #40]	; 0x28
 80078e8:	e7bf      	b.n	800786a <_dtoa_r+0x1da>
 80078ea:	2300      	movs	r3, #0
 80078ec:	9308      	str	r3, [sp, #32]
 80078ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	dc55      	bgt.n	80079a0 <_dtoa_r+0x310>
 80078f4:	2301      	movs	r3, #1
 80078f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80078fa:	461a      	mov	r2, r3
 80078fc:	9209      	str	r2, [sp, #36]	; 0x24
 80078fe:	e00c      	b.n	800791a <_dtoa_r+0x28a>
 8007900:	2301      	movs	r3, #1
 8007902:	e7f3      	b.n	80078ec <_dtoa_r+0x25c>
 8007904:	2300      	movs	r3, #0
 8007906:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007908:	9308      	str	r3, [sp, #32]
 800790a:	9b00      	ldr	r3, [sp, #0]
 800790c:	4413      	add	r3, r2
 800790e:	9302      	str	r3, [sp, #8]
 8007910:	3301      	adds	r3, #1
 8007912:	2b01      	cmp	r3, #1
 8007914:	9303      	str	r3, [sp, #12]
 8007916:	bfb8      	it	lt
 8007918:	2301      	movlt	r3, #1
 800791a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800791c:	2200      	movs	r2, #0
 800791e:	6042      	str	r2, [r0, #4]
 8007920:	2204      	movs	r2, #4
 8007922:	f102 0614 	add.w	r6, r2, #20
 8007926:	429e      	cmp	r6, r3
 8007928:	6841      	ldr	r1, [r0, #4]
 800792a:	d93d      	bls.n	80079a8 <_dtoa_r+0x318>
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fdb1 	bl	8008494 <_Balloc>
 8007932:	9001      	str	r0, [sp, #4]
 8007934:	2800      	cmp	r0, #0
 8007936:	d13b      	bne.n	80079b0 <_dtoa_r+0x320>
 8007938:	4b11      	ldr	r3, [pc, #68]	; (8007980 <_dtoa_r+0x2f0>)
 800793a:	4602      	mov	r2, r0
 800793c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007940:	e6c0      	b.n	80076c4 <_dtoa_r+0x34>
 8007942:	2301      	movs	r3, #1
 8007944:	e7df      	b.n	8007906 <_dtoa_r+0x276>
 8007946:	bf00      	nop
 8007948:	636f4361 	.word	0x636f4361
 800794c:	3fd287a7 	.word	0x3fd287a7
 8007950:	8b60c8b3 	.word	0x8b60c8b3
 8007954:	3fc68a28 	.word	0x3fc68a28
 8007958:	509f79fb 	.word	0x509f79fb
 800795c:	3fd34413 	.word	0x3fd34413
 8007960:	0800979d 	.word	0x0800979d
 8007964:	080097b4 	.word	0x080097b4
 8007968:	7ff00000 	.word	0x7ff00000
 800796c:	08009799 	.word	0x08009799
 8007970:	08009790 	.word	0x08009790
 8007974:	0800976d 	.word	0x0800976d
 8007978:	3ff80000 	.word	0x3ff80000
 800797c:	08009908 	.word	0x08009908
 8007980:	0800980f 	.word	0x0800980f
 8007984:	2501      	movs	r5, #1
 8007986:	2300      	movs	r3, #0
 8007988:	9306      	str	r3, [sp, #24]
 800798a:	9508      	str	r5, [sp, #32]
 800798c:	f04f 33ff 	mov.w	r3, #4294967295
 8007990:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007994:	2200      	movs	r2, #0
 8007996:	2312      	movs	r3, #18
 8007998:	e7b0      	b.n	80078fc <_dtoa_r+0x26c>
 800799a:	2301      	movs	r3, #1
 800799c:	9308      	str	r3, [sp, #32]
 800799e:	e7f5      	b.n	800798c <_dtoa_r+0x2fc>
 80079a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079a2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80079a6:	e7b8      	b.n	800791a <_dtoa_r+0x28a>
 80079a8:	3101      	adds	r1, #1
 80079aa:	6041      	str	r1, [r0, #4]
 80079ac:	0052      	lsls	r2, r2, #1
 80079ae:	e7b8      	b.n	8007922 <_dtoa_r+0x292>
 80079b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079b2:	9a01      	ldr	r2, [sp, #4]
 80079b4:	601a      	str	r2, [r3, #0]
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	2b0e      	cmp	r3, #14
 80079ba:	f200 809d 	bhi.w	8007af8 <_dtoa_r+0x468>
 80079be:	2d00      	cmp	r5, #0
 80079c0:	f000 809a 	beq.w	8007af8 <_dtoa_r+0x468>
 80079c4:	9b00      	ldr	r3, [sp, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	dd32      	ble.n	8007a30 <_dtoa_r+0x3a0>
 80079ca:	4ab7      	ldr	r2, [pc, #732]	; (8007ca8 <_dtoa_r+0x618>)
 80079cc:	f003 030f 	and.w	r3, r3, #15
 80079d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80079d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80079d8:	9b00      	ldr	r3, [sp, #0]
 80079da:	05d8      	lsls	r0, r3, #23
 80079dc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80079e0:	d516      	bpl.n	8007a10 <_dtoa_r+0x380>
 80079e2:	4bb2      	ldr	r3, [pc, #712]	; (8007cac <_dtoa_r+0x61c>)
 80079e4:	ec51 0b19 	vmov	r0, r1, d9
 80079e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80079ec:	f7f8 ff46 	bl	800087c <__aeabi_ddiv>
 80079f0:	f007 070f 	and.w	r7, r7, #15
 80079f4:	4682      	mov	sl, r0
 80079f6:	468b      	mov	fp, r1
 80079f8:	2503      	movs	r5, #3
 80079fa:	4eac      	ldr	r6, [pc, #688]	; (8007cac <_dtoa_r+0x61c>)
 80079fc:	b957      	cbnz	r7, 8007a14 <_dtoa_r+0x384>
 80079fe:	4642      	mov	r2, r8
 8007a00:	464b      	mov	r3, r9
 8007a02:	4650      	mov	r0, sl
 8007a04:	4659      	mov	r1, fp
 8007a06:	f7f8 ff39 	bl	800087c <__aeabi_ddiv>
 8007a0a:	4682      	mov	sl, r0
 8007a0c:	468b      	mov	fp, r1
 8007a0e:	e028      	b.n	8007a62 <_dtoa_r+0x3d2>
 8007a10:	2502      	movs	r5, #2
 8007a12:	e7f2      	b.n	80079fa <_dtoa_r+0x36a>
 8007a14:	07f9      	lsls	r1, r7, #31
 8007a16:	d508      	bpl.n	8007a2a <_dtoa_r+0x39a>
 8007a18:	4640      	mov	r0, r8
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a20:	f7f8 fe02 	bl	8000628 <__aeabi_dmul>
 8007a24:	3501      	adds	r5, #1
 8007a26:	4680      	mov	r8, r0
 8007a28:	4689      	mov	r9, r1
 8007a2a:	107f      	asrs	r7, r7, #1
 8007a2c:	3608      	adds	r6, #8
 8007a2e:	e7e5      	b.n	80079fc <_dtoa_r+0x36c>
 8007a30:	f000 809b 	beq.w	8007b6a <_dtoa_r+0x4da>
 8007a34:	9b00      	ldr	r3, [sp, #0]
 8007a36:	4f9d      	ldr	r7, [pc, #628]	; (8007cac <_dtoa_r+0x61c>)
 8007a38:	425e      	negs	r6, r3
 8007a3a:	4b9b      	ldr	r3, [pc, #620]	; (8007ca8 <_dtoa_r+0x618>)
 8007a3c:	f006 020f 	and.w	r2, r6, #15
 8007a40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	ec51 0b19 	vmov	r0, r1, d9
 8007a4c:	f7f8 fdec 	bl	8000628 <__aeabi_dmul>
 8007a50:	1136      	asrs	r6, r6, #4
 8007a52:	4682      	mov	sl, r0
 8007a54:	468b      	mov	fp, r1
 8007a56:	2300      	movs	r3, #0
 8007a58:	2502      	movs	r5, #2
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	d17a      	bne.n	8007b54 <_dtoa_r+0x4c4>
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1d3      	bne.n	8007a0a <_dtoa_r+0x37a>
 8007a62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 8082 	beq.w	8007b6e <_dtoa_r+0x4de>
 8007a6a:	4b91      	ldr	r3, [pc, #580]	; (8007cb0 <_dtoa_r+0x620>)
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	4650      	mov	r0, sl
 8007a70:	4659      	mov	r1, fp
 8007a72:	f7f9 f84b 	bl	8000b0c <__aeabi_dcmplt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d079      	beq.n	8007b6e <_dtoa_r+0x4de>
 8007a7a:	9b03      	ldr	r3, [sp, #12]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d076      	beq.n	8007b6e <_dtoa_r+0x4de>
 8007a80:	9b02      	ldr	r3, [sp, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	dd36      	ble.n	8007af4 <_dtoa_r+0x464>
 8007a86:	9b00      	ldr	r3, [sp, #0]
 8007a88:	4650      	mov	r0, sl
 8007a8a:	4659      	mov	r1, fp
 8007a8c:	1e5f      	subs	r7, r3, #1
 8007a8e:	2200      	movs	r2, #0
 8007a90:	4b88      	ldr	r3, [pc, #544]	; (8007cb4 <_dtoa_r+0x624>)
 8007a92:	f7f8 fdc9 	bl	8000628 <__aeabi_dmul>
 8007a96:	9e02      	ldr	r6, [sp, #8]
 8007a98:	4682      	mov	sl, r0
 8007a9a:	468b      	mov	fp, r1
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f7f8 fd58 	bl	8000554 <__aeabi_i2d>
 8007aa4:	4652      	mov	r2, sl
 8007aa6:	465b      	mov	r3, fp
 8007aa8:	f7f8 fdbe 	bl	8000628 <__aeabi_dmul>
 8007aac:	4b82      	ldr	r3, [pc, #520]	; (8007cb8 <_dtoa_r+0x628>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f7f8 fc04 	bl	80002bc <__adddf3>
 8007ab4:	46d0      	mov	r8, sl
 8007ab6:	46d9      	mov	r9, fp
 8007ab8:	4682      	mov	sl, r0
 8007aba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	d158      	bne.n	8007b74 <_dtoa_r+0x4e4>
 8007ac2:	4b7e      	ldr	r3, [pc, #504]	; (8007cbc <_dtoa_r+0x62c>)
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	4649      	mov	r1, r9
 8007aca:	f7f8 fbf5 	bl	80002b8 <__aeabi_dsub>
 8007ace:	4652      	mov	r2, sl
 8007ad0:	465b      	mov	r3, fp
 8007ad2:	4680      	mov	r8, r0
 8007ad4:	4689      	mov	r9, r1
 8007ad6:	f7f9 f837 	bl	8000b48 <__aeabi_dcmpgt>
 8007ada:	2800      	cmp	r0, #0
 8007adc:	f040 8295 	bne.w	800800a <_dtoa_r+0x97a>
 8007ae0:	4652      	mov	r2, sl
 8007ae2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4649      	mov	r1, r9
 8007aea:	f7f9 f80f 	bl	8000b0c <__aeabi_dcmplt>
 8007aee:	2800      	cmp	r0, #0
 8007af0:	f040 8289 	bne.w	8008006 <_dtoa_r+0x976>
 8007af4:	ec5b ab19 	vmov	sl, fp, d9
 8007af8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f2c0 8148 	blt.w	8007d90 <_dtoa_r+0x700>
 8007b00:	9a00      	ldr	r2, [sp, #0]
 8007b02:	2a0e      	cmp	r2, #14
 8007b04:	f300 8144 	bgt.w	8007d90 <_dtoa_r+0x700>
 8007b08:	4b67      	ldr	r3, [pc, #412]	; (8007ca8 <_dtoa_r+0x618>)
 8007b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007b0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f280 80d5 	bge.w	8007cc4 <_dtoa_r+0x634>
 8007b1a:	9b03      	ldr	r3, [sp, #12]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f300 80d1 	bgt.w	8007cc4 <_dtoa_r+0x634>
 8007b22:	f040 826f 	bne.w	8008004 <_dtoa_r+0x974>
 8007b26:	4b65      	ldr	r3, [pc, #404]	; (8007cbc <_dtoa_r+0x62c>)
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	f7f8 fd7b 	bl	8000628 <__aeabi_dmul>
 8007b32:	4652      	mov	r2, sl
 8007b34:	465b      	mov	r3, fp
 8007b36:	f7f8 fffd 	bl	8000b34 <__aeabi_dcmpge>
 8007b3a:	9e03      	ldr	r6, [sp, #12]
 8007b3c:	4637      	mov	r7, r6
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	f040 8245 	bne.w	8007fce <_dtoa_r+0x93e>
 8007b44:	9d01      	ldr	r5, [sp, #4]
 8007b46:	2331      	movs	r3, #49	; 0x31
 8007b48:	f805 3b01 	strb.w	r3, [r5], #1
 8007b4c:	9b00      	ldr	r3, [sp, #0]
 8007b4e:	3301      	adds	r3, #1
 8007b50:	9300      	str	r3, [sp, #0]
 8007b52:	e240      	b.n	8007fd6 <_dtoa_r+0x946>
 8007b54:	07f2      	lsls	r2, r6, #31
 8007b56:	d505      	bpl.n	8007b64 <_dtoa_r+0x4d4>
 8007b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b5c:	f7f8 fd64 	bl	8000628 <__aeabi_dmul>
 8007b60:	3501      	adds	r5, #1
 8007b62:	2301      	movs	r3, #1
 8007b64:	1076      	asrs	r6, r6, #1
 8007b66:	3708      	adds	r7, #8
 8007b68:	e777      	b.n	8007a5a <_dtoa_r+0x3ca>
 8007b6a:	2502      	movs	r5, #2
 8007b6c:	e779      	b.n	8007a62 <_dtoa_r+0x3d2>
 8007b6e:	9f00      	ldr	r7, [sp, #0]
 8007b70:	9e03      	ldr	r6, [sp, #12]
 8007b72:	e794      	b.n	8007a9e <_dtoa_r+0x40e>
 8007b74:	9901      	ldr	r1, [sp, #4]
 8007b76:	4b4c      	ldr	r3, [pc, #304]	; (8007ca8 <_dtoa_r+0x618>)
 8007b78:	4431      	add	r1, r6
 8007b7a:	910d      	str	r1, [sp, #52]	; 0x34
 8007b7c:	9908      	ldr	r1, [sp, #32]
 8007b7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007b82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b86:	2900      	cmp	r1, #0
 8007b88:	d043      	beq.n	8007c12 <_dtoa_r+0x582>
 8007b8a:	494d      	ldr	r1, [pc, #308]	; (8007cc0 <_dtoa_r+0x630>)
 8007b8c:	2000      	movs	r0, #0
 8007b8e:	f7f8 fe75 	bl	800087c <__aeabi_ddiv>
 8007b92:	4652      	mov	r2, sl
 8007b94:	465b      	mov	r3, fp
 8007b96:	f7f8 fb8f 	bl	80002b8 <__aeabi_dsub>
 8007b9a:	9d01      	ldr	r5, [sp, #4]
 8007b9c:	4682      	mov	sl, r0
 8007b9e:	468b      	mov	fp, r1
 8007ba0:	4649      	mov	r1, r9
 8007ba2:	4640      	mov	r0, r8
 8007ba4:	f7f8 fff0 	bl	8000b88 <__aeabi_d2iz>
 8007ba8:	4606      	mov	r6, r0
 8007baa:	f7f8 fcd3 	bl	8000554 <__aeabi_i2d>
 8007bae:	4602      	mov	r2, r0
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	f7f8 fb7f 	bl	80002b8 <__aeabi_dsub>
 8007bba:	3630      	adds	r6, #48	; 0x30
 8007bbc:	f805 6b01 	strb.w	r6, [r5], #1
 8007bc0:	4652      	mov	r2, sl
 8007bc2:	465b      	mov	r3, fp
 8007bc4:	4680      	mov	r8, r0
 8007bc6:	4689      	mov	r9, r1
 8007bc8:	f7f8 ffa0 	bl	8000b0c <__aeabi_dcmplt>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d163      	bne.n	8007c98 <_dtoa_r+0x608>
 8007bd0:	4642      	mov	r2, r8
 8007bd2:	464b      	mov	r3, r9
 8007bd4:	4936      	ldr	r1, [pc, #216]	; (8007cb0 <_dtoa_r+0x620>)
 8007bd6:	2000      	movs	r0, #0
 8007bd8:	f7f8 fb6e 	bl	80002b8 <__aeabi_dsub>
 8007bdc:	4652      	mov	r2, sl
 8007bde:	465b      	mov	r3, fp
 8007be0:	f7f8 ff94 	bl	8000b0c <__aeabi_dcmplt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 80b5 	bne.w	8007d54 <_dtoa_r+0x6c4>
 8007bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bec:	429d      	cmp	r5, r3
 8007bee:	d081      	beq.n	8007af4 <_dtoa_r+0x464>
 8007bf0:	4b30      	ldr	r3, [pc, #192]	; (8007cb4 <_dtoa_r+0x624>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	4650      	mov	r0, sl
 8007bf6:	4659      	mov	r1, fp
 8007bf8:	f7f8 fd16 	bl	8000628 <__aeabi_dmul>
 8007bfc:	4b2d      	ldr	r3, [pc, #180]	; (8007cb4 <_dtoa_r+0x624>)
 8007bfe:	4682      	mov	sl, r0
 8007c00:	468b      	mov	fp, r1
 8007c02:	4640      	mov	r0, r8
 8007c04:	4649      	mov	r1, r9
 8007c06:	2200      	movs	r2, #0
 8007c08:	f7f8 fd0e 	bl	8000628 <__aeabi_dmul>
 8007c0c:	4680      	mov	r8, r0
 8007c0e:	4689      	mov	r9, r1
 8007c10:	e7c6      	b.n	8007ba0 <_dtoa_r+0x510>
 8007c12:	4650      	mov	r0, sl
 8007c14:	4659      	mov	r1, fp
 8007c16:	f7f8 fd07 	bl	8000628 <__aeabi_dmul>
 8007c1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c1c:	9d01      	ldr	r5, [sp, #4]
 8007c1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c20:	4682      	mov	sl, r0
 8007c22:	468b      	mov	fp, r1
 8007c24:	4649      	mov	r1, r9
 8007c26:	4640      	mov	r0, r8
 8007c28:	f7f8 ffae 	bl	8000b88 <__aeabi_d2iz>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	f7f8 fc91 	bl	8000554 <__aeabi_i2d>
 8007c32:	3630      	adds	r6, #48	; 0x30
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4640      	mov	r0, r8
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	f7f8 fb3c 	bl	80002b8 <__aeabi_dsub>
 8007c40:	f805 6b01 	strb.w	r6, [r5], #1
 8007c44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c46:	429d      	cmp	r5, r3
 8007c48:	4680      	mov	r8, r0
 8007c4a:	4689      	mov	r9, r1
 8007c4c:	f04f 0200 	mov.w	r2, #0
 8007c50:	d124      	bne.n	8007c9c <_dtoa_r+0x60c>
 8007c52:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <_dtoa_r+0x630>)
 8007c54:	4650      	mov	r0, sl
 8007c56:	4659      	mov	r1, fp
 8007c58:	f7f8 fb30 	bl	80002bc <__adddf3>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	460b      	mov	r3, r1
 8007c60:	4640      	mov	r0, r8
 8007c62:	4649      	mov	r1, r9
 8007c64:	f7f8 ff70 	bl	8000b48 <__aeabi_dcmpgt>
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d173      	bne.n	8007d54 <_dtoa_r+0x6c4>
 8007c6c:	4652      	mov	r2, sl
 8007c6e:	465b      	mov	r3, fp
 8007c70:	4913      	ldr	r1, [pc, #76]	; (8007cc0 <_dtoa_r+0x630>)
 8007c72:	2000      	movs	r0, #0
 8007c74:	f7f8 fb20 	bl	80002b8 <__aeabi_dsub>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7f8 ff44 	bl	8000b0c <__aeabi_dcmplt>
 8007c84:	2800      	cmp	r0, #0
 8007c86:	f43f af35 	beq.w	8007af4 <_dtoa_r+0x464>
 8007c8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007c8c:	1e6b      	subs	r3, r5, #1
 8007c8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007c90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007c94:	2b30      	cmp	r3, #48	; 0x30
 8007c96:	d0f8      	beq.n	8007c8a <_dtoa_r+0x5fa>
 8007c98:	9700      	str	r7, [sp, #0]
 8007c9a:	e049      	b.n	8007d30 <_dtoa_r+0x6a0>
 8007c9c:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <_dtoa_r+0x624>)
 8007c9e:	f7f8 fcc3 	bl	8000628 <__aeabi_dmul>
 8007ca2:	4680      	mov	r8, r0
 8007ca4:	4689      	mov	r9, r1
 8007ca6:	e7bd      	b.n	8007c24 <_dtoa_r+0x594>
 8007ca8:	08009908 	.word	0x08009908
 8007cac:	080098e0 	.word	0x080098e0
 8007cb0:	3ff00000 	.word	0x3ff00000
 8007cb4:	40240000 	.word	0x40240000
 8007cb8:	401c0000 	.word	0x401c0000
 8007cbc:	40140000 	.word	0x40140000
 8007cc0:	3fe00000 	.word	0x3fe00000
 8007cc4:	9d01      	ldr	r5, [sp, #4]
 8007cc6:	4656      	mov	r6, sl
 8007cc8:	465f      	mov	r7, fp
 8007cca:	4642      	mov	r2, r8
 8007ccc:	464b      	mov	r3, r9
 8007cce:	4630      	mov	r0, r6
 8007cd0:	4639      	mov	r1, r7
 8007cd2:	f7f8 fdd3 	bl	800087c <__aeabi_ddiv>
 8007cd6:	f7f8 ff57 	bl	8000b88 <__aeabi_d2iz>
 8007cda:	4682      	mov	sl, r0
 8007cdc:	f7f8 fc3a 	bl	8000554 <__aeabi_i2d>
 8007ce0:	4642      	mov	r2, r8
 8007ce2:	464b      	mov	r3, r9
 8007ce4:	f7f8 fca0 	bl	8000628 <__aeabi_dmul>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4630      	mov	r0, r6
 8007cee:	4639      	mov	r1, r7
 8007cf0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007cf4:	f7f8 fae0 	bl	80002b8 <__aeabi_dsub>
 8007cf8:	f805 6b01 	strb.w	r6, [r5], #1
 8007cfc:	9e01      	ldr	r6, [sp, #4]
 8007cfe:	9f03      	ldr	r7, [sp, #12]
 8007d00:	1bae      	subs	r6, r5, r6
 8007d02:	42b7      	cmp	r7, r6
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	d135      	bne.n	8007d76 <_dtoa_r+0x6e6>
 8007d0a:	f7f8 fad7 	bl	80002bc <__adddf3>
 8007d0e:	4642      	mov	r2, r8
 8007d10:	464b      	mov	r3, r9
 8007d12:	4606      	mov	r6, r0
 8007d14:	460f      	mov	r7, r1
 8007d16:	f7f8 ff17 	bl	8000b48 <__aeabi_dcmpgt>
 8007d1a:	b9d0      	cbnz	r0, 8007d52 <_dtoa_r+0x6c2>
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	4630      	mov	r0, r6
 8007d22:	4639      	mov	r1, r7
 8007d24:	f7f8 fee8 	bl	8000af8 <__aeabi_dcmpeq>
 8007d28:	b110      	cbz	r0, 8007d30 <_dtoa_r+0x6a0>
 8007d2a:	f01a 0f01 	tst.w	sl, #1
 8007d2e:	d110      	bne.n	8007d52 <_dtoa_r+0x6c2>
 8007d30:	4620      	mov	r0, r4
 8007d32:	ee18 1a10 	vmov	r1, s16
 8007d36:	f000 fbed 	bl	8008514 <_Bfree>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	9800      	ldr	r0, [sp, #0]
 8007d3e:	702b      	strb	r3, [r5, #0]
 8007d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007d42:	3001      	adds	r0, #1
 8007d44:	6018      	str	r0, [r3, #0]
 8007d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	f43f acf1 	beq.w	8007730 <_dtoa_r+0xa0>
 8007d4e:	601d      	str	r5, [r3, #0]
 8007d50:	e4ee      	b.n	8007730 <_dtoa_r+0xa0>
 8007d52:	9f00      	ldr	r7, [sp, #0]
 8007d54:	462b      	mov	r3, r5
 8007d56:	461d      	mov	r5, r3
 8007d58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d5c:	2a39      	cmp	r2, #57	; 0x39
 8007d5e:	d106      	bne.n	8007d6e <_dtoa_r+0x6de>
 8007d60:	9a01      	ldr	r2, [sp, #4]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d1f7      	bne.n	8007d56 <_dtoa_r+0x6c6>
 8007d66:	9901      	ldr	r1, [sp, #4]
 8007d68:	2230      	movs	r2, #48	; 0x30
 8007d6a:	3701      	adds	r7, #1
 8007d6c:	700a      	strb	r2, [r1, #0]
 8007d6e:	781a      	ldrb	r2, [r3, #0]
 8007d70:	3201      	adds	r2, #1
 8007d72:	701a      	strb	r2, [r3, #0]
 8007d74:	e790      	b.n	8007c98 <_dtoa_r+0x608>
 8007d76:	4ba6      	ldr	r3, [pc, #664]	; (8008010 <_dtoa_r+0x980>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f7f8 fc55 	bl	8000628 <__aeabi_dmul>
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2300      	movs	r3, #0
 8007d82:	4606      	mov	r6, r0
 8007d84:	460f      	mov	r7, r1
 8007d86:	f7f8 feb7 	bl	8000af8 <__aeabi_dcmpeq>
 8007d8a:	2800      	cmp	r0, #0
 8007d8c:	d09d      	beq.n	8007cca <_dtoa_r+0x63a>
 8007d8e:	e7cf      	b.n	8007d30 <_dtoa_r+0x6a0>
 8007d90:	9a08      	ldr	r2, [sp, #32]
 8007d92:	2a00      	cmp	r2, #0
 8007d94:	f000 80d7 	beq.w	8007f46 <_dtoa_r+0x8b6>
 8007d98:	9a06      	ldr	r2, [sp, #24]
 8007d9a:	2a01      	cmp	r2, #1
 8007d9c:	f300 80ba 	bgt.w	8007f14 <_dtoa_r+0x884>
 8007da0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007da2:	2a00      	cmp	r2, #0
 8007da4:	f000 80b2 	beq.w	8007f0c <_dtoa_r+0x87c>
 8007da8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007dac:	9e07      	ldr	r6, [sp, #28]
 8007dae:	9d04      	ldr	r5, [sp, #16]
 8007db0:	9a04      	ldr	r2, [sp, #16]
 8007db2:	441a      	add	r2, r3
 8007db4:	9204      	str	r2, [sp, #16]
 8007db6:	9a05      	ldr	r2, [sp, #20]
 8007db8:	2101      	movs	r1, #1
 8007dba:	441a      	add	r2, r3
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	9205      	str	r2, [sp, #20]
 8007dc0:	f000 fc60 	bl	8008684 <__i2b>
 8007dc4:	4607      	mov	r7, r0
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	dd0c      	ble.n	8007de4 <_dtoa_r+0x754>
 8007dca:	9b05      	ldr	r3, [sp, #20]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd09      	ble.n	8007de4 <_dtoa_r+0x754>
 8007dd0:	42ab      	cmp	r3, r5
 8007dd2:	9a04      	ldr	r2, [sp, #16]
 8007dd4:	bfa8      	it	ge
 8007dd6:	462b      	movge	r3, r5
 8007dd8:	1ad2      	subs	r2, r2, r3
 8007dda:	9204      	str	r2, [sp, #16]
 8007ddc:	9a05      	ldr	r2, [sp, #20]
 8007dde:	1aed      	subs	r5, r5, r3
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	9b07      	ldr	r3, [sp, #28]
 8007de6:	b31b      	cbz	r3, 8007e30 <_dtoa_r+0x7a0>
 8007de8:	9b08      	ldr	r3, [sp, #32]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 80af 	beq.w	8007f4e <_dtoa_r+0x8be>
 8007df0:	2e00      	cmp	r6, #0
 8007df2:	dd13      	ble.n	8007e1c <_dtoa_r+0x78c>
 8007df4:	4639      	mov	r1, r7
 8007df6:	4632      	mov	r2, r6
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 fd03 	bl	8008804 <__pow5mult>
 8007dfe:	ee18 2a10 	vmov	r2, s16
 8007e02:	4601      	mov	r1, r0
 8007e04:	4607      	mov	r7, r0
 8007e06:	4620      	mov	r0, r4
 8007e08:	f000 fc52 	bl	80086b0 <__multiply>
 8007e0c:	ee18 1a10 	vmov	r1, s16
 8007e10:	4680      	mov	r8, r0
 8007e12:	4620      	mov	r0, r4
 8007e14:	f000 fb7e 	bl	8008514 <_Bfree>
 8007e18:	ee08 8a10 	vmov	s16, r8
 8007e1c:	9b07      	ldr	r3, [sp, #28]
 8007e1e:	1b9a      	subs	r2, r3, r6
 8007e20:	d006      	beq.n	8007e30 <_dtoa_r+0x7a0>
 8007e22:	ee18 1a10 	vmov	r1, s16
 8007e26:	4620      	mov	r0, r4
 8007e28:	f000 fcec 	bl	8008804 <__pow5mult>
 8007e2c:	ee08 0a10 	vmov	s16, r0
 8007e30:	2101      	movs	r1, #1
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fc26 	bl	8008684 <__i2b>
 8007e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	f340 8088 	ble.w	8007f52 <_dtoa_r+0x8c2>
 8007e42:	461a      	mov	r2, r3
 8007e44:	4601      	mov	r1, r0
 8007e46:	4620      	mov	r0, r4
 8007e48:	f000 fcdc 	bl	8008804 <__pow5mult>
 8007e4c:	9b06      	ldr	r3, [sp, #24]
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	4606      	mov	r6, r0
 8007e52:	f340 8081 	ble.w	8007f58 <_dtoa_r+0x8c8>
 8007e56:	f04f 0800 	mov.w	r8, #0
 8007e5a:	6933      	ldr	r3, [r6, #16]
 8007e5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007e60:	6918      	ldr	r0, [r3, #16]
 8007e62:	f000 fbbf 	bl	80085e4 <__hi0bits>
 8007e66:	f1c0 0020 	rsb	r0, r0, #32
 8007e6a:	9b05      	ldr	r3, [sp, #20]
 8007e6c:	4418      	add	r0, r3
 8007e6e:	f010 001f 	ands.w	r0, r0, #31
 8007e72:	f000 8092 	beq.w	8007f9a <_dtoa_r+0x90a>
 8007e76:	f1c0 0320 	rsb	r3, r0, #32
 8007e7a:	2b04      	cmp	r3, #4
 8007e7c:	f340 808a 	ble.w	8007f94 <_dtoa_r+0x904>
 8007e80:	f1c0 001c 	rsb	r0, r0, #28
 8007e84:	9b04      	ldr	r3, [sp, #16]
 8007e86:	4403      	add	r3, r0
 8007e88:	9304      	str	r3, [sp, #16]
 8007e8a:	9b05      	ldr	r3, [sp, #20]
 8007e8c:	4403      	add	r3, r0
 8007e8e:	4405      	add	r5, r0
 8007e90:	9305      	str	r3, [sp, #20]
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	dd07      	ble.n	8007ea8 <_dtoa_r+0x818>
 8007e98:	ee18 1a10 	vmov	r1, s16
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f000 fd0a 	bl	80088b8 <__lshift>
 8007ea4:	ee08 0a10 	vmov	s16, r0
 8007ea8:	9b05      	ldr	r3, [sp, #20]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	dd05      	ble.n	8007eba <_dtoa_r+0x82a>
 8007eae:	4631      	mov	r1, r6
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	f000 fd00 	bl	80088b8 <__lshift>
 8007eb8:	4606      	mov	r6, r0
 8007eba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d06e      	beq.n	8007f9e <_dtoa_r+0x90e>
 8007ec0:	ee18 0a10 	vmov	r0, s16
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	f000 fd67 	bl	8008998 <__mcmp>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	da67      	bge.n	8007f9e <_dtoa_r+0x90e>
 8007ece:	9b00      	ldr	r3, [sp, #0]
 8007ed0:	3b01      	subs	r3, #1
 8007ed2:	ee18 1a10 	vmov	r1, s16
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	220a      	movs	r2, #10
 8007eda:	2300      	movs	r3, #0
 8007edc:	4620      	mov	r0, r4
 8007ede:	f000 fb3b 	bl	8008558 <__multadd>
 8007ee2:	9b08      	ldr	r3, [sp, #32]
 8007ee4:	ee08 0a10 	vmov	s16, r0
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 81b1 	beq.w	8008250 <_dtoa_r+0xbc0>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	220a      	movs	r2, #10
 8007ef4:	4620      	mov	r0, r4
 8007ef6:	f000 fb2f 	bl	8008558 <__multadd>
 8007efa:	9b02      	ldr	r3, [sp, #8]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	4607      	mov	r7, r0
 8007f00:	f300 808e 	bgt.w	8008020 <_dtoa_r+0x990>
 8007f04:	9b06      	ldr	r3, [sp, #24]
 8007f06:	2b02      	cmp	r3, #2
 8007f08:	dc51      	bgt.n	8007fae <_dtoa_r+0x91e>
 8007f0a:	e089      	b.n	8008020 <_dtoa_r+0x990>
 8007f0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007f0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007f12:	e74b      	b.n	8007dac <_dtoa_r+0x71c>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	1e5e      	subs	r6, r3, #1
 8007f18:	9b07      	ldr	r3, [sp, #28]
 8007f1a:	42b3      	cmp	r3, r6
 8007f1c:	bfbf      	itttt	lt
 8007f1e:	9b07      	ldrlt	r3, [sp, #28]
 8007f20:	9607      	strlt	r6, [sp, #28]
 8007f22:	1af2      	sublt	r2, r6, r3
 8007f24:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007f26:	bfb6      	itet	lt
 8007f28:	189b      	addlt	r3, r3, r2
 8007f2a:	1b9e      	subge	r6, r3, r6
 8007f2c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	bfb8      	it	lt
 8007f32:	2600      	movlt	r6, #0
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	bfb7      	itett	lt
 8007f38:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007f3c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007f40:	1a9d      	sublt	r5, r3, r2
 8007f42:	2300      	movlt	r3, #0
 8007f44:	e734      	b.n	8007db0 <_dtoa_r+0x720>
 8007f46:	9e07      	ldr	r6, [sp, #28]
 8007f48:	9d04      	ldr	r5, [sp, #16]
 8007f4a:	9f08      	ldr	r7, [sp, #32]
 8007f4c:	e73b      	b.n	8007dc6 <_dtoa_r+0x736>
 8007f4e:	9a07      	ldr	r2, [sp, #28]
 8007f50:	e767      	b.n	8007e22 <_dtoa_r+0x792>
 8007f52:	9b06      	ldr	r3, [sp, #24]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	dc18      	bgt.n	8007f8a <_dtoa_r+0x8fa>
 8007f58:	f1ba 0f00 	cmp.w	sl, #0
 8007f5c:	d115      	bne.n	8007f8a <_dtoa_r+0x8fa>
 8007f5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007f62:	b993      	cbnz	r3, 8007f8a <_dtoa_r+0x8fa>
 8007f64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007f68:	0d1b      	lsrs	r3, r3, #20
 8007f6a:	051b      	lsls	r3, r3, #20
 8007f6c:	b183      	cbz	r3, 8007f90 <_dtoa_r+0x900>
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	3301      	adds	r3, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	9b05      	ldr	r3, [sp, #20]
 8007f76:	3301      	adds	r3, #1
 8007f78:	9305      	str	r3, [sp, #20]
 8007f7a:	f04f 0801 	mov.w	r8, #1
 8007f7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	f47f af6a 	bne.w	8007e5a <_dtoa_r+0x7ca>
 8007f86:	2001      	movs	r0, #1
 8007f88:	e76f      	b.n	8007e6a <_dtoa_r+0x7da>
 8007f8a:	f04f 0800 	mov.w	r8, #0
 8007f8e:	e7f6      	b.n	8007f7e <_dtoa_r+0x8ee>
 8007f90:	4698      	mov	r8, r3
 8007f92:	e7f4      	b.n	8007f7e <_dtoa_r+0x8ee>
 8007f94:	f43f af7d 	beq.w	8007e92 <_dtoa_r+0x802>
 8007f98:	4618      	mov	r0, r3
 8007f9a:	301c      	adds	r0, #28
 8007f9c:	e772      	b.n	8007e84 <_dtoa_r+0x7f4>
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	dc37      	bgt.n	8008014 <_dtoa_r+0x984>
 8007fa4:	9b06      	ldr	r3, [sp, #24]
 8007fa6:	2b02      	cmp	r3, #2
 8007fa8:	dd34      	ble.n	8008014 <_dtoa_r+0x984>
 8007faa:	9b03      	ldr	r3, [sp, #12]
 8007fac:	9302      	str	r3, [sp, #8]
 8007fae:	9b02      	ldr	r3, [sp, #8]
 8007fb0:	b96b      	cbnz	r3, 8007fce <_dtoa_r+0x93e>
 8007fb2:	4631      	mov	r1, r6
 8007fb4:	2205      	movs	r2, #5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 face 	bl	8008558 <__multadd>
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	ee18 0a10 	vmov	r0, s16
 8007fc4:	f000 fce8 	bl	8008998 <__mcmp>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f73f adbb 	bgt.w	8007b44 <_dtoa_r+0x4b4>
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd0:	9d01      	ldr	r5, [sp, #4]
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	f04f 0800 	mov.w	r8, #0
 8007fda:	4631      	mov	r1, r6
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f000 fa99 	bl	8008514 <_Bfree>
 8007fe2:	2f00      	cmp	r7, #0
 8007fe4:	f43f aea4 	beq.w	8007d30 <_dtoa_r+0x6a0>
 8007fe8:	f1b8 0f00 	cmp.w	r8, #0
 8007fec:	d005      	beq.n	8007ffa <_dtoa_r+0x96a>
 8007fee:	45b8      	cmp	r8, r7
 8007ff0:	d003      	beq.n	8007ffa <_dtoa_r+0x96a>
 8007ff2:	4641      	mov	r1, r8
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f000 fa8d 	bl	8008514 <_Bfree>
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f000 fa89 	bl	8008514 <_Bfree>
 8008002:	e695      	b.n	8007d30 <_dtoa_r+0x6a0>
 8008004:	2600      	movs	r6, #0
 8008006:	4637      	mov	r7, r6
 8008008:	e7e1      	b.n	8007fce <_dtoa_r+0x93e>
 800800a:	9700      	str	r7, [sp, #0]
 800800c:	4637      	mov	r7, r6
 800800e:	e599      	b.n	8007b44 <_dtoa_r+0x4b4>
 8008010:	40240000 	.word	0x40240000
 8008014:	9b08      	ldr	r3, [sp, #32]
 8008016:	2b00      	cmp	r3, #0
 8008018:	f000 80ca 	beq.w	80081b0 <_dtoa_r+0xb20>
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	9302      	str	r3, [sp, #8]
 8008020:	2d00      	cmp	r5, #0
 8008022:	dd05      	ble.n	8008030 <_dtoa_r+0x9a0>
 8008024:	4639      	mov	r1, r7
 8008026:	462a      	mov	r2, r5
 8008028:	4620      	mov	r0, r4
 800802a:	f000 fc45 	bl	80088b8 <__lshift>
 800802e:	4607      	mov	r7, r0
 8008030:	f1b8 0f00 	cmp.w	r8, #0
 8008034:	d05b      	beq.n	80080ee <_dtoa_r+0xa5e>
 8008036:	6879      	ldr	r1, [r7, #4]
 8008038:	4620      	mov	r0, r4
 800803a:	f000 fa2b 	bl	8008494 <_Balloc>
 800803e:	4605      	mov	r5, r0
 8008040:	b928      	cbnz	r0, 800804e <_dtoa_r+0x9be>
 8008042:	4b87      	ldr	r3, [pc, #540]	; (8008260 <_dtoa_r+0xbd0>)
 8008044:	4602      	mov	r2, r0
 8008046:	f240 21ea 	movw	r1, #746	; 0x2ea
 800804a:	f7ff bb3b 	b.w	80076c4 <_dtoa_r+0x34>
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	3202      	adds	r2, #2
 8008052:	0092      	lsls	r2, r2, #2
 8008054:	f107 010c 	add.w	r1, r7, #12
 8008058:	300c      	adds	r0, #12
 800805a:	f000 fa0d 	bl	8008478 <memcpy>
 800805e:	2201      	movs	r2, #1
 8008060:	4629      	mov	r1, r5
 8008062:	4620      	mov	r0, r4
 8008064:	f000 fc28 	bl	80088b8 <__lshift>
 8008068:	9b01      	ldr	r3, [sp, #4]
 800806a:	f103 0901 	add.w	r9, r3, #1
 800806e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008072:	4413      	add	r3, r2
 8008074:	9305      	str	r3, [sp, #20]
 8008076:	f00a 0301 	and.w	r3, sl, #1
 800807a:	46b8      	mov	r8, r7
 800807c:	9304      	str	r3, [sp, #16]
 800807e:	4607      	mov	r7, r0
 8008080:	4631      	mov	r1, r6
 8008082:	ee18 0a10 	vmov	r0, s16
 8008086:	f7ff fa77 	bl	8007578 <quorem>
 800808a:	4641      	mov	r1, r8
 800808c:	9002      	str	r0, [sp, #8]
 800808e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008092:	ee18 0a10 	vmov	r0, s16
 8008096:	f000 fc7f 	bl	8008998 <__mcmp>
 800809a:	463a      	mov	r2, r7
 800809c:	9003      	str	r0, [sp, #12]
 800809e:	4631      	mov	r1, r6
 80080a0:	4620      	mov	r0, r4
 80080a2:	f000 fc95 	bl	80089d0 <__mdiff>
 80080a6:	68c2      	ldr	r2, [r0, #12]
 80080a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80080ac:	4605      	mov	r5, r0
 80080ae:	bb02      	cbnz	r2, 80080f2 <_dtoa_r+0xa62>
 80080b0:	4601      	mov	r1, r0
 80080b2:	ee18 0a10 	vmov	r0, s16
 80080b6:	f000 fc6f 	bl	8008998 <__mcmp>
 80080ba:	4602      	mov	r2, r0
 80080bc:	4629      	mov	r1, r5
 80080be:	4620      	mov	r0, r4
 80080c0:	9207      	str	r2, [sp, #28]
 80080c2:	f000 fa27 	bl	8008514 <_Bfree>
 80080c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80080ca:	ea43 0102 	orr.w	r1, r3, r2
 80080ce:	9b04      	ldr	r3, [sp, #16]
 80080d0:	430b      	orrs	r3, r1
 80080d2:	464d      	mov	r5, r9
 80080d4:	d10f      	bne.n	80080f6 <_dtoa_r+0xa66>
 80080d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80080da:	d02a      	beq.n	8008132 <_dtoa_r+0xaa2>
 80080dc:	9b03      	ldr	r3, [sp, #12]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	dd02      	ble.n	80080e8 <_dtoa_r+0xa58>
 80080e2:	9b02      	ldr	r3, [sp, #8]
 80080e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80080e8:	f88b a000 	strb.w	sl, [fp]
 80080ec:	e775      	b.n	8007fda <_dtoa_r+0x94a>
 80080ee:	4638      	mov	r0, r7
 80080f0:	e7ba      	b.n	8008068 <_dtoa_r+0x9d8>
 80080f2:	2201      	movs	r2, #1
 80080f4:	e7e2      	b.n	80080bc <_dtoa_r+0xa2c>
 80080f6:	9b03      	ldr	r3, [sp, #12]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	db04      	blt.n	8008106 <_dtoa_r+0xa76>
 80080fc:	9906      	ldr	r1, [sp, #24]
 80080fe:	430b      	orrs	r3, r1
 8008100:	9904      	ldr	r1, [sp, #16]
 8008102:	430b      	orrs	r3, r1
 8008104:	d122      	bne.n	800814c <_dtoa_r+0xabc>
 8008106:	2a00      	cmp	r2, #0
 8008108:	ddee      	ble.n	80080e8 <_dtoa_r+0xa58>
 800810a:	ee18 1a10 	vmov	r1, s16
 800810e:	2201      	movs	r2, #1
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fbd1 	bl	80088b8 <__lshift>
 8008116:	4631      	mov	r1, r6
 8008118:	ee08 0a10 	vmov	s16, r0
 800811c:	f000 fc3c 	bl	8008998 <__mcmp>
 8008120:	2800      	cmp	r0, #0
 8008122:	dc03      	bgt.n	800812c <_dtoa_r+0xa9c>
 8008124:	d1e0      	bne.n	80080e8 <_dtoa_r+0xa58>
 8008126:	f01a 0f01 	tst.w	sl, #1
 800812a:	d0dd      	beq.n	80080e8 <_dtoa_r+0xa58>
 800812c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008130:	d1d7      	bne.n	80080e2 <_dtoa_r+0xa52>
 8008132:	2339      	movs	r3, #57	; 0x39
 8008134:	f88b 3000 	strb.w	r3, [fp]
 8008138:	462b      	mov	r3, r5
 800813a:	461d      	mov	r5, r3
 800813c:	3b01      	subs	r3, #1
 800813e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008142:	2a39      	cmp	r2, #57	; 0x39
 8008144:	d071      	beq.n	800822a <_dtoa_r+0xb9a>
 8008146:	3201      	adds	r2, #1
 8008148:	701a      	strb	r2, [r3, #0]
 800814a:	e746      	b.n	8007fda <_dtoa_r+0x94a>
 800814c:	2a00      	cmp	r2, #0
 800814e:	dd07      	ble.n	8008160 <_dtoa_r+0xad0>
 8008150:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008154:	d0ed      	beq.n	8008132 <_dtoa_r+0xaa2>
 8008156:	f10a 0301 	add.w	r3, sl, #1
 800815a:	f88b 3000 	strb.w	r3, [fp]
 800815e:	e73c      	b.n	8007fda <_dtoa_r+0x94a>
 8008160:	9b05      	ldr	r3, [sp, #20]
 8008162:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008166:	4599      	cmp	r9, r3
 8008168:	d047      	beq.n	80081fa <_dtoa_r+0xb6a>
 800816a:	ee18 1a10 	vmov	r1, s16
 800816e:	2300      	movs	r3, #0
 8008170:	220a      	movs	r2, #10
 8008172:	4620      	mov	r0, r4
 8008174:	f000 f9f0 	bl	8008558 <__multadd>
 8008178:	45b8      	cmp	r8, r7
 800817a:	ee08 0a10 	vmov	s16, r0
 800817e:	f04f 0300 	mov.w	r3, #0
 8008182:	f04f 020a 	mov.w	r2, #10
 8008186:	4641      	mov	r1, r8
 8008188:	4620      	mov	r0, r4
 800818a:	d106      	bne.n	800819a <_dtoa_r+0xb0a>
 800818c:	f000 f9e4 	bl	8008558 <__multadd>
 8008190:	4680      	mov	r8, r0
 8008192:	4607      	mov	r7, r0
 8008194:	f109 0901 	add.w	r9, r9, #1
 8008198:	e772      	b.n	8008080 <_dtoa_r+0x9f0>
 800819a:	f000 f9dd 	bl	8008558 <__multadd>
 800819e:	4639      	mov	r1, r7
 80081a0:	4680      	mov	r8, r0
 80081a2:	2300      	movs	r3, #0
 80081a4:	220a      	movs	r2, #10
 80081a6:	4620      	mov	r0, r4
 80081a8:	f000 f9d6 	bl	8008558 <__multadd>
 80081ac:	4607      	mov	r7, r0
 80081ae:	e7f1      	b.n	8008194 <_dtoa_r+0xb04>
 80081b0:	9b03      	ldr	r3, [sp, #12]
 80081b2:	9302      	str	r3, [sp, #8]
 80081b4:	9d01      	ldr	r5, [sp, #4]
 80081b6:	ee18 0a10 	vmov	r0, s16
 80081ba:	4631      	mov	r1, r6
 80081bc:	f7ff f9dc 	bl	8007578 <quorem>
 80081c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80081c4:	9b01      	ldr	r3, [sp, #4]
 80081c6:	f805 ab01 	strb.w	sl, [r5], #1
 80081ca:	1aea      	subs	r2, r5, r3
 80081cc:	9b02      	ldr	r3, [sp, #8]
 80081ce:	4293      	cmp	r3, r2
 80081d0:	dd09      	ble.n	80081e6 <_dtoa_r+0xb56>
 80081d2:	ee18 1a10 	vmov	r1, s16
 80081d6:	2300      	movs	r3, #0
 80081d8:	220a      	movs	r2, #10
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 f9bc 	bl	8008558 <__multadd>
 80081e0:	ee08 0a10 	vmov	s16, r0
 80081e4:	e7e7      	b.n	80081b6 <_dtoa_r+0xb26>
 80081e6:	9b02      	ldr	r3, [sp, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	bfc8      	it	gt
 80081ec:	461d      	movgt	r5, r3
 80081ee:	9b01      	ldr	r3, [sp, #4]
 80081f0:	bfd8      	it	le
 80081f2:	2501      	movle	r5, #1
 80081f4:	441d      	add	r5, r3
 80081f6:	f04f 0800 	mov.w	r8, #0
 80081fa:	ee18 1a10 	vmov	r1, s16
 80081fe:	2201      	movs	r2, #1
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fb59 	bl	80088b8 <__lshift>
 8008206:	4631      	mov	r1, r6
 8008208:	ee08 0a10 	vmov	s16, r0
 800820c:	f000 fbc4 	bl	8008998 <__mcmp>
 8008210:	2800      	cmp	r0, #0
 8008212:	dc91      	bgt.n	8008138 <_dtoa_r+0xaa8>
 8008214:	d102      	bne.n	800821c <_dtoa_r+0xb8c>
 8008216:	f01a 0f01 	tst.w	sl, #1
 800821a:	d18d      	bne.n	8008138 <_dtoa_r+0xaa8>
 800821c:	462b      	mov	r3, r5
 800821e:	461d      	mov	r5, r3
 8008220:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008224:	2a30      	cmp	r2, #48	; 0x30
 8008226:	d0fa      	beq.n	800821e <_dtoa_r+0xb8e>
 8008228:	e6d7      	b.n	8007fda <_dtoa_r+0x94a>
 800822a:	9a01      	ldr	r2, [sp, #4]
 800822c:	429a      	cmp	r2, r3
 800822e:	d184      	bne.n	800813a <_dtoa_r+0xaaa>
 8008230:	9b00      	ldr	r3, [sp, #0]
 8008232:	3301      	adds	r3, #1
 8008234:	9300      	str	r3, [sp, #0]
 8008236:	2331      	movs	r3, #49	; 0x31
 8008238:	7013      	strb	r3, [r2, #0]
 800823a:	e6ce      	b.n	8007fda <_dtoa_r+0x94a>
 800823c:	4b09      	ldr	r3, [pc, #36]	; (8008264 <_dtoa_r+0xbd4>)
 800823e:	f7ff ba95 	b.w	800776c <_dtoa_r+0xdc>
 8008242:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008244:	2b00      	cmp	r3, #0
 8008246:	f47f aa6e 	bne.w	8007726 <_dtoa_r+0x96>
 800824a:	4b07      	ldr	r3, [pc, #28]	; (8008268 <_dtoa_r+0xbd8>)
 800824c:	f7ff ba8e 	b.w	800776c <_dtoa_r+0xdc>
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	dcae      	bgt.n	80081b4 <_dtoa_r+0xb24>
 8008256:	9b06      	ldr	r3, [sp, #24]
 8008258:	2b02      	cmp	r3, #2
 800825a:	f73f aea8 	bgt.w	8007fae <_dtoa_r+0x91e>
 800825e:	e7a9      	b.n	80081b4 <_dtoa_r+0xb24>
 8008260:	0800980f 	.word	0x0800980f
 8008264:	0800976c 	.word	0x0800976c
 8008268:	08009790 	.word	0x08009790

0800826c <std>:
 800826c:	2300      	movs	r3, #0
 800826e:	b510      	push	{r4, lr}
 8008270:	4604      	mov	r4, r0
 8008272:	e9c0 3300 	strd	r3, r3, [r0]
 8008276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800827a:	6083      	str	r3, [r0, #8]
 800827c:	8181      	strh	r1, [r0, #12]
 800827e:	6643      	str	r3, [r0, #100]	; 0x64
 8008280:	81c2      	strh	r2, [r0, #14]
 8008282:	6183      	str	r3, [r0, #24]
 8008284:	4619      	mov	r1, r3
 8008286:	2208      	movs	r2, #8
 8008288:	305c      	adds	r0, #92	; 0x5c
 800828a:	f7fe fd03 	bl	8006c94 <memset>
 800828e:	4b05      	ldr	r3, [pc, #20]	; (80082a4 <std+0x38>)
 8008290:	6263      	str	r3, [r4, #36]	; 0x24
 8008292:	4b05      	ldr	r3, [pc, #20]	; (80082a8 <std+0x3c>)
 8008294:	62a3      	str	r3, [r4, #40]	; 0x28
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <std+0x40>)
 8008298:	62e3      	str	r3, [r4, #44]	; 0x2c
 800829a:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <std+0x44>)
 800829c:	6224      	str	r4, [r4, #32]
 800829e:	6323      	str	r3, [r4, #48]	; 0x30
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	bf00      	nop
 80082a4:	0800905d 	.word	0x0800905d
 80082a8:	0800907f 	.word	0x0800907f
 80082ac:	080090b7 	.word	0x080090b7
 80082b0:	080090db 	.word	0x080090db

080082b4 <_cleanup_r>:
 80082b4:	4901      	ldr	r1, [pc, #4]	; (80082bc <_cleanup_r+0x8>)
 80082b6:	f000 b8af 	b.w	8008418 <_fwalk_reent>
 80082ba:	bf00      	nop
 80082bc:	080093f1 	.word	0x080093f1

080082c0 <__sfmoreglue>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	2268      	movs	r2, #104	; 0x68
 80082c4:	1e4d      	subs	r5, r1, #1
 80082c6:	4355      	muls	r5, r2
 80082c8:	460e      	mov	r6, r1
 80082ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80082ce:	f000 fce7 	bl	8008ca0 <_malloc_r>
 80082d2:	4604      	mov	r4, r0
 80082d4:	b140      	cbz	r0, 80082e8 <__sfmoreglue+0x28>
 80082d6:	2100      	movs	r1, #0
 80082d8:	e9c0 1600 	strd	r1, r6, [r0]
 80082dc:	300c      	adds	r0, #12
 80082de:	60a0      	str	r0, [r4, #8]
 80082e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80082e4:	f7fe fcd6 	bl	8006c94 <memset>
 80082e8:	4620      	mov	r0, r4
 80082ea:	bd70      	pop	{r4, r5, r6, pc}

080082ec <__sfp_lock_acquire>:
 80082ec:	4801      	ldr	r0, [pc, #4]	; (80082f4 <__sfp_lock_acquire+0x8>)
 80082ee:	f000 b8b8 	b.w	8008462 <__retarget_lock_acquire_recursive>
 80082f2:	bf00      	nop
 80082f4:	20000415 	.word	0x20000415

080082f8 <__sfp_lock_release>:
 80082f8:	4801      	ldr	r0, [pc, #4]	; (8008300 <__sfp_lock_release+0x8>)
 80082fa:	f000 b8b3 	b.w	8008464 <__retarget_lock_release_recursive>
 80082fe:	bf00      	nop
 8008300:	20000415 	.word	0x20000415

08008304 <__sinit_lock_acquire>:
 8008304:	4801      	ldr	r0, [pc, #4]	; (800830c <__sinit_lock_acquire+0x8>)
 8008306:	f000 b8ac 	b.w	8008462 <__retarget_lock_acquire_recursive>
 800830a:	bf00      	nop
 800830c:	20000416 	.word	0x20000416

08008310 <__sinit_lock_release>:
 8008310:	4801      	ldr	r0, [pc, #4]	; (8008318 <__sinit_lock_release+0x8>)
 8008312:	f000 b8a7 	b.w	8008464 <__retarget_lock_release_recursive>
 8008316:	bf00      	nop
 8008318:	20000416 	.word	0x20000416

0800831c <__sinit>:
 800831c:	b510      	push	{r4, lr}
 800831e:	4604      	mov	r4, r0
 8008320:	f7ff fff0 	bl	8008304 <__sinit_lock_acquire>
 8008324:	69a3      	ldr	r3, [r4, #24]
 8008326:	b11b      	cbz	r3, 8008330 <__sinit+0x14>
 8008328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800832c:	f7ff bff0 	b.w	8008310 <__sinit_lock_release>
 8008330:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008334:	6523      	str	r3, [r4, #80]	; 0x50
 8008336:	4b13      	ldr	r3, [pc, #76]	; (8008384 <__sinit+0x68>)
 8008338:	4a13      	ldr	r2, [pc, #76]	; (8008388 <__sinit+0x6c>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	62a2      	str	r2, [r4, #40]	; 0x28
 800833e:	42a3      	cmp	r3, r4
 8008340:	bf04      	itt	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	61a3      	streq	r3, [r4, #24]
 8008346:	4620      	mov	r0, r4
 8008348:	f000 f820 	bl	800838c <__sfp>
 800834c:	6060      	str	r0, [r4, #4]
 800834e:	4620      	mov	r0, r4
 8008350:	f000 f81c 	bl	800838c <__sfp>
 8008354:	60a0      	str	r0, [r4, #8]
 8008356:	4620      	mov	r0, r4
 8008358:	f000 f818 	bl	800838c <__sfp>
 800835c:	2200      	movs	r2, #0
 800835e:	60e0      	str	r0, [r4, #12]
 8008360:	2104      	movs	r1, #4
 8008362:	6860      	ldr	r0, [r4, #4]
 8008364:	f7ff ff82 	bl	800826c <std>
 8008368:	68a0      	ldr	r0, [r4, #8]
 800836a:	2201      	movs	r2, #1
 800836c:	2109      	movs	r1, #9
 800836e:	f7ff ff7d 	bl	800826c <std>
 8008372:	68e0      	ldr	r0, [r4, #12]
 8008374:	2202      	movs	r2, #2
 8008376:	2112      	movs	r1, #18
 8008378:	f7ff ff78 	bl	800826c <std>
 800837c:	2301      	movs	r3, #1
 800837e:	61a3      	str	r3, [r4, #24]
 8008380:	e7d2      	b.n	8008328 <__sinit+0xc>
 8008382:	bf00      	nop
 8008384:	08009758 	.word	0x08009758
 8008388:	080082b5 	.word	0x080082b5

0800838c <__sfp>:
 800838c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838e:	4607      	mov	r7, r0
 8008390:	f7ff ffac 	bl	80082ec <__sfp_lock_acquire>
 8008394:	4b1e      	ldr	r3, [pc, #120]	; (8008410 <__sfp+0x84>)
 8008396:	681e      	ldr	r6, [r3, #0]
 8008398:	69b3      	ldr	r3, [r6, #24]
 800839a:	b913      	cbnz	r3, 80083a2 <__sfp+0x16>
 800839c:	4630      	mov	r0, r6
 800839e:	f7ff ffbd 	bl	800831c <__sinit>
 80083a2:	3648      	adds	r6, #72	; 0x48
 80083a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80083a8:	3b01      	subs	r3, #1
 80083aa:	d503      	bpl.n	80083b4 <__sfp+0x28>
 80083ac:	6833      	ldr	r3, [r6, #0]
 80083ae:	b30b      	cbz	r3, 80083f4 <__sfp+0x68>
 80083b0:	6836      	ldr	r6, [r6, #0]
 80083b2:	e7f7      	b.n	80083a4 <__sfp+0x18>
 80083b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80083b8:	b9d5      	cbnz	r5, 80083f0 <__sfp+0x64>
 80083ba:	4b16      	ldr	r3, [pc, #88]	; (8008414 <__sfp+0x88>)
 80083bc:	60e3      	str	r3, [r4, #12]
 80083be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083c2:	6665      	str	r5, [r4, #100]	; 0x64
 80083c4:	f000 f84c 	bl	8008460 <__retarget_lock_init_recursive>
 80083c8:	f7ff ff96 	bl	80082f8 <__sfp_lock_release>
 80083cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80083d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80083d4:	6025      	str	r5, [r4, #0]
 80083d6:	61a5      	str	r5, [r4, #24]
 80083d8:	2208      	movs	r2, #8
 80083da:	4629      	mov	r1, r5
 80083dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80083e0:	f7fe fc58 	bl	8006c94 <memset>
 80083e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80083e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80083ec:	4620      	mov	r0, r4
 80083ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083f0:	3468      	adds	r4, #104	; 0x68
 80083f2:	e7d9      	b.n	80083a8 <__sfp+0x1c>
 80083f4:	2104      	movs	r1, #4
 80083f6:	4638      	mov	r0, r7
 80083f8:	f7ff ff62 	bl	80082c0 <__sfmoreglue>
 80083fc:	4604      	mov	r4, r0
 80083fe:	6030      	str	r0, [r6, #0]
 8008400:	2800      	cmp	r0, #0
 8008402:	d1d5      	bne.n	80083b0 <__sfp+0x24>
 8008404:	f7ff ff78 	bl	80082f8 <__sfp_lock_release>
 8008408:	230c      	movs	r3, #12
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	e7ee      	b.n	80083ec <__sfp+0x60>
 800840e:	bf00      	nop
 8008410:	08009758 	.word	0x08009758
 8008414:	ffff0001 	.word	0xffff0001

08008418 <_fwalk_reent>:
 8008418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800841c:	4606      	mov	r6, r0
 800841e:	4688      	mov	r8, r1
 8008420:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008424:	2700      	movs	r7, #0
 8008426:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800842a:	f1b9 0901 	subs.w	r9, r9, #1
 800842e:	d505      	bpl.n	800843c <_fwalk_reent+0x24>
 8008430:	6824      	ldr	r4, [r4, #0]
 8008432:	2c00      	cmp	r4, #0
 8008434:	d1f7      	bne.n	8008426 <_fwalk_reent+0xe>
 8008436:	4638      	mov	r0, r7
 8008438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800843c:	89ab      	ldrh	r3, [r5, #12]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d907      	bls.n	8008452 <_fwalk_reent+0x3a>
 8008442:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008446:	3301      	adds	r3, #1
 8008448:	d003      	beq.n	8008452 <_fwalk_reent+0x3a>
 800844a:	4629      	mov	r1, r5
 800844c:	4630      	mov	r0, r6
 800844e:	47c0      	blx	r8
 8008450:	4307      	orrs	r7, r0
 8008452:	3568      	adds	r5, #104	; 0x68
 8008454:	e7e9      	b.n	800842a <_fwalk_reent+0x12>
	...

08008458 <_localeconv_r>:
 8008458:	4800      	ldr	r0, [pc, #0]	; (800845c <_localeconv_r+0x4>)
 800845a:	4770      	bx	lr
 800845c:	20000160 	.word	0x20000160

08008460 <__retarget_lock_init_recursive>:
 8008460:	4770      	bx	lr

08008462 <__retarget_lock_acquire_recursive>:
 8008462:	4770      	bx	lr

08008464 <__retarget_lock_release_recursive>:
 8008464:	4770      	bx	lr
	...

08008468 <malloc>:
 8008468:	4b02      	ldr	r3, [pc, #8]	; (8008474 <malloc+0xc>)
 800846a:	4601      	mov	r1, r0
 800846c:	6818      	ldr	r0, [r3, #0]
 800846e:	f000 bc17 	b.w	8008ca0 <_malloc_r>
 8008472:	bf00      	nop
 8008474:	2000000c 	.word	0x2000000c

08008478 <memcpy>:
 8008478:	440a      	add	r2, r1
 800847a:	4291      	cmp	r1, r2
 800847c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008480:	d100      	bne.n	8008484 <memcpy+0xc>
 8008482:	4770      	bx	lr
 8008484:	b510      	push	{r4, lr}
 8008486:	f811 4b01 	ldrb.w	r4, [r1], #1
 800848a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800848e:	4291      	cmp	r1, r2
 8008490:	d1f9      	bne.n	8008486 <memcpy+0xe>
 8008492:	bd10      	pop	{r4, pc}

08008494 <_Balloc>:
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008498:	4604      	mov	r4, r0
 800849a:	460d      	mov	r5, r1
 800849c:	b976      	cbnz	r6, 80084bc <_Balloc+0x28>
 800849e:	2010      	movs	r0, #16
 80084a0:	f7ff ffe2 	bl	8008468 <malloc>
 80084a4:	4602      	mov	r2, r0
 80084a6:	6260      	str	r0, [r4, #36]	; 0x24
 80084a8:	b920      	cbnz	r0, 80084b4 <_Balloc+0x20>
 80084aa:	4b18      	ldr	r3, [pc, #96]	; (800850c <_Balloc+0x78>)
 80084ac:	4818      	ldr	r0, [pc, #96]	; (8008510 <_Balloc+0x7c>)
 80084ae:	2166      	movs	r1, #102	; 0x66
 80084b0:	f000 feea 	bl	8009288 <__assert_func>
 80084b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084b8:	6006      	str	r6, [r0, #0]
 80084ba:	60c6      	str	r6, [r0, #12]
 80084bc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084be:	68f3      	ldr	r3, [r6, #12]
 80084c0:	b183      	cbz	r3, 80084e4 <_Balloc+0x50>
 80084c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084ca:	b9b8      	cbnz	r0, 80084fc <_Balloc+0x68>
 80084cc:	2101      	movs	r1, #1
 80084ce:	fa01 f605 	lsl.w	r6, r1, r5
 80084d2:	1d72      	adds	r2, r6, #5
 80084d4:	0092      	lsls	r2, r2, #2
 80084d6:	4620      	mov	r0, r4
 80084d8:	f000 fb60 	bl	8008b9c <_calloc_r>
 80084dc:	b160      	cbz	r0, 80084f8 <_Balloc+0x64>
 80084de:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80084e2:	e00e      	b.n	8008502 <_Balloc+0x6e>
 80084e4:	2221      	movs	r2, #33	; 0x21
 80084e6:	2104      	movs	r1, #4
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fb57 	bl	8008b9c <_calloc_r>
 80084ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f0:	60f0      	str	r0, [r6, #12]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1e4      	bne.n	80084c2 <_Balloc+0x2e>
 80084f8:	2000      	movs	r0, #0
 80084fa:	bd70      	pop	{r4, r5, r6, pc}
 80084fc:	6802      	ldr	r2, [r0, #0]
 80084fe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008502:	2300      	movs	r3, #0
 8008504:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008508:	e7f7      	b.n	80084fa <_Balloc+0x66>
 800850a:	bf00      	nop
 800850c:	0800979d 	.word	0x0800979d
 8008510:	08009880 	.word	0x08009880

08008514 <_Bfree>:
 8008514:	b570      	push	{r4, r5, r6, lr}
 8008516:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008518:	4605      	mov	r5, r0
 800851a:	460c      	mov	r4, r1
 800851c:	b976      	cbnz	r6, 800853c <_Bfree+0x28>
 800851e:	2010      	movs	r0, #16
 8008520:	f7ff ffa2 	bl	8008468 <malloc>
 8008524:	4602      	mov	r2, r0
 8008526:	6268      	str	r0, [r5, #36]	; 0x24
 8008528:	b920      	cbnz	r0, 8008534 <_Bfree+0x20>
 800852a:	4b09      	ldr	r3, [pc, #36]	; (8008550 <_Bfree+0x3c>)
 800852c:	4809      	ldr	r0, [pc, #36]	; (8008554 <_Bfree+0x40>)
 800852e:	218a      	movs	r1, #138	; 0x8a
 8008530:	f000 feaa 	bl	8009288 <__assert_func>
 8008534:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008538:	6006      	str	r6, [r0, #0]
 800853a:	60c6      	str	r6, [r0, #12]
 800853c:	b13c      	cbz	r4, 800854e <_Bfree+0x3a>
 800853e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008540:	6862      	ldr	r2, [r4, #4]
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008548:	6021      	str	r1, [r4, #0]
 800854a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800854e:	bd70      	pop	{r4, r5, r6, pc}
 8008550:	0800979d 	.word	0x0800979d
 8008554:	08009880 	.word	0x08009880

08008558 <__multadd>:
 8008558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800855c:	690d      	ldr	r5, [r1, #16]
 800855e:	4607      	mov	r7, r0
 8008560:	460c      	mov	r4, r1
 8008562:	461e      	mov	r6, r3
 8008564:	f101 0c14 	add.w	ip, r1, #20
 8008568:	2000      	movs	r0, #0
 800856a:	f8dc 3000 	ldr.w	r3, [ip]
 800856e:	b299      	uxth	r1, r3
 8008570:	fb02 6101 	mla	r1, r2, r1, r6
 8008574:	0c1e      	lsrs	r6, r3, #16
 8008576:	0c0b      	lsrs	r3, r1, #16
 8008578:	fb02 3306 	mla	r3, r2, r6, r3
 800857c:	b289      	uxth	r1, r1
 800857e:	3001      	adds	r0, #1
 8008580:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008584:	4285      	cmp	r5, r0
 8008586:	f84c 1b04 	str.w	r1, [ip], #4
 800858a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800858e:	dcec      	bgt.n	800856a <__multadd+0x12>
 8008590:	b30e      	cbz	r6, 80085d6 <__multadd+0x7e>
 8008592:	68a3      	ldr	r3, [r4, #8]
 8008594:	42ab      	cmp	r3, r5
 8008596:	dc19      	bgt.n	80085cc <__multadd+0x74>
 8008598:	6861      	ldr	r1, [r4, #4]
 800859a:	4638      	mov	r0, r7
 800859c:	3101      	adds	r1, #1
 800859e:	f7ff ff79 	bl	8008494 <_Balloc>
 80085a2:	4680      	mov	r8, r0
 80085a4:	b928      	cbnz	r0, 80085b2 <__multadd+0x5a>
 80085a6:	4602      	mov	r2, r0
 80085a8:	4b0c      	ldr	r3, [pc, #48]	; (80085dc <__multadd+0x84>)
 80085aa:	480d      	ldr	r0, [pc, #52]	; (80085e0 <__multadd+0x88>)
 80085ac:	21b5      	movs	r1, #181	; 0xb5
 80085ae:	f000 fe6b 	bl	8009288 <__assert_func>
 80085b2:	6922      	ldr	r2, [r4, #16]
 80085b4:	3202      	adds	r2, #2
 80085b6:	f104 010c 	add.w	r1, r4, #12
 80085ba:	0092      	lsls	r2, r2, #2
 80085bc:	300c      	adds	r0, #12
 80085be:	f7ff ff5b 	bl	8008478 <memcpy>
 80085c2:	4621      	mov	r1, r4
 80085c4:	4638      	mov	r0, r7
 80085c6:	f7ff ffa5 	bl	8008514 <_Bfree>
 80085ca:	4644      	mov	r4, r8
 80085cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80085d0:	3501      	adds	r5, #1
 80085d2:	615e      	str	r6, [r3, #20]
 80085d4:	6125      	str	r5, [r4, #16]
 80085d6:	4620      	mov	r0, r4
 80085d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80085dc:	0800980f 	.word	0x0800980f
 80085e0:	08009880 	.word	0x08009880

080085e4 <__hi0bits>:
 80085e4:	0c03      	lsrs	r3, r0, #16
 80085e6:	041b      	lsls	r3, r3, #16
 80085e8:	b9d3      	cbnz	r3, 8008620 <__hi0bits+0x3c>
 80085ea:	0400      	lsls	r0, r0, #16
 80085ec:	2310      	movs	r3, #16
 80085ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085f2:	bf04      	itt	eq
 80085f4:	0200      	lsleq	r0, r0, #8
 80085f6:	3308      	addeq	r3, #8
 80085f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085fc:	bf04      	itt	eq
 80085fe:	0100      	lsleq	r0, r0, #4
 8008600:	3304      	addeq	r3, #4
 8008602:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008606:	bf04      	itt	eq
 8008608:	0080      	lsleq	r0, r0, #2
 800860a:	3302      	addeq	r3, #2
 800860c:	2800      	cmp	r0, #0
 800860e:	db05      	blt.n	800861c <__hi0bits+0x38>
 8008610:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008614:	f103 0301 	add.w	r3, r3, #1
 8008618:	bf08      	it	eq
 800861a:	2320      	moveq	r3, #32
 800861c:	4618      	mov	r0, r3
 800861e:	4770      	bx	lr
 8008620:	2300      	movs	r3, #0
 8008622:	e7e4      	b.n	80085ee <__hi0bits+0xa>

08008624 <__lo0bits>:
 8008624:	6803      	ldr	r3, [r0, #0]
 8008626:	f013 0207 	ands.w	r2, r3, #7
 800862a:	4601      	mov	r1, r0
 800862c:	d00b      	beq.n	8008646 <__lo0bits+0x22>
 800862e:	07da      	lsls	r2, r3, #31
 8008630:	d423      	bmi.n	800867a <__lo0bits+0x56>
 8008632:	0798      	lsls	r0, r3, #30
 8008634:	bf49      	itett	mi
 8008636:	085b      	lsrmi	r3, r3, #1
 8008638:	089b      	lsrpl	r3, r3, #2
 800863a:	2001      	movmi	r0, #1
 800863c:	600b      	strmi	r3, [r1, #0]
 800863e:	bf5c      	itt	pl
 8008640:	600b      	strpl	r3, [r1, #0]
 8008642:	2002      	movpl	r0, #2
 8008644:	4770      	bx	lr
 8008646:	b298      	uxth	r0, r3
 8008648:	b9a8      	cbnz	r0, 8008676 <__lo0bits+0x52>
 800864a:	0c1b      	lsrs	r3, r3, #16
 800864c:	2010      	movs	r0, #16
 800864e:	b2da      	uxtb	r2, r3
 8008650:	b90a      	cbnz	r2, 8008656 <__lo0bits+0x32>
 8008652:	3008      	adds	r0, #8
 8008654:	0a1b      	lsrs	r3, r3, #8
 8008656:	071a      	lsls	r2, r3, #28
 8008658:	bf04      	itt	eq
 800865a:	091b      	lsreq	r3, r3, #4
 800865c:	3004      	addeq	r0, #4
 800865e:	079a      	lsls	r2, r3, #30
 8008660:	bf04      	itt	eq
 8008662:	089b      	lsreq	r3, r3, #2
 8008664:	3002      	addeq	r0, #2
 8008666:	07da      	lsls	r2, r3, #31
 8008668:	d403      	bmi.n	8008672 <__lo0bits+0x4e>
 800866a:	085b      	lsrs	r3, r3, #1
 800866c:	f100 0001 	add.w	r0, r0, #1
 8008670:	d005      	beq.n	800867e <__lo0bits+0x5a>
 8008672:	600b      	str	r3, [r1, #0]
 8008674:	4770      	bx	lr
 8008676:	4610      	mov	r0, r2
 8008678:	e7e9      	b.n	800864e <__lo0bits+0x2a>
 800867a:	2000      	movs	r0, #0
 800867c:	4770      	bx	lr
 800867e:	2020      	movs	r0, #32
 8008680:	4770      	bx	lr
	...

08008684 <__i2b>:
 8008684:	b510      	push	{r4, lr}
 8008686:	460c      	mov	r4, r1
 8008688:	2101      	movs	r1, #1
 800868a:	f7ff ff03 	bl	8008494 <_Balloc>
 800868e:	4602      	mov	r2, r0
 8008690:	b928      	cbnz	r0, 800869e <__i2b+0x1a>
 8008692:	4b05      	ldr	r3, [pc, #20]	; (80086a8 <__i2b+0x24>)
 8008694:	4805      	ldr	r0, [pc, #20]	; (80086ac <__i2b+0x28>)
 8008696:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800869a:	f000 fdf5 	bl	8009288 <__assert_func>
 800869e:	2301      	movs	r3, #1
 80086a0:	6144      	str	r4, [r0, #20]
 80086a2:	6103      	str	r3, [r0, #16]
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	bf00      	nop
 80086a8:	0800980f 	.word	0x0800980f
 80086ac:	08009880 	.word	0x08009880

080086b0 <__multiply>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	4691      	mov	r9, r2
 80086b6:	690a      	ldr	r2, [r1, #16]
 80086b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80086bc:	429a      	cmp	r2, r3
 80086be:	bfb8      	it	lt
 80086c0:	460b      	movlt	r3, r1
 80086c2:	460c      	mov	r4, r1
 80086c4:	bfbc      	itt	lt
 80086c6:	464c      	movlt	r4, r9
 80086c8:	4699      	movlt	r9, r3
 80086ca:	6927      	ldr	r7, [r4, #16]
 80086cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80086d0:	68a3      	ldr	r3, [r4, #8]
 80086d2:	6861      	ldr	r1, [r4, #4]
 80086d4:	eb07 060a 	add.w	r6, r7, sl
 80086d8:	42b3      	cmp	r3, r6
 80086da:	b085      	sub	sp, #20
 80086dc:	bfb8      	it	lt
 80086de:	3101      	addlt	r1, #1
 80086e0:	f7ff fed8 	bl	8008494 <_Balloc>
 80086e4:	b930      	cbnz	r0, 80086f4 <__multiply+0x44>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b44      	ldr	r3, [pc, #272]	; (80087fc <__multiply+0x14c>)
 80086ea:	4845      	ldr	r0, [pc, #276]	; (8008800 <__multiply+0x150>)
 80086ec:	f240 115d 	movw	r1, #349	; 0x15d
 80086f0:	f000 fdca 	bl	8009288 <__assert_func>
 80086f4:	f100 0514 	add.w	r5, r0, #20
 80086f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80086fc:	462b      	mov	r3, r5
 80086fe:	2200      	movs	r2, #0
 8008700:	4543      	cmp	r3, r8
 8008702:	d321      	bcc.n	8008748 <__multiply+0x98>
 8008704:	f104 0314 	add.w	r3, r4, #20
 8008708:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800870c:	f109 0314 	add.w	r3, r9, #20
 8008710:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008714:	9202      	str	r2, [sp, #8]
 8008716:	1b3a      	subs	r2, r7, r4
 8008718:	3a15      	subs	r2, #21
 800871a:	f022 0203 	bic.w	r2, r2, #3
 800871e:	3204      	adds	r2, #4
 8008720:	f104 0115 	add.w	r1, r4, #21
 8008724:	428f      	cmp	r7, r1
 8008726:	bf38      	it	cc
 8008728:	2204      	movcc	r2, #4
 800872a:	9201      	str	r2, [sp, #4]
 800872c:	9a02      	ldr	r2, [sp, #8]
 800872e:	9303      	str	r3, [sp, #12]
 8008730:	429a      	cmp	r2, r3
 8008732:	d80c      	bhi.n	800874e <__multiply+0x9e>
 8008734:	2e00      	cmp	r6, #0
 8008736:	dd03      	ble.n	8008740 <__multiply+0x90>
 8008738:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800873c:	2b00      	cmp	r3, #0
 800873e:	d05a      	beq.n	80087f6 <__multiply+0x146>
 8008740:	6106      	str	r6, [r0, #16]
 8008742:	b005      	add	sp, #20
 8008744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008748:	f843 2b04 	str.w	r2, [r3], #4
 800874c:	e7d8      	b.n	8008700 <__multiply+0x50>
 800874e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008752:	f1ba 0f00 	cmp.w	sl, #0
 8008756:	d024      	beq.n	80087a2 <__multiply+0xf2>
 8008758:	f104 0e14 	add.w	lr, r4, #20
 800875c:	46a9      	mov	r9, r5
 800875e:	f04f 0c00 	mov.w	ip, #0
 8008762:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008766:	f8d9 1000 	ldr.w	r1, [r9]
 800876a:	fa1f fb82 	uxth.w	fp, r2
 800876e:	b289      	uxth	r1, r1
 8008770:	fb0a 110b 	mla	r1, sl, fp, r1
 8008774:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008778:	f8d9 2000 	ldr.w	r2, [r9]
 800877c:	4461      	add	r1, ip
 800877e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008782:	fb0a c20b 	mla	r2, sl, fp, ip
 8008786:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800878a:	b289      	uxth	r1, r1
 800878c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008790:	4577      	cmp	r7, lr
 8008792:	f849 1b04 	str.w	r1, [r9], #4
 8008796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800879a:	d8e2      	bhi.n	8008762 <__multiply+0xb2>
 800879c:	9a01      	ldr	r2, [sp, #4]
 800879e:	f845 c002 	str.w	ip, [r5, r2]
 80087a2:	9a03      	ldr	r2, [sp, #12]
 80087a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80087a8:	3304      	adds	r3, #4
 80087aa:	f1b9 0f00 	cmp.w	r9, #0
 80087ae:	d020      	beq.n	80087f2 <__multiply+0x142>
 80087b0:	6829      	ldr	r1, [r5, #0]
 80087b2:	f104 0c14 	add.w	ip, r4, #20
 80087b6:	46ae      	mov	lr, r5
 80087b8:	f04f 0a00 	mov.w	sl, #0
 80087bc:	f8bc b000 	ldrh.w	fp, [ip]
 80087c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80087c4:	fb09 220b 	mla	r2, r9, fp, r2
 80087c8:	4492      	add	sl, r2
 80087ca:	b289      	uxth	r1, r1
 80087cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80087d0:	f84e 1b04 	str.w	r1, [lr], #4
 80087d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80087d8:	f8be 1000 	ldrh.w	r1, [lr]
 80087dc:	0c12      	lsrs	r2, r2, #16
 80087de:	fb09 1102 	mla	r1, r9, r2, r1
 80087e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80087e6:	4567      	cmp	r7, ip
 80087e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80087ec:	d8e6      	bhi.n	80087bc <__multiply+0x10c>
 80087ee:	9a01      	ldr	r2, [sp, #4]
 80087f0:	50a9      	str	r1, [r5, r2]
 80087f2:	3504      	adds	r5, #4
 80087f4:	e79a      	b.n	800872c <__multiply+0x7c>
 80087f6:	3e01      	subs	r6, #1
 80087f8:	e79c      	b.n	8008734 <__multiply+0x84>
 80087fa:	bf00      	nop
 80087fc:	0800980f 	.word	0x0800980f
 8008800:	08009880 	.word	0x08009880

08008804 <__pow5mult>:
 8008804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008808:	4615      	mov	r5, r2
 800880a:	f012 0203 	ands.w	r2, r2, #3
 800880e:	4606      	mov	r6, r0
 8008810:	460f      	mov	r7, r1
 8008812:	d007      	beq.n	8008824 <__pow5mult+0x20>
 8008814:	4c25      	ldr	r4, [pc, #148]	; (80088ac <__pow5mult+0xa8>)
 8008816:	3a01      	subs	r2, #1
 8008818:	2300      	movs	r3, #0
 800881a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800881e:	f7ff fe9b 	bl	8008558 <__multadd>
 8008822:	4607      	mov	r7, r0
 8008824:	10ad      	asrs	r5, r5, #2
 8008826:	d03d      	beq.n	80088a4 <__pow5mult+0xa0>
 8008828:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800882a:	b97c      	cbnz	r4, 800884c <__pow5mult+0x48>
 800882c:	2010      	movs	r0, #16
 800882e:	f7ff fe1b 	bl	8008468 <malloc>
 8008832:	4602      	mov	r2, r0
 8008834:	6270      	str	r0, [r6, #36]	; 0x24
 8008836:	b928      	cbnz	r0, 8008844 <__pow5mult+0x40>
 8008838:	4b1d      	ldr	r3, [pc, #116]	; (80088b0 <__pow5mult+0xac>)
 800883a:	481e      	ldr	r0, [pc, #120]	; (80088b4 <__pow5mult+0xb0>)
 800883c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008840:	f000 fd22 	bl	8009288 <__assert_func>
 8008844:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008848:	6004      	str	r4, [r0, #0]
 800884a:	60c4      	str	r4, [r0, #12]
 800884c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008850:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008854:	b94c      	cbnz	r4, 800886a <__pow5mult+0x66>
 8008856:	f240 2171 	movw	r1, #625	; 0x271
 800885a:	4630      	mov	r0, r6
 800885c:	f7ff ff12 	bl	8008684 <__i2b>
 8008860:	2300      	movs	r3, #0
 8008862:	f8c8 0008 	str.w	r0, [r8, #8]
 8008866:	4604      	mov	r4, r0
 8008868:	6003      	str	r3, [r0, #0]
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	07eb      	lsls	r3, r5, #31
 8008870:	d50a      	bpl.n	8008888 <__pow5mult+0x84>
 8008872:	4639      	mov	r1, r7
 8008874:	4622      	mov	r2, r4
 8008876:	4630      	mov	r0, r6
 8008878:	f7ff ff1a 	bl	80086b0 <__multiply>
 800887c:	4639      	mov	r1, r7
 800887e:	4680      	mov	r8, r0
 8008880:	4630      	mov	r0, r6
 8008882:	f7ff fe47 	bl	8008514 <_Bfree>
 8008886:	4647      	mov	r7, r8
 8008888:	106d      	asrs	r5, r5, #1
 800888a:	d00b      	beq.n	80088a4 <__pow5mult+0xa0>
 800888c:	6820      	ldr	r0, [r4, #0]
 800888e:	b938      	cbnz	r0, 80088a0 <__pow5mult+0x9c>
 8008890:	4622      	mov	r2, r4
 8008892:	4621      	mov	r1, r4
 8008894:	4630      	mov	r0, r6
 8008896:	f7ff ff0b 	bl	80086b0 <__multiply>
 800889a:	6020      	str	r0, [r4, #0]
 800889c:	f8c0 9000 	str.w	r9, [r0]
 80088a0:	4604      	mov	r4, r0
 80088a2:	e7e4      	b.n	800886e <__pow5mult+0x6a>
 80088a4:	4638      	mov	r0, r7
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	bf00      	nop
 80088ac:	080099d0 	.word	0x080099d0
 80088b0:	0800979d 	.word	0x0800979d
 80088b4:	08009880 	.word	0x08009880

080088b8 <__lshift>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	460c      	mov	r4, r1
 80088be:	6849      	ldr	r1, [r1, #4]
 80088c0:	6923      	ldr	r3, [r4, #16]
 80088c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80088c6:	68a3      	ldr	r3, [r4, #8]
 80088c8:	4607      	mov	r7, r0
 80088ca:	4691      	mov	r9, r2
 80088cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80088d0:	f108 0601 	add.w	r6, r8, #1
 80088d4:	42b3      	cmp	r3, r6
 80088d6:	db0b      	blt.n	80088f0 <__lshift+0x38>
 80088d8:	4638      	mov	r0, r7
 80088da:	f7ff fddb 	bl	8008494 <_Balloc>
 80088de:	4605      	mov	r5, r0
 80088e0:	b948      	cbnz	r0, 80088f6 <__lshift+0x3e>
 80088e2:	4602      	mov	r2, r0
 80088e4:	4b2a      	ldr	r3, [pc, #168]	; (8008990 <__lshift+0xd8>)
 80088e6:	482b      	ldr	r0, [pc, #172]	; (8008994 <__lshift+0xdc>)
 80088e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80088ec:	f000 fccc 	bl	8009288 <__assert_func>
 80088f0:	3101      	adds	r1, #1
 80088f2:	005b      	lsls	r3, r3, #1
 80088f4:	e7ee      	b.n	80088d4 <__lshift+0x1c>
 80088f6:	2300      	movs	r3, #0
 80088f8:	f100 0114 	add.w	r1, r0, #20
 80088fc:	f100 0210 	add.w	r2, r0, #16
 8008900:	4618      	mov	r0, r3
 8008902:	4553      	cmp	r3, sl
 8008904:	db37      	blt.n	8008976 <__lshift+0xbe>
 8008906:	6920      	ldr	r0, [r4, #16]
 8008908:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800890c:	f104 0314 	add.w	r3, r4, #20
 8008910:	f019 091f 	ands.w	r9, r9, #31
 8008914:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008918:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800891c:	d02f      	beq.n	800897e <__lshift+0xc6>
 800891e:	f1c9 0e20 	rsb	lr, r9, #32
 8008922:	468a      	mov	sl, r1
 8008924:	f04f 0c00 	mov.w	ip, #0
 8008928:	681a      	ldr	r2, [r3, #0]
 800892a:	fa02 f209 	lsl.w	r2, r2, r9
 800892e:	ea42 020c 	orr.w	r2, r2, ip
 8008932:	f84a 2b04 	str.w	r2, [sl], #4
 8008936:	f853 2b04 	ldr.w	r2, [r3], #4
 800893a:	4298      	cmp	r0, r3
 800893c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008940:	d8f2      	bhi.n	8008928 <__lshift+0x70>
 8008942:	1b03      	subs	r3, r0, r4
 8008944:	3b15      	subs	r3, #21
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	3304      	adds	r3, #4
 800894c:	f104 0215 	add.w	r2, r4, #21
 8008950:	4290      	cmp	r0, r2
 8008952:	bf38      	it	cc
 8008954:	2304      	movcc	r3, #4
 8008956:	f841 c003 	str.w	ip, [r1, r3]
 800895a:	f1bc 0f00 	cmp.w	ip, #0
 800895e:	d001      	beq.n	8008964 <__lshift+0xac>
 8008960:	f108 0602 	add.w	r6, r8, #2
 8008964:	3e01      	subs	r6, #1
 8008966:	4638      	mov	r0, r7
 8008968:	612e      	str	r6, [r5, #16]
 800896a:	4621      	mov	r1, r4
 800896c:	f7ff fdd2 	bl	8008514 <_Bfree>
 8008970:	4628      	mov	r0, r5
 8008972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008976:	f842 0f04 	str.w	r0, [r2, #4]!
 800897a:	3301      	adds	r3, #1
 800897c:	e7c1      	b.n	8008902 <__lshift+0x4a>
 800897e:	3904      	subs	r1, #4
 8008980:	f853 2b04 	ldr.w	r2, [r3], #4
 8008984:	f841 2f04 	str.w	r2, [r1, #4]!
 8008988:	4298      	cmp	r0, r3
 800898a:	d8f9      	bhi.n	8008980 <__lshift+0xc8>
 800898c:	e7ea      	b.n	8008964 <__lshift+0xac>
 800898e:	bf00      	nop
 8008990:	0800980f 	.word	0x0800980f
 8008994:	08009880 	.word	0x08009880

08008998 <__mcmp>:
 8008998:	b530      	push	{r4, r5, lr}
 800899a:	6902      	ldr	r2, [r0, #16]
 800899c:	690c      	ldr	r4, [r1, #16]
 800899e:	1b12      	subs	r2, r2, r4
 80089a0:	d10e      	bne.n	80089c0 <__mcmp+0x28>
 80089a2:	f100 0314 	add.w	r3, r0, #20
 80089a6:	3114      	adds	r1, #20
 80089a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80089ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80089b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80089b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80089b8:	42a5      	cmp	r5, r4
 80089ba:	d003      	beq.n	80089c4 <__mcmp+0x2c>
 80089bc:	d305      	bcc.n	80089ca <__mcmp+0x32>
 80089be:	2201      	movs	r2, #1
 80089c0:	4610      	mov	r0, r2
 80089c2:	bd30      	pop	{r4, r5, pc}
 80089c4:	4283      	cmp	r3, r0
 80089c6:	d3f3      	bcc.n	80089b0 <__mcmp+0x18>
 80089c8:	e7fa      	b.n	80089c0 <__mcmp+0x28>
 80089ca:	f04f 32ff 	mov.w	r2, #4294967295
 80089ce:	e7f7      	b.n	80089c0 <__mcmp+0x28>

080089d0 <__mdiff>:
 80089d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	460c      	mov	r4, r1
 80089d6:	4606      	mov	r6, r0
 80089d8:	4611      	mov	r1, r2
 80089da:	4620      	mov	r0, r4
 80089dc:	4690      	mov	r8, r2
 80089de:	f7ff ffdb 	bl	8008998 <__mcmp>
 80089e2:	1e05      	subs	r5, r0, #0
 80089e4:	d110      	bne.n	8008a08 <__mdiff+0x38>
 80089e6:	4629      	mov	r1, r5
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff fd53 	bl	8008494 <_Balloc>
 80089ee:	b930      	cbnz	r0, 80089fe <__mdiff+0x2e>
 80089f0:	4b3a      	ldr	r3, [pc, #232]	; (8008adc <__mdiff+0x10c>)
 80089f2:	4602      	mov	r2, r0
 80089f4:	f240 2132 	movw	r1, #562	; 0x232
 80089f8:	4839      	ldr	r0, [pc, #228]	; (8008ae0 <__mdiff+0x110>)
 80089fa:	f000 fc45 	bl	8009288 <__assert_func>
 80089fe:	2301      	movs	r3, #1
 8008a00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008a04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a08:	bfa4      	itt	ge
 8008a0a:	4643      	movge	r3, r8
 8008a0c:	46a0      	movge	r8, r4
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a14:	bfa6      	itte	ge
 8008a16:	461c      	movge	r4, r3
 8008a18:	2500      	movge	r5, #0
 8008a1a:	2501      	movlt	r5, #1
 8008a1c:	f7ff fd3a 	bl	8008494 <_Balloc>
 8008a20:	b920      	cbnz	r0, 8008a2c <__mdiff+0x5c>
 8008a22:	4b2e      	ldr	r3, [pc, #184]	; (8008adc <__mdiff+0x10c>)
 8008a24:	4602      	mov	r2, r0
 8008a26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008a2a:	e7e5      	b.n	80089f8 <__mdiff+0x28>
 8008a2c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a30:	6926      	ldr	r6, [r4, #16]
 8008a32:	60c5      	str	r5, [r0, #12]
 8008a34:	f104 0914 	add.w	r9, r4, #20
 8008a38:	f108 0514 	add.w	r5, r8, #20
 8008a3c:	f100 0e14 	add.w	lr, r0, #20
 8008a40:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008a44:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008a48:	f108 0210 	add.w	r2, r8, #16
 8008a4c:	46f2      	mov	sl, lr
 8008a4e:	2100      	movs	r1, #0
 8008a50:	f859 3b04 	ldr.w	r3, [r9], #4
 8008a54:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008a58:	fa1f f883 	uxth.w	r8, r3
 8008a5c:	fa11 f18b 	uxtah	r1, r1, fp
 8008a60:	0c1b      	lsrs	r3, r3, #16
 8008a62:	eba1 0808 	sub.w	r8, r1, r8
 8008a66:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008a6a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008a6e:	fa1f f888 	uxth.w	r8, r8
 8008a72:	1419      	asrs	r1, r3, #16
 8008a74:	454e      	cmp	r6, r9
 8008a76:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008a7a:	f84a 3b04 	str.w	r3, [sl], #4
 8008a7e:	d8e7      	bhi.n	8008a50 <__mdiff+0x80>
 8008a80:	1b33      	subs	r3, r6, r4
 8008a82:	3b15      	subs	r3, #21
 8008a84:	f023 0303 	bic.w	r3, r3, #3
 8008a88:	3304      	adds	r3, #4
 8008a8a:	3415      	adds	r4, #21
 8008a8c:	42a6      	cmp	r6, r4
 8008a8e:	bf38      	it	cc
 8008a90:	2304      	movcc	r3, #4
 8008a92:	441d      	add	r5, r3
 8008a94:	4473      	add	r3, lr
 8008a96:	469e      	mov	lr, r3
 8008a98:	462e      	mov	r6, r5
 8008a9a:	4566      	cmp	r6, ip
 8008a9c:	d30e      	bcc.n	8008abc <__mdiff+0xec>
 8008a9e:	f10c 0203 	add.w	r2, ip, #3
 8008aa2:	1b52      	subs	r2, r2, r5
 8008aa4:	f022 0203 	bic.w	r2, r2, #3
 8008aa8:	3d03      	subs	r5, #3
 8008aaa:	45ac      	cmp	ip, r5
 8008aac:	bf38      	it	cc
 8008aae:	2200      	movcc	r2, #0
 8008ab0:	441a      	add	r2, r3
 8008ab2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008ab6:	b17b      	cbz	r3, 8008ad8 <__mdiff+0x108>
 8008ab8:	6107      	str	r7, [r0, #16]
 8008aba:	e7a3      	b.n	8008a04 <__mdiff+0x34>
 8008abc:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ac0:	fa11 f288 	uxtah	r2, r1, r8
 8008ac4:	1414      	asrs	r4, r2, #16
 8008ac6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008aca:	b292      	uxth	r2, r2
 8008acc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ad0:	f84e 2b04 	str.w	r2, [lr], #4
 8008ad4:	1421      	asrs	r1, r4, #16
 8008ad6:	e7e0      	b.n	8008a9a <__mdiff+0xca>
 8008ad8:	3f01      	subs	r7, #1
 8008ada:	e7ea      	b.n	8008ab2 <__mdiff+0xe2>
 8008adc:	0800980f 	.word	0x0800980f
 8008ae0:	08009880 	.word	0x08009880

08008ae4 <__d2b>:
 8008ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ae8:	4689      	mov	r9, r1
 8008aea:	2101      	movs	r1, #1
 8008aec:	ec57 6b10 	vmov	r6, r7, d0
 8008af0:	4690      	mov	r8, r2
 8008af2:	f7ff fccf 	bl	8008494 <_Balloc>
 8008af6:	4604      	mov	r4, r0
 8008af8:	b930      	cbnz	r0, 8008b08 <__d2b+0x24>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b25      	ldr	r3, [pc, #148]	; (8008b94 <__d2b+0xb0>)
 8008afe:	4826      	ldr	r0, [pc, #152]	; (8008b98 <__d2b+0xb4>)
 8008b00:	f240 310a 	movw	r1, #778	; 0x30a
 8008b04:	f000 fbc0 	bl	8009288 <__assert_func>
 8008b08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008b10:	bb35      	cbnz	r5, 8008b60 <__d2b+0x7c>
 8008b12:	2e00      	cmp	r6, #0
 8008b14:	9301      	str	r3, [sp, #4]
 8008b16:	d028      	beq.n	8008b6a <__d2b+0x86>
 8008b18:	4668      	mov	r0, sp
 8008b1a:	9600      	str	r6, [sp, #0]
 8008b1c:	f7ff fd82 	bl	8008624 <__lo0bits>
 8008b20:	9900      	ldr	r1, [sp, #0]
 8008b22:	b300      	cbz	r0, 8008b66 <__d2b+0x82>
 8008b24:	9a01      	ldr	r2, [sp, #4]
 8008b26:	f1c0 0320 	rsb	r3, r0, #32
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	430b      	orrs	r3, r1
 8008b30:	40c2      	lsrs	r2, r0
 8008b32:	6163      	str	r3, [r4, #20]
 8008b34:	9201      	str	r2, [sp, #4]
 8008b36:	9b01      	ldr	r3, [sp, #4]
 8008b38:	61a3      	str	r3, [r4, #24]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	bf14      	ite	ne
 8008b3e:	2202      	movne	r2, #2
 8008b40:	2201      	moveq	r2, #1
 8008b42:	6122      	str	r2, [r4, #16]
 8008b44:	b1d5      	cbz	r5, 8008b7c <__d2b+0x98>
 8008b46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008b4a:	4405      	add	r5, r0
 8008b4c:	f8c9 5000 	str.w	r5, [r9]
 8008b50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008b54:	f8c8 0000 	str.w	r0, [r8]
 8008b58:	4620      	mov	r0, r4
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b64:	e7d5      	b.n	8008b12 <__d2b+0x2e>
 8008b66:	6161      	str	r1, [r4, #20]
 8008b68:	e7e5      	b.n	8008b36 <__d2b+0x52>
 8008b6a:	a801      	add	r0, sp, #4
 8008b6c:	f7ff fd5a 	bl	8008624 <__lo0bits>
 8008b70:	9b01      	ldr	r3, [sp, #4]
 8008b72:	6163      	str	r3, [r4, #20]
 8008b74:	2201      	movs	r2, #1
 8008b76:	6122      	str	r2, [r4, #16]
 8008b78:	3020      	adds	r0, #32
 8008b7a:	e7e3      	b.n	8008b44 <__d2b+0x60>
 8008b7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008b84:	f8c9 0000 	str.w	r0, [r9]
 8008b88:	6918      	ldr	r0, [r3, #16]
 8008b8a:	f7ff fd2b 	bl	80085e4 <__hi0bits>
 8008b8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b92:	e7df      	b.n	8008b54 <__d2b+0x70>
 8008b94:	0800980f 	.word	0x0800980f
 8008b98:	08009880 	.word	0x08009880

08008b9c <_calloc_r>:
 8008b9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b9e:	fba1 2402 	umull	r2, r4, r1, r2
 8008ba2:	b94c      	cbnz	r4, 8008bb8 <_calloc_r+0x1c>
 8008ba4:	4611      	mov	r1, r2
 8008ba6:	9201      	str	r2, [sp, #4]
 8008ba8:	f000 f87a 	bl	8008ca0 <_malloc_r>
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	4605      	mov	r5, r0
 8008bb0:	b930      	cbnz	r0, 8008bc0 <_calloc_r+0x24>
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	b003      	add	sp, #12
 8008bb6:	bd30      	pop	{r4, r5, pc}
 8008bb8:	220c      	movs	r2, #12
 8008bba:	6002      	str	r2, [r0, #0]
 8008bbc:	2500      	movs	r5, #0
 8008bbe:	e7f8      	b.n	8008bb2 <_calloc_r+0x16>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	f7fe f867 	bl	8006c94 <memset>
 8008bc6:	e7f4      	b.n	8008bb2 <_calloc_r+0x16>

08008bc8 <_free_r>:
 8008bc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008bca:	2900      	cmp	r1, #0
 8008bcc:	d044      	beq.n	8008c58 <_free_r+0x90>
 8008bce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bd2:	9001      	str	r0, [sp, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f1a1 0404 	sub.w	r4, r1, #4
 8008bda:	bfb8      	it	lt
 8008bdc:	18e4      	addlt	r4, r4, r3
 8008bde:	f000 fcdf 	bl	80095a0 <__malloc_lock>
 8008be2:	4a1e      	ldr	r2, [pc, #120]	; (8008c5c <_free_r+0x94>)
 8008be4:	9801      	ldr	r0, [sp, #4]
 8008be6:	6813      	ldr	r3, [r2, #0]
 8008be8:	b933      	cbnz	r3, 8008bf8 <_free_r+0x30>
 8008bea:	6063      	str	r3, [r4, #4]
 8008bec:	6014      	str	r4, [r2, #0]
 8008bee:	b003      	add	sp, #12
 8008bf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bf4:	f000 bcda 	b.w	80095ac <__malloc_unlock>
 8008bf8:	42a3      	cmp	r3, r4
 8008bfa:	d908      	bls.n	8008c0e <_free_r+0x46>
 8008bfc:	6825      	ldr	r5, [r4, #0]
 8008bfe:	1961      	adds	r1, r4, r5
 8008c00:	428b      	cmp	r3, r1
 8008c02:	bf01      	itttt	eq
 8008c04:	6819      	ldreq	r1, [r3, #0]
 8008c06:	685b      	ldreq	r3, [r3, #4]
 8008c08:	1949      	addeq	r1, r1, r5
 8008c0a:	6021      	streq	r1, [r4, #0]
 8008c0c:	e7ed      	b.n	8008bea <_free_r+0x22>
 8008c0e:	461a      	mov	r2, r3
 8008c10:	685b      	ldr	r3, [r3, #4]
 8008c12:	b10b      	cbz	r3, 8008c18 <_free_r+0x50>
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	d9fa      	bls.n	8008c0e <_free_r+0x46>
 8008c18:	6811      	ldr	r1, [r2, #0]
 8008c1a:	1855      	adds	r5, r2, r1
 8008c1c:	42a5      	cmp	r5, r4
 8008c1e:	d10b      	bne.n	8008c38 <_free_r+0x70>
 8008c20:	6824      	ldr	r4, [r4, #0]
 8008c22:	4421      	add	r1, r4
 8008c24:	1854      	adds	r4, r2, r1
 8008c26:	42a3      	cmp	r3, r4
 8008c28:	6011      	str	r1, [r2, #0]
 8008c2a:	d1e0      	bne.n	8008bee <_free_r+0x26>
 8008c2c:	681c      	ldr	r4, [r3, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	6053      	str	r3, [r2, #4]
 8008c32:	4421      	add	r1, r4
 8008c34:	6011      	str	r1, [r2, #0]
 8008c36:	e7da      	b.n	8008bee <_free_r+0x26>
 8008c38:	d902      	bls.n	8008c40 <_free_r+0x78>
 8008c3a:	230c      	movs	r3, #12
 8008c3c:	6003      	str	r3, [r0, #0]
 8008c3e:	e7d6      	b.n	8008bee <_free_r+0x26>
 8008c40:	6825      	ldr	r5, [r4, #0]
 8008c42:	1961      	adds	r1, r4, r5
 8008c44:	428b      	cmp	r3, r1
 8008c46:	bf04      	itt	eq
 8008c48:	6819      	ldreq	r1, [r3, #0]
 8008c4a:	685b      	ldreq	r3, [r3, #4]
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	bf04      	itt	eq
 8008c50:	1949      	addeq	r1, r1, r5
 8008c52:	6021      	streq	r1, [r4, #0]
 8008c54:	6054      	str	r4, [r2, #4]
 8008c56:	e7ca      	b.n	8008bee <_free_r+0x26>
 8008c58:	b003      	add	sp, #12
 8008c5a:	bd30      	pop	{r4, r5, pc}
 8008c5c:	20000418 	.word	0x20000418

08008c60 <sbrk_aligned>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	4e0e      	ldr	r6, [pc, #56]	; (8008c9c <sbrk_aligned+0x3c>)
 8008c64:	460c      	mov	r4, r1
 8008c66:	6831      	ldr	r1, [r6, #0]
 8008c68:	4605      	mov	r5, r0
 8008c6a:	b911      	cbnz	r1, 8008c72 <sbrk_aligned+0x12>
 8008c6c:	f000 f9e6 	bl	800903c <_sbrk_r>
 8008c70:	6030      	str	r0, [r6, #0]
 8008c72:	4621      	mov	r1, r4
 8008c74:	4628      	mov	r0, r5
 8008c76:	f000 f9e1 	bl	800903c <_sbrk_r>
 8008c7a:	1c43      	adds	r3, r0, #1
 8008c7c:	d00a      	beq.n	8008c94 <sbrk_aligned+0x34>
 8008c7e:	1cc4      	adds	r4, r0, #3
 8008c80:	f024 0403 	bic.w	r4, r4, #3
 8008c84:	42a0      	cmp	r0, r4
 8008c86:	d007      	beq.n	8008c98 <sbrk_aligned+0x38>
 8008c88:	1a21      	subs	r1, r4, r0
 8008c8a:	4628      	mov	r0, r5
 8008c8c:	f000 f9d6 	bl	800903c <_sbrk_r>
 8008c90:	3001      	adds	r0, #1
 8008c92:	d101      	bne.n	8008c98 <sbrk_aligned+0x38>
 8008c94:	f04f 34ff 	mov.w	r4, #4294967295
 8008c98:	4620      	mov	r0, r4
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	2000041c 	.word	0x2000041c

08008ca0 <_malloc_r>:
 8008ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca4:	1ccd      	adds	r5, r1, #3
 8008ca6:	f025 0503 	bic.w	r5, r5, #3
 8008caa:	3508      	adds	r5, #8
 8008cac:	2d0c      	cmp	r5, #12
 8008cae:	bf38      	it	cc
 8008cb0:	250c      	movcc	r5, #12
 8008cb2:	2d00      	cmp	r5, #0
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	db01      	blt.n	8008cbc <_malloc_r+0x1c>
 8008cb8:	42a9      	cmp	r1, r5
 8008cba:	d905      	bls.n	8008cc8 <_malloc_r+0x28>
 8008cbc:	230c      	movs	r3, #12
 8008cbe:	603b      	str	r3, [r7, #0]
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cc8:	4e2e      	ldr	r6, [pc, #184]	; (8008d84 <_malloc_r+0xe4>)
 8008cca:	f000 fc69 	bl	80095a0 <__malloc_lock>
 8008cce:	6833      	ldr	r3, [r6, #0]
 8008cd0:	461c      	mov	r4, r3
 8008cd2:	bb34      	cbnz	r4, 8008d22 <_malloc_r+0x82>
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	4638      	mov	r0, r7
 8008cd8:	f7ff ffc2 	bl	8008c60 <sbrk_aligned>
 8008cdc:	1c43      	adds	r3, r0, #1
 8008cde:	4604      	mov	r4, r0
 8008ce0:	d14d      	bne.n	8008d7e <_malloc_r+0xde>
 8008ce2:	6834      	ldr	r4, [r6, #0]
 8008ce4:	4626      	mov	r6, r4
 8008ce6:	2e00      	cmp	r6, #0
 8008ce8:	d140      	bne.n	8008d6c <_malloc_r+0xcc>
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	4631      	mov	r1, r6
 8008cee:	4638      	mov	r0, r7
 8008cf0:	eb04 0803 	add.w	r8, r4, r3
 8008cf4:	f000 f9a2 	bl	800903c <_sbrk_r>
 8008cf8:	4580      	cmp	r8, r0
 8008cfa:	d13a      	bne.n	8008d72 <_malloc_r+0xd2>
 8008cfc:	6821      	ldr	r1, [r4, #0]
 8008cfe:	3503      	adds	r5, #3
 8008d00:	1a6d      	subs	r5, r5, r1
 8008d02:	f025 0503 	bic.w	r5, r5, #3
 8008d06:	3508      	adds	r5, #8
 8008d08:	2d0c      	cmp	r5, #12
 8008d0a:	bf38      	it	cc
 8008d0c:	250c      	movcc	r5, #12
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4638      	mov	r0, r7
 8008d12:	f7ff ffa5 	bl	8008c60 <sbrk_aligned>
 8008d16:	3001      	adds	r0, #1
 8008d18:	d02b      	beq.n	8008d72 <_malloc_r+0xd2>
 8008d1a:	6823      	ldr	r3, [r4, #0]
 8008d1c:	442b      	add	r3, r5
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	e00e      	b.n	8008d40 <_malloc_r+0xa0>
 8008d22:	6822      	ldr	r2, [r4, #0]
 8008d24:	1b52      	subs	r2, r2, r5
 8008d26:	d41e      	bmi.n	8008d66 <_malloc_r+0xc6>
 8008d28:	2a0b      	cmp	r2, #11
 8008d2a:	d916      	bls.n	8008d5a <_malloc_r+0xba>
 8008d2c:	1961      	adds	r1, r4, r5
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	6025      	str	r5, [r4, #0]
 8008d32:	bf18      	it	ne
 8008d34:	6059      	strne	r1, [r3, #4]
 8008d36:	6863      	ldr	r3, [r4, #4]
 8008d38:	bf08      	it	eq
 8008d3a:	6031      	streq	r1, [r6, #0]
 8008d3c:	5162      	str	r2, [r4, r5]
 8008d3e:	604b      	str	r3, [r1, #4]
 8008d40:	4638      	mov	r0, r7
 8008d42:	f104 060b 	add.w	r6, r4, #11
 8008d46:	f000 fc31 	bl	80095ac <__malloc_unlock>
 8008d4a:	f026 0607 	bic.w	r6, r6, #7
 8008d4e:	1d23      	adds	r3, r4, #4
 8008d50:	1af2      	subs	r2, r6, r3
 8008d52:	d0b6      	beq.n	8008cc2 <_malloc_r+0x22>
 8008d54:	1b9b      	subs	r3, r3, r6
 8008d56:	50a3      	str	r3, [r4, r2]
 8008d58:	e7b3      	b.n	8008cc2 <_malloc_r+0x22>
 8008d5a:	6862      	ldr	r2, [r4, #4]
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	bf0c      	ite	eq
 8008d60:	6032      	streq	r2, [r6, #0]
 8008d62:	605a      	strne	r2, [r3, #4]
 8008d64:	e7ec      	b.n	8008d40 <_malloc_r+0xa0>
 8008d66:	4623      	mov	r3, r4
 8008d68:	6864      	ldr	r4, [r4, #4]
 8008d6a:	e7b2      	b.n	8008cd2 <_malloc_r+0x32>
 8008d6c:	4634      	mov	r4, r6
 8008d6e:	6876      	ldr	r6, [r6, #4]
 8008d70:	e7b9      	b.n	8008ce6 <_malloc_r+0x46>
 8008d72:	230c      	movs	r3, #12
 8008d74:	603b      	str	r3, [r7, #0]
 8008d76:	4638      	mov	r0, r7
 8008d78:	f000 fc18 	bl	80095ac <__malloc_unlock>
 8008d7c:	e7a1      	b.n	8008cc2 <_malloc_r+0x22>
 8008d7e:	6025      	str	r5, [r4, #0]
 8008d80:	e7de      	b.n	8008d40 <_malloc_r+0xa0>
 8008d82:	bf00      	nop
 8008d84:	20000418 	.word	0x20000418

08008d88 <__sfputc_r>:
 8008d88:	6893      	ldr	r3, [r2, #8]
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	b410      	push	{r4}
 8008d90:	6093      	str	r3, [r2, #8]
 8008d92:	da08      	bge.n	8008da6 <__sfputc_r+0x1e>
 8008d94:	6994      	ldr	r4, [r2, #24]
 8008d96:	42a3      	cmp	r3, r4
 8008d98:	db01      	blt.n	8008d9e <__sfputc_r+0x16>
 8008d9a:	290a      	cmp	r1, #10
 8008d9c:	d103      	bne.n	8008da6 <__sfputc_r+0x1e>
 8008d9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008da2:	f000 b99f 	b.w	80090e4 <__swbuf_r>
 8008da6:	6813      	ldr	r3, [r2, #0]
 8008da8:	1c58      	adds	r0, r3, #1
 8008daa:	6010      	str	r0, [r2, #0]
 8008dac:	7019      	strb	r1, [r3, #0]
 8008dae:	4608      	mov	r0, r1
 8008db0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <__sfputs_r>:
 8008db6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008db8:	4606      	mov	r6, r0
 8008dba:	460f      	mov	r7, r1
 8008dbc:	4614      	mov	r4, r2
 8008dbe:	18d5      	adds	r5, r2, r3
 8008dc0:	42ac      	cmp	r4, r5
 8008dc2:	d101      	bne.n	8008dc8 <__sfputs_r+0x12>
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	e007      	b.n	8008dd8 <__sfputs_r+0x22>
 8008dc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dcc:	463a      	mov	r2, r7
 8008dce:	4630      	mov	r0, r6
 8008dd0:	f7ff ffda 	bl	8008d88 <__sfputc_r>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d1f3      	bne.n	8008dc0 <__sfputs_r+0xa>
 8008dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ddc <_vfiprintf_r>:
 8008ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de0:	460d      	mov	r5, r1
 8008de2:	b09d      	sub	sp, #116	; 0x74
 8008de4:	4614      	mov	r4, r2
 8008de6:	4698      	mov	r8, r3
 8008de8:	4606      	mov	r6, r0
 8008dea:	b118      	cbz	r0, 8008df4 <_vfiprintf_r+0x18>
 8008dec:	6983      	ldr	r3, [r0, #24]
 8008dee:	b90b      	cbnz	r3, 8008df4 <_vfiprintf_r+0x18>
 8008df0:	f7ff fa94 	bl	800831c <__sinit>
 8008df4:	4b89      	ldr	r3, [pc, #548]	; (800901c <_vfiprintf_r+0x240>)
 8008df6:	429d      	cmp	r5, r3
 8008df8:	d11b      	bne.n	8008e32 <_vfiprintf_r+0x56>
 8008dfa:	6875      	ldr	r5, [r6, #4]
 8008dfc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008dfe:	07d9      	lsls	r1, r3, #31
 8008e00:	d405      	bmi.n	8008e0e <_vfiprintf_r+0x32>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	059a      	lsls	r2, r3, #22
 8008e06:	d402      	bmi.n	8008e0e <_vfiprintf_r+0x32>
 8008e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e0a:	f7ff fb2a 	bl	8008462 <__retarget_lock_acquire_recursive>
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	071b      	lsls	r3, r3, #28
 8008e12:	d501      	bpl.n	8008e18 <_vfiprintf_r+0x3c>
 8008e14:	692b      	ldr	r3, [r5, #16]
 8008e16:	b9eb      	cbnz	r3, 8008e54 <_vfiprintf_r+0x78>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f000 f9c6 	bl	80091ac <__swsetup_r>
 8008e20:	b1c0      	cbz	r0, 8008e54 <_vfiprintf_r+0x78>
 8008e22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e24:	07dc      	lsls	r4, r3, #31
 8008e26:	d50e      	bpl.n	8008e46 <_vfiprintf_r+0x6a>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	b01d      	add	sp, #116	; 0x74
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	4b7b      	ldr	r3, [pc, #492]	; (8009020 <_vfiprintf_r+0x244>)
 8008e34:	429d      	cmp	r5, r3
 8008e36:	d101      	bne.n	8008e3c <_vfiprintf_r+0x60>
 8008e38:	68b5      	ldr	r5, [r6, #8]
 8008e3a:	e7df      	b.n	8008dfc <_vfiprintf_r+0x20>
 8008e3c:	4b79      	ldr	r3, [pc, #484]	; (8009024 <_vfiprintf_r+0x248>)
 8008e3e:	429d      	cmp	r5, r3
 8008e40:	bf08      	it	eq
 8008e42:	68f5      	ldreq	r5, [r6, #12]
 8008e44:	e7da      	b.n	8008dfc <_vfiprintf_r+0x20>
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	0598      	lsls	r0, r3, #22
 8008e4a:	d4ed      	bmi.n	8008e28 <_vfiprintf_r+0x4c>
 8008e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e4e:	f7ff fb09 	bl	8008464 <__retarget_lock_release_recursive>
 8008e52:	e7e9      	b.n	8008e28 <_vfiprintf_r+0x4c>
 8008e54:	2300      	movs	r3, #0
 8008e56:	9309      	str	r3, [sp, #36]	; 0x24
 8008e58:	2320      	movs	r3, #32
 8008e5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e62:	2330      	movs	r3, #48	; 0x30
 8008e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009028 <_vfiprintf_r+0x24c>
 8008e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e6c:	f04f 0901 	mov.w	r9, #1
 8008e70:	4623      	mov	r3, r4
 8008e72:	469a      	mov	sl, r3
 8008e74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e78:	b10a      	cbz	r2, 8008e7e <_vfiprintf_r+0xa2>
 8008e7a:	2a25      	cmp	r2, #37	; 0x25
 8008e7c:	d1f9      	bne.n	8008e72 <_vfiprintf_r+0x96>
 8008e7e:	ebba 0b04 	subs.w	fp, sl, r4
 8008e82:	d00b      	beq.n	8008e9c <_vfiprintf_r+0xc0>
 8008e84:	465b      	mov	r3, fp
 8008e86:	4622      	mov	r2, r4
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	f7ff ff93 	bl	8008db6 <__sfputs_r>
 8008e90:	3001      	adds	r0, #1
 8008e92:	f000 80aa 	beq.w	8008fea <_vfiprintf_r+0x20e>
 8008e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008e98:	445a      	add	r2, fp
 8008e9a:	9209      	str	r2, [sp, #36]	; 0x24
 8008e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	f000 80a2 	beq.w	8008fea <_vfiprintf_r+0x20e>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8008eac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008eb0:	f10a 0a01 	add.w	sl, sl, #1
 8008eb4:	9304      	str	r3, [sp, #16]
 8008eb6:	9307      	str	r3, [sp, #28]
 8008eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8008ebe:	4654      	mov	r4, sl
 8008ec0:	2205      	movs	r2, #5
 8008ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ec6:	4858      	ldr	r0, [pc, #352]	; (8009028 <_vfiprintf_r+0x24c>)
 8008ec8:	f7f7 f9a2 	bl	8000210 <memchr>
 8008ecc:	9a04      	ldr	r2, [sp, #16]
 8008ece:	b9d8      	cbnz	r0, 8008f08 <_vfiprintf_r+0x12c>
 8008ed0:	06d1      	lsls	r1, r2, #27
 8008ed2:	bf44      	itt	mi
 8008ed4:	2320      	movmi	r3, #32
 8008ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008eda:	0713      	lsls	r3, r2, #28
 8008edc:	bf44      	itt	mi
 8008ede:	232b      	movmi	r3, #43	; 0x2b
 8008ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8008eea:	d015      	beq.n	8008f18 <_vfiprintf_r+0x13c>
 8008eec:	9a07      	ldr	r2, [sp, #28]
 8008eee:	4654      	mov	r4, sl
 8008ef0:	2000      	movs	r0, #0
 8008ef2:	f04f 0c0a 	mov.w	ip, #10
 8008ef6:	4621      	mov	r1, r4
 8008ef8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008efc:	3b30      	subs	r3, #48	; 0x30
 8008efe:	2b09      	cmp	r3, #9
 8008f00:	d94e      	bls.n	8008fa0 <_vfiprintf_r+0x1c4>
 8008f02:	b1b0      	cbz	r0, 8008f32 <_vfiprintf_r+0x156>
 8008f04:	9207      	str	r2, [sp, #28]
 8008f06:	e014      	b.n	8008f32 <_vfiprintf_r+0x156>
 8008f08:	eba0 0308 	sub.w	r3, r0, r8
 8008f0c:	fa09 f303 	lsl.w	r3, r9, r3
 8008f10:	4313      	orrs	r3, r2
 8008f12:	9304      	str	r3, [sp, #16]
 8008f14:	46a2      	mov	sl, r4
 8008f16:	e7d2      	b.n	8008ebe <_vfiprintf_r+0xe2>
 8008f18:	9b03      	ldr	r3, [sp, #12]
 8008f1a:	1d19      	adds	r1, r3, #4
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	9103      	str	r1, [sp, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	bfbb      	ittet	lt
 8008f24:	425b      	neglt	r3, r3
 8008f26:	f042 0202 	orrlt.w	r2, r2, #2
 8008f2a:	9307      	strge	r3, [sp, #28]
 8008f2c:	9307      	strlt	r3, [sp, #28]
 8008f2e:	bfb8      	it	lt
 8008f30:	9204      	strlt	r2, [sp, #16]
 8008f32:	7823      	ldrb	r3, [r4, #0]
 8008f34:	2b2e      	cmp	r3, #46	; 0x2e
 8008f36:	d10c      	bne.n	8008f52 <_vfiprintf_r+0x176>
 8008f38:	7863      	ldrb	r3, [r4, #1]
 8008f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8008f3c:	d135      	bne.n	8008faa <_vfiprintf_r+0x1ce>
 8008f3e:	9b03      	ldr	r3, [sp, #12]
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	9203      	str	r2, [sp, #12]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	bfb8      	it	lt
 8008f4a:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f4e:	3402      	adds	r4, #2
 8008f50:	9305      	str	r3, [sp, #20]
 8008f52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009038 <_vfiprintf_r+0x25c>
 8008f56:	7821      	ldrb	r1, [r4, #0]
 8008f58:	2203      	movs	r2, #3
 8008f5a:	4650      	mov	r0, sl
 8008f5c:	f7f7 f958 	bl	8000210 <memchr>
 8008f60:	b140      	cbz	r0, 8008f74 <_vfiprintf_r+0x198>
 8008f62:	2340      	movs	r3, #64	; 0x40
 8008f64:	eba0 000a 	sub.w	r0, r0, sl
 8008f68:	fa03 f000 	lsl.w	r0, r3, r0
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	4303      	orrs	r3, r0
 8008f70:	3401      	adds	r4, #1
 8008f72:	9304      	str	r3, [sp, #16]
 8008f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f78:	482c      	ldr	r0, [pc, #176]	; (800902c <_vfiprintf_r+0x250>)
 8008f7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008f7e:	2206      	movs	r2, #6
 8008f80:	f7f7 f946 	bl	8000210 <memchr>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	d03f      	beq.n	8009008 <_vfiprintf_r+0x22c>
 8008f88:	4b29      	ldr	r3, [pc, #164]	; (8009030 <_vfiprintf_r+0x254>)
 8008f8a:	bb1b      	cbnz	r3, 8008fd4 <_vfiprintf_r+0x1f8>
 8008f8c:	9b03      	ldr	r3, [sp, #12]
 8008f8e:	3307      	adds	r3, #7
 8008f90:	f023 0307 	bic.w	r3, r3, #7
 8008f94:	3308      	adds	r3, #8
 8008f96:	9303      	str	r3, [sp, #12]
 8008f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f9a:	443b      	add	r3, r7
 8008f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008f9e:	e767      	b.n	8008e70 <_vfiprintf_r+0x94>
 8008fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fa4:	460c      	mov	r4, r1
 8008fa6:	2001      	movs	r0, #1
 8008fa8:	e7a5      	b.n	8008ef6 <_vfiprintf_r+0x11a>
 8008faa:	2300      	movs	r3, #0
 8008fac:	3401      	adds	r4, #1
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	f04f 0c0a 	mov.w	ip, #10
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fbc:	3a30      	subs	r2, #48	; 0x30
 8008fbe:	2a09      	cmp	r2, #9
 8008fc0:	d903      	bls.n	8008fca <_vfiprintf_r+0x1ee>
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0c5      	beq.n	8008f52 <_vfiprintf_r+0x176>
 8008fc6:	9105      	str	r1, [sp, #20]
 8008fc8:	e7c3      	b.n	8008f52 <_vfiprintf_r+0x176>
 8008fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fce:	4604      	mov	r4, r0
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e7f0      	b.n	8008fb6 <_vfiprintf_r+0x1da>
 8008fd4:	ab03      	add	r3, sp, #12
 8008fd6:	9300      	str	r3, [sp, #0]
 8008fd8:	462a      	mov	r2, r5
 8008fda:	4b16      	ldr	r3, [pc, #88]	; (8009034 <_vfiprintf_r+0x258>)
 8008fdc:	a904      	add	r1, sp, #16
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7fd ff00 	bl	8006de4 <_printf_float>
 8008fe4:	4607      	mov	r7, r0
 8008fe6:	1c78      	adds	r0, r7, #1
 8008fe8:	d1d6      	bne.n	8008f98 <_vfiprintf_r+0x1bc>
 8008fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fec:	07d9      	lsls	r1, r3, #31
 8008fee:	d405      	bmi.n	8008ffc <_vfiprintf_r+0x220>
 8008ff0:	89ab      	ldrh	r3, [r5, #12]
 8008ff2:	059a      	lsls	r2, r3, #22
 8008ff4:	d402      	bmi.n	8008ffc <_vfiprintf_r+0x220>
 8008ff6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ff8:	f7ff fa34 	bl	8008464 <__retarget_lock_release_recursive>
 8008ffc:	89ab      	ldrh	r3, [r5, #12]
 8008ffe:	065b      	lsls	r3, r3, #25
 8009000:	f53f af12 	bmi.w	8008e28 <_vfiprintf_r+0x4c>
 8009004:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009006:	e711      	b.n	8008e2c <_vfiprintf_r+0x50>
 8009008:	ab03      	add	r3, sp, #12
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	462a      	mov	r2, r5
 800900e:	4b09      	ldr	r3, [pc, #36]	; (8009034 <_vfiprintf_r+0x258>)
 8009010:	a904      	add	r1, sp, #16
 8009012:	4630      	mov	r0, r6
 8009014:	f7fe f98a 	bl	800732c <_printf_i>
 8009018:	e7e4      	b.n	8008fe4 <_vfiprintf_r+0x208>
 800901a:	bf00      	nop
 800901c:	08009840 	.word	0x08009840
 8009020:	08009860 	.word	0x08009860
 8009024:	08009820 	.word	0x08009820
 8009028:	080099dc 	.word	0x080099dc
 800902c:	080099e6 	.word	0x080099e6
 8009030:	08006de5 	.word	0x08006de5
 8009034:	08008db7 	.word	0x08008db7
 8009038:	080099e2 	.word	0x080099e2

0800903c <_sbrk_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4d06      	ldr	r5, [pc, #24]	; (8009058 <_sbrk_r+0x1c>)
 8009040:	2300      	movs	r3, #0
 8009042:	4604      	mov	r4, r0
 8009044:	4608      	mov	r0, r1
 8009046:	602b      	str	r3, [r5, #0]
 8009048:	f7f9 f8a4 	bl	8002194 <_sbrk>
 800904c:	1c43      	adds	r3, r0, #1
 800904e:	d102      	bne.n	8009056 <_sbrk_r+0x1a>
 8009050:	682b      	ldr	r3, [r5, #0]
 8009052:	b103      	cbz	r3, 8009056 <_sbrk_r+0x1a>
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	bd38      	pop	{r3, r4, r5, pc}
 8009058:	20000420 	.word	0x20000420

0800905c <__sread>:
 800905c:	b510      	push	{r4, lr}
 800905e:	460c      	mov	r4, r1
 8009060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009064:	f000 faa8 	bl	80095b8 <_read_r>
 8009068:	2800      	cmp	r0, #0
 800906a:	bfab      	itete	ge
 800906c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800906e:	89a3      	ldrhlt	r3, [r4, #12]
 8009070:	181b      	addge	r3, r3, r0
 8009072:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009076:	bfac      	ite	ge
 8009078:	6563      	strge	r3, [r4, #84]	; 0x54
 800907a:	81a3      	strhlt	r3, [r4, #12]
 800907c:	bd10      	pop	{r4, pc}

0800907e <__swrite>:
 800907e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009082:	461f      	mov	r7, r3
 8009084:	898b      	ldrh	r3, [r1, #12]
 8009086:	05db      	lsls	r3, r3, #23
 8009088:	4605      	mov	r5, r0
 800908a:	460c      	mov	r4, r1
 800908c:	4616      	mov	r6, r2
 800908e:	d505      	bpl.n	800909c <__swrite+0x1e>
 8009090:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009094:	2302      	movs	r3, #2
 8009096:	2200      	movs	r2, #0
 8009098:	f000 f9f8 	bl	800948c <_lseek_r>
 800909c:	89a3      	ldrh	r3, [r4, #12]
 800909e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090a6:	81a3      	strh	r3, [r4, #12]
 80090a8:	4632      	mov	r2, r6
 80090aa:	463b      	mov	r3, r7
 80090ac:	4628      	mov	r0, r5
 80090ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090b2:	f000 b869 	b.w	8009188 <_write_r>

080090b6 <__sseek>:
 80090b6:	b510      	push	{r4, lr}
 80090b8:	460c      	mov	r4, r1
 80090ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090be:	f000 f9e5 	bl	800948c <_lseek_r>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	89a3      	ldrh	r3, [r4, #12]
 80090c6:	bf15      	itete	ne
 80090c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80090ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090d2:	81a3      	strheq	r3, [r4, #12]
 80090d4:	bf18      	it	ne
 80090d6:	81a3      	strhne	r3, [r4, #12]
 80090d8:	bd10      	pop	{r4, pc}

080090da <__sclose>:
 80090da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090de:	f000 b8f1 	b.w	80092c4 <_close_r>
	...

080090e4 <__swbuf_r>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	460e      	mov	r6, r1
 80090e8:	4614      	mov	r4, r2
 80090ea:	4605      	mov	r5, r0
 80090ec:	b118      	cbz	r0, 80090f6 <__swbuf_r+0x12>
 80090ee:	6983      	ldr	r3, [r0, #24]
 80090f0:	b90b      	cbnz	r3, 80090f6 <__swbuf_r+0x12>
 80090f2:	f7ff f913 	bl	800831c <__sinit>
 80090f6:	4b21      	ldr	r3, [pc, #132]	; (800917c <__swbuf_r+0x98>)
 80090f8:	429c      	cmp	r4, r3
 80090fa:	d12b      	bne.n	8009154 <__swbuf_r+0x70>
 80090fc:	686c      	ldr	r4, [r5, #4]
 80090fe:	69a3      	ldr	r3, [r4, #24]
 8009100:	60a3      	str	r3, [r4, #8]
 8009102:	89a3      	ldrh	r3, [r4, #12]
 8009104:	071a      	lsls	r2, r3, #28
 8009106:	d52f      	bpl.n	8009168 <__swbuf_r+0x84>
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	b36b      	cbz	r3, 8009168 <__swbuf_r+0x84>
 800910c:	6923      	ldr	r3, [r4, #16]
 800910e:	6820      	ldr	r0, [r4, #0]
 8009110:	1ac0      	subs	r0, r0, r3
 8009112:	6963      	ldr	r3, [r4, #20]
 8009114:	b2f6      	uxtb	r6, r6
 8009116:	4283      	cmp	r3, r0
 8009118:	4637      	mov	r7, r6
 800911a:	dc04      	bgt.n	8009126 <__swbuf_r+0x42>
 800911c:	4621      	mov	r1, r4
 800911e:	4628      	mov	r0, r5
 8009120:	f000 f966 	bl	80093f0 <_fflush_r>
 8009124:	bb30      	cbnz	r0, 8009174 <__swbuf_r+0x90>
 8009126:	68a3      	ldr	r3, [r4, #8]
 8009128:	3b01      	subs	r3, #1
 800912a:	60a3      	str	r3, [r4, #8]
 800912c:	6823      	ldr	r3, [r4, #0]
 800912e:	1c5a      	adds	r2, r3, #1
 8009130:	6022      	str	r2, [r4, #0]
 8009132:	701e      	strb	r6, [r3, #0]
 8009134:	6963      	ldr	r3, [r4, #20]
 8009136:	3001      	adds	r0, #1
 8009138:	4283      	cmp	r3, r0
 800913a:	d004      	beq.n	8009146 <__swbuf_r+0x62>
 800913c:	89a3      	ldrh	r3, [r4, #12]
 800913e:	07db      	lsls	r3, r3, #31
 8009140:	d506      	bpl.n	8009150 <__swbuf_r+0x6c>
 8009142:	2e0a      	cmp	r6, #10
 8009144:	d104      	bne.n	8009150 <__swbuf_r+0x6c>
 8009146:	4621      	mov	r1, r4
 8009148:	4628      	mov	r0, r5
 800914a:	f000 f951 	bl	80093f0 <_fflush_r>
 800914e:	b988      	cbnz	r0, 8009174 <__swbuf_r+0x90>
 8009150:	4638      	mov	r0, r7
 8009152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009154:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <__swbuf_r+0x9c>)
 8009156:	429c      	cmp	r4, r3
 8009158:	d101      	bne.n	800915e <__swbuf_r+0x7a>
 800915a:	68ac      	ldr	r4, [r5, #8]
 800915c:	e7cf      	b.n	80090fe <__swbuf_r+0x1a>
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <__swbuf_r+0xa0>)
 8009160:	429c      	cmp	r4, r3
 8009162:	bf08      	it	eq
 8009164:	68ec      	ldreq	r4, [r5, #12]
 8009166:	e7ca      	b.n	80090fe <__swbuf_r+0x1a>
 8009168:	4621      	mov	r1, r4
 800916a:	4628      	mov	r0, r5
 800916c:	f000 f81e 	bl	80091ac <__swsetup_r>
 8009170:	2800      	cmp	r0, #0
 8009172:	d0cb      	beq.n	800910c <__swbuf_r+0x28>
 8009174:	f04f 37ff 	mov.w	r7, #4294967295
 8009178:	e7ea      	b.n	8009150 <__swbuf_r+0x6c>
 800917a:	bf00      	nop
 800917c:	08009840 	.word	0x08009840
 8009180:	08009860 	.word	0x08009860
 8009184:	08009820 	.word	0x08009820

08009188 <_write_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d07      	ldr	r5, [pc, #28]	; (80091a8 <_write_r+0x20>)
 800918c:	4604      	mov	r4, r0
 800918e:	4608      	mov	r0, r1
 8009190:	4611      	mov	r1, r2
 8009192:	2200      	movs	r2, #0
 8009194:	602a      	str	r2, [r5, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f7f8 ffab 	bl	80020f2 <_write>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_write_r+0x1e>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_write_r+0x1e>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000420 	.word	0x20000420

080091ac <__swsetup_r>:
 80091ac:	4b32      	ldr	r3, [pc, #200]	; (8009278 <__swsetup_r+0xcc>)
 80091ae:	b570      	push	{r4, r5, r6, lr}
 80091b0:	681d      	ldr	r5, [r3, #0]
 80091b2:	4606      	mov	r6, r0
 80091b4:	460c      	mov	r4, r1
 80091b6:	b125      	cbz	r5, 80091c2 <__swsetup_r+0x16>
 80091b8:	69ab      	ldr	r3, [r5, #24]
 80091ba:	b913      	cbnz	r3, 80091c2 <__swsetup_r+0x16>
 80091bc:	4628      	mov	r0, r5
 80091be:	f7ff f8ad 	bl	800831c <__sinit>
 80091c2:	4b2e      	ldr	r3, [pc, #184]	; (800927c <__swsetup_r+0xd0>)
 80091c4:	429c      	cmp	r4, r3
 80091c6:	d10f      	bne.n	80091e8 <__swsetup_r+0x3c>
 80091c8:	686c      	ldr	r4, [r5, #4]
 80091ca:	89a3      	ldrh	r3, [r4, #12]
 80091cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091d0:	0719      	lsls	r1, r3, #28
 80091d2:	d42c      	bmi.n	800922e <__swsetup_r+0x82>
 80091d4:	06dd      	lsls	r5, r3, #27
 80091d6:	d411      	bmi.n	80091fc <__swsetup_r+0x50>
 80091d8:	2309      	movs	r3, #9
 80091da:	6033      	str	r3, [r6, #0]
 80091dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80091e0:	81a3      	strh	r3, [r4, #12]
 80091e2:	f04f 30ff 	mov.w	r0, #4294967295
 80091e6:	e03e      	b.n	8009266 <__swsetup_r+0xba>
 80091e8:	4b25      	ldr	r3, [pc, #148]	; (8009280 <__swsetup_r+0xd4>)
 80091ea:	429c      	cmp	r4, r3
 80091ec:	d101      	bne.n	80091f2 <__swsetup_r+0x46>
 80091ee:	68ac      	ldr	r4, [r5, #8]
 80091f0:	e7eb      	b.n	80091ca <__swsetup_r+0x1e>
 80091f2:	4b24      	ldr	r3, [pc, #144]	; (8009284 <__swsetup_r+0xd8>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	bf08      	it	eq
 80091f8:	68ec      	ldreq	r4, [r5, #12]
 80091fa:	e7e6      	b.n	80091ca <__swsetup_r+0x1e>
 80091fc:	0758      	lsls	r0, r3, #29
 80091fe:	d512      	bpl.n	8009226 <__swsetup_r+0x7a>
 8009200:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009202:	b141      	cbz	r1, 8009216 <__swsetup_r+0x6a>
 8009204:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009208:	4299      	cmp	r1, r3
 800920a:	d002      	beq.n	8009212 <__swsetup_r+0x66>
 800920c:	4630      	mov	r0, r6
 800920e:	f7ff fcdb 	bl	8008bc8 <_free_r>
 8009212:	2300      	movs	r3, #0
 8009214:	6363      	str	r3, [r4, #52]	; 0x34
 8009216:	89a3      	ldrh	r3, [r4, #12]
 8009218:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800921c:	81a3      	strh	r3, [r4, #12]
 800921e:	2300      	movs	r3, #0
 8009220:	6063      	str	r3, [r4, #4]
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	6023      	str	r3, [r4, #0]
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f043 0308 	orr.w	r3, r3, #8
 800922c:	81a3      	strh	r3, [r4, #12]
 800922e:	6923      	ldr	r3, [r4, #16]
 8009230:	b94b      	cbnz	r3, 8009246 <__swsetup_r+0x9a>
 8009232:	89a3      	ldrh	r3, [r4, #12]
 8009234:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800923c:	d003      	beq.n	8009246 <__swsetup_r+0x9a>
 800923e:	4621      	mov	r1, r4
 8009240:	4630      	mov	r0, r6
 8009242:	f000 f95b 	bl	80094fc <__smakebuf_r>
 8009246:	89a0      	ldrh	r0, [r4, #12]
 8009248:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800924c:	f010 0301 	ands.w	r3, r0, #1
 8009250:	d00a      	beq.n	8009268 <__swsetup_r+0xbc>
 8009252:	2300      	movs	r3, #0
 8009254:	60a3      	str	r3, [r4, #8]
 8009256:	6963      	ldr	r3, [r4, #20]
 8009258:	425b      	negs	r3, r3
 800925a:	61a3      	str	r3, [r4, #24]
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	b943      	cbnz	r3, 8009272 <__swsetup_r+0xc6>
 8009260:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009264:	d1ba      	bne.n	80091dc <__swsetup_r+0x30>
 8009266:	bd70      	pop	{r4, r5, r6, pc}
 8009268:	0781      	lsls	r1, r0, #30
 800926a:	bf58      	it	pl
 800926c:	6963      	ldrpl	r3, [r4, #20]
 800926e:	60a3      	str	r3, [r4, #8]
 8009270:	e7f4      	b.n	800925c <__swsetup_r+0xb0>
 8009272:	2000      	movs	r0, #0
 8009274:	e7f7      	b.n	8009266 <__swsetup_r+0xba>
 8009276:	bf00      	nop
 8009278:	2000000c 	.word	0x2000000c
 800927c:	08009840 	.word	0x08009840
 8009280:	08009860 	.word	0x08009860
 8009284:	08009820 	.word	0x08009820

08009288 <__assert_func>:
 8009288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800928a:	4614      	mov	r4, r2
 800928c:	461a      	mov	r2, r3
 800928e:	4b09      	ldr	r3, [pc, #36]	; (80092b4 <__assert_func+0x2c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4605      	mov	r5, r0
 8009294:	68d8      	ldr	r0, [r3, #12]
 8009296:	b14c      	cbz	r4, 80092ac <__assert_func+0x24>
 8009298:	4b07      	ldr	r3, [pc, #28]	; (80092b8 <__assert_func+0x30>)
 800929a:	9100      	str	r1, [sp, #0]
 800929c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80092a0:	4906      	ldr	r1, [pc, #24]	; (80092bc <__assert_func+0x34>)
 80092a2:	462b      	mov	r3, r5
 80092a4:	f000 f8e0 	bl	8009468 <fiprintf>
 80092a8:	f000 f9a5 	bl	80095f6 <abort>
 80092ac:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <__assert_func+0x38>)
 80092ae:	461c      	mov	r4, r3
 80092b0:	e7f3      	b.n	800929a <__assert_func+0x12>
 80092b2:	bf00      	nop
 80092b4:	2000000c 	.word	0x2000000c
 80092b8:	080099ed 	.word	0x080099ed
 80092bc:	080099fa 	.word	0x080099fa
 80092c0:	08009a28 	.word	0x08009a28

080092c4 <_close_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d06      	ldr	r5, [pc, #24]	; (80092e0 <_close_r+0x1c>)
 80092c8:	2300      	movs	r3, #0
 80092ca:	4604      	mov	r4, r0
 80092cc:	4608      	mov	r0, r1
 80092ce:	602b      	str	r3, [r5, #0]
 80092d0:	f7f8 ff2b 	bl	800212a <_close>
 80092d4:	1c43      	adds	r3, r0, #1
 80092d6:	d102      	bne.n	80092de <_close_r+0x1a>
 80092d8:	682b      	ldr	r3, [r5, #0]
 80092da:	b103      	cbz	r3, 80092de <_close_r+0x1a>
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	bd38      	pop	{r3, r4, r5, pc}
 80092e0:	20000420 	.word	0x20000420

080092e4 <__sflush_r>:
 80092e4:	898a      	ldrh	r2, [r1, #12]
 80092e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	4605      	mov	r5, r0
 80092ec:	0710      	lsls	r0, r2, #28
 80092ee:	460c      	mov	r4, r1
 80092f0:	d458      	bmi.n	80093a4 <__sflush_r+0xc0>
 80092f2:	684b      	ldr	r3, [r1, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dc05      	bgt.n	8009304 <__sflush_r+0x20>
 80092f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	dc02      	bgt.n	8009304 <__sflush_r+0x20>
 80092fe:	2000      	movs	r0, #0
 8009300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009306:	2e00      	cmp	r6, #0
 8009308:	d0f9      	beq.n	80092fe <__sflush_r+0x1a>
 800930a:	2300      	movs	r3, #0
 800930c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009310:	682f      	ldr	r7, [r5, #0]
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	d032      	beq.n	800937c <__sflush_r+0x98>
 8009316:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009318:	89a3      	ldrh	r3, [r4, #12]
 800931a:	075a      	lsls	r2, r3, #29
 800931c:	d505      	bpl.n	800932a <__sflush_r+0x46>
 800931e:	6863      	ldr	r3, [r4, #4]
 8009320:	1ac0      	subs	r0, r0, r3
 8009322:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009324:	b10b      	cbz	r3, 800932a <__sflush_r+0x46>
 8009326:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009328:	1ac0      	subs	r0, r0, r3
 800932a:	2300      	movs	r3, #0
 800932c:	4602      	mov	r2, r0
 800932e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009330:	6a21      	ldr	r1, [r4, #32]
 8009332:	4628      	mov	r0, r5
 8009334:	47b0      	blx	r6
 8009336:	1c43      	adds	r3, r0, #1
 8009338:	89a3      	ldrh	r3, [r4, #12]
 800933a:	d106      	bne.n	800934a <__sflush_r+0x66>
 800933c:	6829      	ldr	r1, [r5, #0]
 800933e:	291d      	cmp	r1, #29
 8009340:	d82c      	bhi.n	800939c <__sflush_r+0xb8>
 8009342:	4a2a      	ldr	r2, [pc, #168]	; (80093ec <__sflush_r+0x108>)
 8009344:	40ca      	lsrs	r2, r1
 8009346:	07d6      	lsls	r6, r2, #31
 8009348:	d528      	bpl.n	800939c <__sflush_r+0xb8>
 800934a:	2200      	movs	r2, #0
 800934c:	6062      	str	r2, [r4, #4]
 800934e:	04d9      	lsls	r1, r3, #19
 8009350:	6922      	ldr	r2, [r4, #16]
 8009352:	6022      	str	r2, [r4, #0]
 8009354:	d504      	bpl.n	8009360 <__sflush_r+0x7c>
 8009356:	1c42      	adds	r2, r0, #1
 8009358:	d101      	bne.n	800935e <__sflush_r+0x7a>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b903      	cbnz	r3, 8009360 <__sflush_r+0x7c>
 800935e:	6560      	str	r0, [r4, #84]	; 0x54
 8009360:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009362:	602f      	str	r7, [r5, #0]
 8009364:	2900      	cmp	r1, #0
 8009366:	d0ca      	beq.n	80092fe <__sflush_r+0x1a>
 8009368:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800936c:	4299      	cmp	r1, r3
 800936e:	d002      	beq.n	8009376 <__sflush_r+0x92>
 8009370:	4628      	mov	r0, r5
 8009372:	f7ff fc29 	bl	8008bc8 <_free_r>
 8009376:	2000      	movs	r0, #0
 8009378:	6360      	str	r0, [r4, #52]	; 0x34
 800937a:	e7c1      	b.n	8009300 <__sflush_r+0x1c>
 800937c:	6a21      	ldr	r1, [r4, #32]
 800937e:	2301      	movs	r3, #1
 8009380:	4628      	mov	r0, r5
 8009382:	47b0      	blx	r6
 8009384:	1c41      	adds	r1, r0, #1
 8009386:	d1c7      	bne.n	8009318 <__sflush_r+0x34>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d0c4      	beq.n	8009318 <__sflush_r+0x34>
 800938e:	2b1d      	cmp	r3, #29
 8009390:	d001      	beq.n	8009396 <__sflush_r+0xb2>
 8009392:	2b16      	cmp	r3, #22
 8009394:	d101      	bne.n	800939a <__sflush_r+0xb6>
 8009396:	602f      	str	r7, [r5, #0]
 8009398:	e7b1      	b.n	80092fe <__sflush_r+0x1a>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093a0:	81a3      	strh	r3, [r4, #12]
 80093a2:	e7ad      	b.n	8009300 <__sflush_r+0x1c>
 80093a4:	690f      	ldr	r7, [r1, #16]
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	d0a9      	beq.n	80092fe <__sflush_r+0x1a>
 80093aa:	0793      	lsls	r3, r2, #30
 80093ac:	680e      	ldr	r6, [r1, #0]
 80093ae:	bf08      	it	eq
 80093b0:	694b      	ldreq	r3, [r1, #20]
 80093b2:	600f      	str	r7, [r1, #0]
 80093b4:	bf18      	it	ne
 80093b6:	2300      	movne	r3, #0
 80093b8:	eba6 0807 	sub.w	r8, r6, r7
 80093bc:	608b      	str	r3, [r1, #8]
 80093be:	f1b8 0f00 	cmp.w	r8, #0
 80093c2:	dd9c      	ble.n	80092fe <__sflush_r+0x1a>
 80093c4:	6a21      	ldr	r1, [r4, #32]
 80093c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80093c8:	4643      	mov	r3, r8
 80093ca:	463a      	mov	r2, r7
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b0      	blx	r6
 80093d0:	2800      	cmp	r0, #0
 80093d2:	dc06      	bgt.n	80093e2 <__sflush_r+0xfe>
 80093d4:	89a3      	ldrh	r3, [r4, #12]
 80093d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80093da:	81a3      	strh	r3, [r4, #12]
 80093dc:	f04f 30ff 	mov.w	r0, #4294967295
 80093e0:	e78e      	b.n	8009300 <__sflush_r+0x1c>
 80093e2:	4407      	add	r7, r0
 80093e4:	eba8 0800 	sub.w	r8, r8, r0
 80093e8:	e7e9      	b.n	80093be <__sflush_r+0xda>
 80093ea:	bf00      	nop
 80093ec:	20400001 	.word	0x20400001

080093f0 <_fflush_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	690b      	ldr	r3, [r1, #16]
 80093f4:	4605      	mov	r5, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b913      	cbnz	r3, 8009400 <_fflush_r+0x10>
 80093fa:	2500      	movs	r5, #0
 80093fc:	4628      	mov	r0, r5
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	b118      	cbz	r0, 800940a <_fflush_r+0x1a>
 8009402:	6983      	ldr	r3, [r0, #24]
 8009404:	b90b      	cbnz	r3, 800940a <_fflush_r+0x1a>
 8009406:	f7fe ff89 	bl	800831c <__sinit>
 800940a:	4b14      	ldr	r3, [pc, #80]	; (800945c <_fflush_r+0x6c>)
 800940c:	429c      	cmp	r4, r3
 800940e:	d11b      	bne.n	8009448 <_fflush_r+0x58>
 8009410:	686c      	ldr	r4, [r5, #4]
 8009412:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009416:	2b00      	cmp	r3, #0
 8009418:	d0ef      	beq.n	80093fa <_fflush_r+0xa>
 800941a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800941c:	07d0      	lsls	r0, r2, #31
 800941e:	d404      	bmi.n	800942a <_fflush_r+0x3a>
 8009420:	0599      	lsls	r1, r3, #22
 8009422:	d402      	bmi.n	800942a <_fflush_r+0x3a>
 8009424:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009426:	f7ff f81c 	bl	8008462 <__retarget_lock_acquire_recursive>
 800942a:	4628      	mov	r0, r5
 800942c:	4621      	mov	r1, r4
 800942e:	f7ff ff59 	bl	80092e4 <__sflush_r>
 8009432:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009434:	07da      	lsls	r2, r3, #31
 8009436:	4605      	mov	r5, r0
 8009438:	d4e0      	bmi.n	80093fc <_fflush_r+0xc>
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	059b      	lsls	r3, r3, #22
 800943e:	d4dd      	bmi.n	80093fc <_fflush_r+0xc>
 8009440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009442:	f7ff f80f 	bl	8008464 <__retarget_lock_release_recursive>
 8009446:	e7d9      	b.n	80093fc <_fflush_r+0xc>
 8009448:	4b05      	ldr	r3, [pc, #20]	; (8009460 <_fflush_r+0x70>)
 800944a:	429c      	cmp	r4, r3
 800944c:	d101      	bne.n	8009452 <_fflush_r+0x62>
 800944e:	68ac      	ldr	r4, [r5, #8]
 8009450:	e7df      	b.n	8009412 <_fflush_r+0x22>
 8009452:	4b04      	ldr	r3, [pc, #16]	; (8009464 <_fflush_r+0x74>)
 8009454:	429c      	cmp	r4, r3
 8009456:	bf08      	it	eq
 8009458:	68ec      	ldreq	r4, [r5, #12]
 800945a:	e7da      	b.n	8009412 <_fflush_r+0x22>
 800945c:	08009840 	.word	0x08009840
 8009460:	08009860 	.word	0x08009860
 8009464:	08009820 	.word	0x08009820

08009468 <fiprintf>:
 8009468:	b40e      	push	{r1, r2, r3}
 800946a:	b503      	push	{r0, r1, lr}
 800946c:	4601      	mov	r1, r0
 800946e:	ab03      	add	r3, sp, #12
 8009470:	4805      	ldr	r0, [pc, #20]	; (8009488 <fiprintf+0x20>)
 8009472:	f853 2b04 	ldr.w	r2, [r3], #4
 8009476:	6800      	ldr	r0, [r0, #0]
 8009478:	9301      	str	r3, [sp, #4]
 800947a:	f7ff fcaf 	bl	8008ddc <_vfiprintf_r>
 800947e:	b002      	add	sp, #8
 8009480:	f85d eb04 	ldr.w	lr, [sp], #4
 8009484:	b003      	add	sp, #12
 8009486:	4770      	bx	lr
 8009488:	2000000c 	.word	0x2000000c

0800948c <_lseek_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	; (80094ac <_lseek_r+0x20>)
 8009490:	4604      	mov	r4, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f8 fe6c 	bl	8002178 <_lseek>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_lseek_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_lseek_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20000420 	.word	0x20000420

080094b0 <__swhatbuf_r>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	460e      	mov	r6, r1
 80094b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b8:	2900      	cmp	r1, #0
 80094ba:	b096      	sub	sp, #88	; 0x58
 80094bc:	4614      	mov	r4, r2
 80094be:	461d      	mov	r5, r3
 80094c0:	da08      	bge.n	80094d4 <__swhatbuf_r+0x24>
 80094c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80094c6:	2200      	movs	r2, #0
 80094c8:	602a      	str	r2, [r5, #0]
 80094ca:	061a      	lsls	r2, r3, #24
 80094cc:	d410      	bmi.n	80094f0 <__swhatbuf_r+0x40>
 80094ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094d2:	e00e      	b.n	80094f2 <__swhatbuf_r+0x42>
 80094d4:	466a      	mov	r2, sp
 80094d6:	f000 f895 	bl	8009604 <_fstat_r>
 80094da:	2800      	cmp	r0, #0
 80094dc:	dbf1      	blt.n	80094c2 <__swhatbuf_r+0x12>
 80094de:	9a01      	ldr	r2, [sp, #4]
 80094e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094e8:	425a      	negs	r2, r3
 80094ea:	415a      	adcs	r2, r3
 80094ec:	602a      	str	r2, [r5, #0]
 80094ee:	e7ee      	b.n	80094ce <__swhatbuf_r+0x1e>
 80094f0:	2340      	movs	r3, #64	; 0x40
 80094f2:	2000      	movs	r0, #0
 80094f4:	6023      	str	r3, [r4, #0]
 80094f6:	b016      	add	sp, #88	; 0x58
 80094f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080094fc <__smakebuf_r>:
 80094fc:	898b      	ldrh	r3, [r1, #12]
 80094fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009500:	079d      	lsls	r5, r3, #30
 8009502:	4606      	mov	r6, r0
 8009504:	460c      	mov	r4, r1
 8009506:	d507      	bpl.n	8009518 <__smakebuf_r+0x1c>
 8009508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800950c:	6023      	str	r3, [r4, #0]
 800950e:	6123      	str	r3, [r4, #16]
 8009510:	2301      	movs	r3, #1
 8009512:	6163      	str	r3, [r4, #20]
 8009514:	b002      	add	sp, #8
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	ab01      	add	r3, sp, #4
 800951a:	466a      	mov	r2, sp
 800951c:	f7ff ffc8 	bl	80094b0 <__swhatbuf_r>
 8009520:	9900      	ldr	r1, [sp, #0]
 8009522:	4605      	mov	r5, r0
 8009524:	4630      	mov	r0, r6
 8009526:	f7ff fbbb 	bl	8008ca0 <_malloc_r>
 800952a:	b948      	cbnz	r0, 8009540 <__smakebuf_r+0x44>
 800952c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009530:	059a      	lsls	r2, r3, #22
 8009532:	d4ef      	bmi.n	8009514 <__smakebuf_r+0x18>
 8009534:	f023 0303 	bic.w	r3, r3, #3
 8009538:	f043 0302 	orr.w	r3, r3, #2
 800953c:	81a3      	strh	r3, [r4, #12]
 800953e:	e7e3      	b.n	8009508 <__smakebuf_r+0xc>
 8009540:	4b0d      	ldr	r3, [pc, #52]	; (8009578 <__smakebuf_r+0x7c>)
 8009542:	62b3      	str	r3, [r6, #40]	; 0x28
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	9b00      	ldr	r3, [sp, #0]
 8009550:	6163      	str	r3, [r4, #20]
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	6120      	str	r0, [r4, #16]
 8009556:	b15b      	cbz	r3, 8009570 <__smakebuf_r+0x74>
 8009558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800955c:	4630      	mov	r0, r6
 800955e:	f000 f863 	bl	8009628 <_isatty_r>
 8009562:	b128      	cbz	r0, 8009570 <__smakebuf_r+0x74>
 8009564:	89a3      	ldrh	r3, [r4, #12]
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	f043 0301 	orr.w	r3, r3, #1
 800956e:	81a3      	strh	r3, [r4, #12]
 8009570:	89a0      	ldrh	r0, [r4, #12]
 8009572:	4305      	orrs	r5, r0
 8009574:	81a5      	strh	r5, [r4, #12]
 8009576:	e7cd      	b.n	8009514 <__smakebuf_r+0x18>
 8009578:	080082b5 	.word	0x080082b5

0800957c <__ascii_mbtowc>:
 800957c:	b082      	sub	sp, #8
 800957e:	b901      	cbnz	r1, 8009582 <__ascii_mbtowc+0x6>
 8009580:	a901      	add	r1, sp, #4
 8009582:	b142      	cbz	r2, 8009596 <__ascii_mbtowc+0x1a>
 8009584:	b14b      	cbz	r3, 800959a <__ascii_mbtowc+0x1e>
 8009586:	7813      	ldrb	r3, [r2, #0]
 8009588:	600b      	str	r3, [r1, #0]
 800958a:	7812      	ldrb	r2, [r2, #0]
 800958c:	1e10      	subs	r0, r2, #0
 800958e:	bf18      	it	ne
 8009590:	2001      	movne	r0, #1
 8009592:	b002      	add	sp, #8
 8009594:	4770      	bx	lr
 8009596:	4610      	mov	r0, r2
 8009598:	e7fb      	b.n	8009592 <__ascii_mbtowc+0x16>
 800959a:	f06f 0001 	mvn.w	r0, #1
 800959e:	e7f8      	b.n	8009592 <__ascii_mbtowc+0x16>

080095a0 <__malloc_lock>:
 80095a0:	4801      	ldr	r0, [pc, #4]	; (80095a8 <__malloc_lock+0x8>)
 80095a2:	f7fe bf5e 	b.w	8008462 <__retarget_lock_acquire_recursive>
 80095a6:	bf00      	nop
 80095a8:	20000414 	.word	0x20000414

080095ac <__malloc_unlock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	; (80095b4 <__malloc_unlock+0x8>)
 80095ae:	f7fe bf59 	b.w	8008464 <__retarget_lock_release_recursive>
 80095b2:	bf00      	nop
 80095b4:	20000414 	.word	0x20000414

080095b8 <_read_r>:
 80095b8:	b538      	push	{r3, r4, r5, lr}
 80095ba:	4d07      	ldr	r5, [pc, #28]	; (80095d8 <_read_r+0x20>)
 80095bc:	4604      	mov	r4, r0
 80095be:	4608      	mov	r0, r1
 80095c0:	4611      	mov	r1, r2
 80095c2:	2200      	movs	r2, #0
 80095c4:	602a      	str	r2, [r5, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	f7f8 fd76 	bl	80020b8 <_read>
 80095cc:	1c43      	adds	r3, r0, #1
 80095ce:	d102      	bne.n	80095d6 <_read_r+0x1e>
 80095d0:	682b      	ldr	r3, [r5, #0]
 80095d2:	b103      	cbz	r3, 80095d6 <_read_r+0x1e>
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	bd38      	pop	{r3, r4, r5, pc}
 80095d8:	20000420 	.word	0x20000420

080095dc <__ascii_wctomb>:
 80095dc:	b149      	cbz	r1, 80095f2 <__ascii_wctomb+0x16>
 80095de:	2aff      	cmp	r2, #255	; 0xff
 80095e0:	bf85      	ittet	hi
 80095e2:	238a      	movhi	r3, #138	; 0x8a
 80095e4:	6003      	strhi	r3, [r0, #0]
 80095e6:	700a      	strbls	r2, [r1, #0]
 80095e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80095ec:	bf98      	it	ls
 80095ee:	2001      	movls	r0, #1
 80095f0:	4770      	bx	lr
 80095f2:	4608      	mov	r0, r1
 80095f4:	4770      	bx	lr

080095f6 <abort>:
 80095f6:	b508      	push	{r3, lr}
 80095f8:	2006      	movs	r0, #6
 80095fa:	f000 f84d 	bl	8009698 <raise>
 80095fe:	2001      	movs	r0, #1
 8009600:	f7f8 fd50 	bl	80020a4 <_exit>

08009604 <_fstat_r>:
 8009604:	b538      	push	{r3, r4, r5, lr}
 8009606:	4d07      	ldr	r5, [pc, #28]	; (8009624 <_fstat_r+0x20>)
 8009608:	2300      	movs	r3, #0
 800960a:	4604      	mov	r4, r0
 800960c:	4608      	mov	r0, r1
 800960e:	4611      	mov	r1, r2
 8009610:	602b      	str	r3, [r5, #0]
 8009612:	f7f8 fd96 	bl	8002142 <_fstat>
 8009616:	1c43      	adds	r3, r0, #1
 8009618:	d102      	bne.n	8009620 <_fstat_r+0x1c>
 800961a:	682b      	ldr	r3, [r5, #0]
 800961c:	b103      	cbz	r3, 8009620 <_fstat_r+0x1c>
 800961e:	6023      	str	r3, [r4, #0]
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	20000420 	.word	0x20000420

08009628 <_isatty_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d06      	ldr	r5, [pc, #24]	; (8009644 <_isatty_r+0x1c>)
 800962c:	2300      	movs	r3, #0
 800962e:	4604      	mov	r4, r0
 8009630:	4608      	mov	r0, r1
 8009632:	602b      	str	r3, [r5, #0]
 8009634:	f7f8 fd95 	bl	8002162 <_isatty>
 8009638:	1c43      	adds	r3, r0, #1
 800963a:	d102      	bne.n	8009642 <_isatty_r+0x1a>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	b103      	cbz	r3, 8009642 <_isatty_r+0x1a>
 8009640:	6023      	str	r3, [r4, #0]
 8009642:	bd38      	pop	{r3, r4, r5, pc}
 8009644:	20000420 	.word	0x20000420

08009648 <_raise_r>:
 8009648:	291f      	cmp	r1, #31
 800964a:	b538      	push	{r3, r4, r5, lr}
 800964c:	4604      	mov	r4, r0
 800964e:	460d      	mov	r5, r1
 8009650:	d904      	bls.n	800965c <_raise_r+0x14>
 8009652:	2316      	movs	r3, #22
 8009654:	6003      	str	r3, [r0, #0]
 8009656:	f04f 30ff 	mov.w	r0, #4294967295
 800965a:	bd38      	pop	{r3, r4, r5, pc}
 800965c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800965e:	b112      	cbz	r2, 8009666 <_raise_r+0x1e>
 8009660:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009664:	b94b      	cbnz	r3, 800967a <_raise_r+0x32>
 8009666:	4620      	mov	r0, r4
 8009668:	f000 f830 	bl	80096cc <_getpid_r>
 800966c:	462a      	mov	r2, r5
 800966e:	4601      	mov	r1, r0
 8009670:	4620      	mov	r0, r4
 8009672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009676:	f000 b817 	b.w	80096a8 <_kill_r>
 800967a:	2b01      	cmp	r3, #1
 800967c:	d00a      	beq.n	8009694 <_raise_r+0x4c>
 800967e:	1c59      	adds	r1, r3, #1
 8009680:	d103      	bne.n	800968a <_raise_r+0x42>
 8009682:	2316      	movs	r3, #22
 8009684:	6003      	str	r3, [r0, #0]
 8009686:	2001      	movs	r0, #1
 8009688:	e7e7      	b.n	800965a <_raise_r+0x12>
 800968a:	2400      	movs	r4, #0
 800968c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009690:	4628      	mov	r0, r5
 8009692:	4798      	blx	r3
 8009694:	2000      	movs	r0, #0
 8009696:	e7e0      	b.n	800965a <_raise_r+0x12>

08009698 <raise>:
 8009698:	4b02      	ldr	r3, [pc, #8]	; (80096a4 <raise+0xc>)
 800969a:	4601      	mov	r1, r0
 800969c:	6818      	ldr	r0, [r3, #0]
 800969e:	f7ff bfd3 	b.w	8009648 <_raise_r>
 80096a2:	bf00      	nop
 80096a4:	2000000c 	.word	0x2000000c

080096a8 <_kill_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d07      	ldr	r5, [pc, #28]	; (80096c8 <_kill_r+0x20>)
 80096ac:	2300      	movs	r3, #0
 80096ae:	4604      	mov	r4, r0
 80096b0:	4608      	mov	r0, r1
 80096b2:	4611      	mov	r1, r2
 80096b4:	602b      	str	r3, [r5, #0]
 80096b6:	f7f8 fce5 	bl	8002084 <_kill>
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	d102      	bne.n	80096c4 <_kill_r+0x1c>
 80096be:	682b      	ldr	r3, [r5, #0]
 80096c0:	b103      	cbz	r3, 80096c4 <_kill_r+0x1c>
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	bd38      	pop	{r3, r4, r5, pc}
 80096c6:	bf00      	nop
 80096c8:	20000420 	.word	0x20000420

080096cc <_getpid_r>:
 80096cc:	f7f8 bcd2 	b.w	8002074 <_getpid>

080096d0 <_init>:
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d2:	bf00      	nop
 80096d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d6:	bc08      	pop	{r3}
 80096d8:	469e      	mov	lr, r3
 80096da:	4770      	bx	lr

080096dc <_fini>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	bf00      	nop
 80096e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096e2:	bc08      	pop	{r3}
 80096e4:	469e      	mov	lr, r3
 80096e6:	4770      	bx	lr
