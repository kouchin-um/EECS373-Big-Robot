
L298N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5bc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  0800b780  0800b780  0001b780  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbfc  0800bbfc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800bbfc  0800bbfc  0001bbfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc04  0800bc04  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc04  0800bc04  0001bc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc08  0800bc08  0001bc08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800bc0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001dc  0800bde8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d0  0800bde8  000204d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac04  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5d  00000000  00000000  0003ae10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  0003d970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001318  00000000  00000000  0003ed60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002be1f  00000000  00000000  00040078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017fe3  00000000  00000000  0006be97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c90b  00000000  00000000  00083e7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00190785  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065b0  00000000  00000000  001907d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b764 	.word	0x0800b764

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	0800b764 	.word	0x0800b764

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b96e 	b.w	8000f6c <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9d08      	ldr	r5, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	468c      	mov	ip, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f040 8083 	bne.w	8000dbe <__udivmoddi4+0x116>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4617      	mov	r7, r2
 8000cbc:	d947      	bls.n	8000d4e <__udivmoddi4+0xa6>
 8000cbe:	fab2 f282 	clz	r2, r2
 8000cc2:	b142      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	f1c2 0020 	rsb	r0, r2, #32
 8000cc8:	fa24 f000 	lsr.w	r0, r4, r0
 8000ccc:	4091      	lsls	r1, r2
 8000cce:	4097      	lsls	r7, r2
 8000cd0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbbc f6f8 	udiv	r6, ip, r8
 8000ce0:	fa1f fe87 	uxth.w	lr, r7
 8000ce4:	fb08 c116 	mls	r1, r8, r6, ip
 8000ce8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cec:	fb06 f10e 	mul.w	r1, r6, lr
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18fb      	adds	r3, r7, r3
 8000cf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cfa:	f080 8119 	bcs.w	8000f30 <__udivmoddi4+0x288>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8116 	bls.w	8000f30 <__udivmoddi4+0x288>
 8000d04:	3e02      	subs	r6, #2
 8000d06:	443b      	add	r3, r7
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d10:	fb08 3310 	mls	r3, r8, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	193c      	adds	r4, r7, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8105 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f240 8102 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d30:	3802      	subs	r0, #2
 8000d32:	443c      	add	r4, r7
 8000d34:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d38:	eba4 040e 	sub.w	r4, r4, lr
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	b11d      	cbz	r5, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c5 4300 	strd	r4, r3, [r5]
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	b902      	cbnz	r2, 8000d52 <__udivmoddi4+0xaa>
 8000d50:	deff      	udf	#255	; 0xff
 8000d52:	fab2 f282 	clz	r2, r2
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	d150      	bne.n	8000dfc <__udivmoddi4+0x154>
 8000d5a:	1bcb      	subs	r3, r1, r7
 8000d5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d60:	fa1f f887 	uxth.w	r8, r7
 8000d64:	2601      	movs	r6, #1
 8000d66:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d6a:	0c21      	lsrs	r1, r4, #16
 8000d6c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb08 f30c 	mul.w	r3, r8, ip
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0xe2>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	f200 80e9 	bhi.w	8000f5c <__udivmoddi4+0x2b4>
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	b2a3      	uxth	r3, r4
 8000d90:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d94:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d98:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d9c:	fb08 f800 	mul.w	r8, r8, r0
 8000da0:	45a0      	cmp	r8, r4
 8000da2:	d907      	bls.n	8000db4 <__udivmoddi4+0x10c>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x10a>
 8000dac:	45a0      	cmp	r8, r4
 8000dae:	f200 80d9 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000db2:	4618      	mov	r0, r3
 8000db4:	eba4 0408 	sub.w	r4, r4, r8
 8000db8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dbc:	e7bf      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x12e>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80b1 	beq.w	8000f2a <__udivmoddi4+0x282>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x1cc>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0x140>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80b8 	bhi.w	8000f58 <__udivmoddi4+0x2b0>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0103 	sbc.w	r1, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	468c      	mov	ip, r1
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0a8      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000df6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dfa:	e7a5      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000dfc:	f1c2 0320 	rsb	r3, r2, #32
 8000e00:	fa20 f603 	lsr.w	r6, r0, r3
 8000e04:	4097      	lsls	r7, r2
 8000e06:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0e:	40d9      	lsrs	r1, r3
 8000e10:	4330      	orrs	r0, r6
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e18:	fa1f f887 	uxth.w	r8, r7
 8000e1c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e24:	fb06 f108 	mul.w	r1, r6, r8
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x19c>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e36:	f080 808d 	bcs.w	8000f54 <__udivmoddi4+0x2ac>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 808a 	bls.w	8000f54 <__udivmoddi4+0x2ac>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b281      	uxth	r1, r0
 8000e48:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e54:	fb00 f308 	mul.w	r3, r0, r8
 8000e58:	428b      	cmp	r3, r1
 8000e5a:	d907      	bls.n	8000e6c <__udivmoddi4+0x1c4>
 8000e5c:	1879      	adds	r1, r7, r1
 8000e5e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e62:	d273      	bcs.n	8000f4c <__udivmoddi4+0x2a4>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d971      	bls.n	8000f4c <__udivmoddi4+0x2a4>
 8000e68:	3802      	subs	r0, #2
 8000e6a:	4439      	add	r1, r7
 8000e6c:	1acb      	subs	r3, r1, r3
 8000e6e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e72:	e778      	b.n	8000d66 <__udivmoddi4+0xbe>
 8000e74:	f1c6 0c20 	rsb	ip, r6, #32
 8000e78:	fa03 f406 	lsl.w	r4, r3, r6
 8000e7c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e80:	431c      	orrs	r4, r3
 8000e82:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e8e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e92:	431f      	orrs	r7, r3
 8000e94:	0c3b      	lsrs	r3, r7, #16
 8000e96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9a:	fa1f f884 	uxth.w	r8, r4
 8000e9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ea2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ea6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eaa:	458a      	cmp	sl, r1
 8000eac:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb0:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb4:	d908      	bls.n	8000ec8 <__udivmoddi4+0x220>
 8000eb6:	1861      	adds	r1, r4, r1
 8000eb8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ebc:	d248      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000ebe:	458a      	cmp	sl, r1
 8000ec0:	d946      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000ec2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ec6:	4421      	add	r1, r4
 8000ec8:	eba1 010a 	sub.w	r1, r1, sl
 8000ecc:	b2bf      	uxth	r7, r7
 8000ece:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eda:	fb00 f808 	mul.w	r8, r0, r8
 8000ede:	45b8      	cmp	r8, r7
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x24a>
 8000ee2:	19e7      	adds	r7, r4, r7
 8000ee4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ee8:	d22e      	bcs.n	8000f48 <__udivmoddi4+0x2a0>
 8000eea:	45b8      	cmp	r8, r7
 8000eec:	d92c      	bls.n	8000f48 <__udivmoddi4+0x2a0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	4427      	add	r7, r4
 8000ef2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ef6:	eba7 0708 	sub.w	r7, r7, r8
 8000efa:	fba0 8902 	umull	r8, r9, r0, r2
 8000efe:	454f      	cmp	r7, r9
 8000f00:	46c6      	mov	lr, r8
 8000f02:	4649      	mov	r1, r9
 8000f04:	d31a      	bcc.n	8000f3c <__udivmoddi4+0x294>
 8000f06:	d017      	beq.n	8000f38 <__udivmoddi4+0x290>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x27a>
 8000f0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f0e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f12:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f16:	40f2      	lsrs	r2, r6
 8000f18:	ea4c 0202 	orr.w	r2, ip, r2
 8000f1c:	40f7      	lsrs	r7, r6
 8000f1e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f22:	2600      	movs	r6, #0
 8000f24:	4631      	mov	r1, r6
 8000f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e70b      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e9      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6fd      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f38:	4543      	cmp	r3, r8
 8000f3a:	d2e5      	bcs.n	8000f08 <__udivmoddi4+0x260>
 8000f3c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f40:	eb69 0104 	sbc.w	r1, r9, r4
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7df      	b.n	8000f08 <__udivmoddi4+0x260>
 8000f48:	4608      	mov	r0, r1
 8000f4a:	e7d2      	b.n	8000ef2 <__udivmoddi4+0x24a>
 8000f4c:	4660      	mov	r0, ip
 8000f4e:	e78d      	b.n	8000e6c <__udivmoddi4+0x1c4>
 8000f50:	4681      	mov	r9, r0
 8000f52:	e7b9      	b.n	8000ec8 <__udivmoddi4+0x220>
 8000f54:	4666      	mov	r6, ip
 8000f56:	e775      	b.n	8000e44 <__udivmoddi4+0x19c>
 8000f58:	4630      	mov	r0, r6
 8000f5a:	e74a      	b.n	8000df2 <__udivmoddi4+0x14a>
 8000f5c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f60:	4439      	add	r1, r7
 8000f62:	e713      	b.n	8000d8c <__udivmoddi4+0xe4>
 8000f64:	3802      	subs	r0, #2
 8000f66:	443c      	add	r4, r7
 8000f68:	e724      	b.n	8000db4 <__udivmoddi4+0x10c>
 8000f6a:	bf00      	nop

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <int12ToFloat>:
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef ret;
int current_angle;
int lock_on = 0;

int int12ToFloat(uint16_t val) {
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	4603      	mov	r3, r0
 8000f78:	80fb      	strh	r3, [r7, #6]
  int16_t sVal =
      (val << 4); // shift to left so that sign bit of 12 bit integer number is
 8000f7a:	88fb      	ldrh	r3, [r7, #6]
 8000f7c:	011b      	lsls	r3, r3, #4
  int16_t sVal =
 8000f7e:	81fb      	strh	r3, [r7, #14]
                  // placed on sign bit of 16 bit signed integer number
  return sVal >> 4; // shift back the signed number, return converts to float
 8000f80:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f84:	111b      	asrs	r3, r3, #4
 8000f86:	b21b      	sxth	r3, r3
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <startShooting>:

void startShooting() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 800);
 8000f98:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <startShooting+0x2c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000fa0:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,  1);	// PB12
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa8:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <startShooting+0x30>)
 8000faa:	f002 fb01 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,  0);	// PB13
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fb4:	4803      	ldr	r0, [pc, #12]	; (8000fc4 <startShooting+0x30>)
 8000fb6:	f002 fafb 	bl	80035b0 <HAL_GPIO_WritePin>
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000218 	.word	0x20000218
 8000fc4:	48000400 	.word	0x48000400

08000fc8 <stopShooting>:

void stopShooting() {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <stopShooting+0x28>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,  0);	// PB12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fda:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <stopShooting+0x2c>)
 8000fdc:	f002 fae8 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,  0);	// PB13
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <stopShooting+0x2c>)
 8000fe8:	f002 fae2 	bl	80035b0 <HAL_GPIO_WritePin>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	20000218 	.word	0x20000218
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <aimMode>:


void aimMode() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b0ec      	sub	sp, #432	; 0x1b0
 8000ffc:	af02      	add	r7, sp, #8
	float pixels[64] = {};
 8000ffe:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001002:	4618      	mov	r0, r3
 8001004:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001008:	461a      	mov	r2, r3
 800100a:	2100      	movs	r1, #0
 800100c:	f007 feb8 	bl	8008d80 <memset>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);		// set the new pulse width
 8001010:	4bbe      	ldr	r3, [pc, #760]	; (800130c <aimMode+0x314>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);		// set the new pulse width
 800101a:	4bbd      	ldr	r3, [pc, #756]	; (8001310 <aimMode+0x318>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
	int timer = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
	while (1) {
		GPIO_PinState button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 800102a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102e:	48b9      	ldr	r0, [pc, #740]	; (8001314 <aimMode+0x31c>)
 8001030:	f002 faa6 	bl	8003580 <HAL_GPIO_ReadPin>
 8001034:	4603      	mov	r3, r0
 8001036:	f887 3187 	strb.w	r3, [r7, #391]	; 0x187
		if (armed == 0 || button == 1 || timer >= 2000) {
 800103a:	4bb7      	ldr	r3, [pc, #732]	; (8001318 <aimMode+0x320>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d008      	beq.n	8001054 <aimMode+0x5c>
 8001042:	f897 3187 	ldrb.w	r3, [r7, #391]	; 0x187
 8001046:	2b01      	cmp	r3, #1
 8001048:	d004      	beq.n	8001054 <aimMode+0x5c>
 800104a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800104e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001052:	db27      	blt.n	80010a4 <aimMode+0xac>
		  armed = 0;
 8001054:	4bb0      	ldr	r3, [pc, #704]	; (8001318 <aimMode+0x320>)
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
		  HAL_Delay(500);
 800105a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800105e:	f001 ff0d 	bl	8002e7c <HAL_Delay>
		  current_angle = -15;
 8001062:	4bae      	ldr	r3, [pc, #696]	; (800131c <aimMode+0x324>)
 8001064:	f06f 020e 	mvn.w	r2, #14
 8001068:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4 = H
 800106a:	2201      	movs	r2, #1
 800106c:	2110      	movs	r1, #16
 800106e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001072:	f002 fa9d 	bl	80035b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4 = H
 8001076:	2201      	movs	r2, #1
 8001078:	2110      	movs	r1, #16
 800107a:	48a9      	ldr	r0, [pc, #676]	; (8001320 <aimMode+0x328>)
 800107c:	f002 fa98 	bl	80035b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3 = H
 8001080:	2201      	movs	r2, #1
 8001082:	2108      	movs	r1, #8
 8001084:	48a6      	ldr	r0, [pc, #664]	; (8001320 <aimMode+0x328>)
 8001086:	f002 fa93 	bl	80035b0 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5 = H
 800108a:	2201      	movs	r2, #1
 800108c:	2120      	movs	r1, #32
 800108e:	48a4      	ldr	r0, [pc, #656]	; (8001320 <aimMode+0x328>)
 8001090:	f002 fa8e 	bl	80035b0 <HAL_GPIO_WritePin>
		   __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (240 - 60) * (current_angle + 90) / 180 + 60);		// set the new pulse width
 8001094:	4ba1      	ldr	r3, [pc, #644]	; (800131c <aimMode+0x324>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f103 0296 	add.w	r2, r3, #150	; 0x96
 800109c:	4ba1      	ldr	r3, [pc, #644]	; (8001324 <aimMode+0x32c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	63da      	str	r2, [r3, #60]	; 0x3c
			  // Hold
		  }

		  HAL_Delay(100);
	}
}
 80010a2:	e18b      	b.n	80013bc <aimMode+0x3c4>
		timer+=10;
 80010a4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80010a8:	330a      	adds	r3, #10
 80010aa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		  uint8_t rawArray[128]= {AMG88xx_PIXEL_OFFSET};	// float is 16-bit, so buffer size needs to be at least 64*2=128
 80010ae:	463b      	mov	r3, r7
 80010b0:	2280      	movs	r2, #128	; 0x80
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	3304      	adds	r3, #4
 80010b6:	227c      	movs	r2, #124	; 0x7c
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f007 fe60 	bl	8008d80 <memset>
		  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &rawArray[0], 1, 1000);
 80010c0:	463a      	mov	r2, r7
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	2301      	movs	r3, #1
 80010ca:	21d2      	movs	r1, #210	; 0xd2
 80010cc:	4896      	ldr	r0, [pc, #600]	; (8001328 <aimMode+0x330>)
 80010ce:	f002 fb17 	bl	8003700 <HAL_I2C_Master_Transmit>
 80010d2:	4603      	mov	r3, r0
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b95      	ldr	r3, [pc, #596]	; (800132c <aimMode+0x334>)
 80010d8:	701a      	strb	r2, [r3, #0]
		  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &rawArray[0], 128, 1000);
 80010da:	463a      	mov	r2, r7
 80010dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	21d3      	movs	r1, #211	; 0xd3
 80010e6:	4890      	ldr	r0, [pc, #576]	; (8001328 <aimMode+0x330>)
 80010e8:	f002 fbfe 	bl	80038e8 <HAL_I2C_Master_Receive>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b8e      	ldr	r3, [pc, #568]	; (800132c <aimMode+0x334>)
 80010f2:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < 64; i++) {
 80010f4:	2300      	movs	r3, #0
 80010f6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80010fa:	e03a      	b.n	8001172 <aimMode+0x17a>
		    uint8_t pos = i << 1;
 80010fc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	f887 3186 	strb.w	r3, [r7, #390]	; 0x186
		    recast = ((uint16_t)rawArray[pos + 1] << 8) | ((uint16_t)rawArray[pos]);
 8001108:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800110c:	3301      	adds	r3, #1
 800110e:	463a      	mov	r2, r7
 8001110:	5cd3      	ldrb	r3, [r2, r3]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	f897 3186 	ldrb.w	r3, [r7, #390]	; 0x186
 800111a:	4639      	mov	r1, r7
 800111c:	5ccb      	ldrb	r3, [r1, r3]
 800111e:	b21b      	sxth	r3, r3
 8001120:	4313      	orrs	r3, r2
 8001122:	b21b      	sxth	r3, r3
 8001124:	f8a7 3184 	strh.w	r3, [r7, #388]	; 0x184
		    converted = int12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;
 8001128:	f8b7 3184 	ldrh.w	r3, [r7, #388]	; 0x184
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff1f 	bl	8000f70 <int12ToFloat>
 8001132:	4603      	mov	r3, r0
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa0d 	bl	8000554 <__aeabi_i2d>
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b7c      	ldr	r3, [pc, #496]	; (8001330 <aimMode+0x338>)
 8001140:	f7ff fa72 	bl	8000628 <__aeabi_dmul>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff fd44 	bl	8000bd8 <__aeabi_d2f>
 8001150:	4603      	mov	r3, r0
 8001152:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
		    pixels[i] = converted;
 8001156:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800115a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001166:	601a      	str	r2, [r3, #0]
		  for (int i = 0; i < 64; i++) {
 8001168:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800116c:	3301      	adds	r3, #1
 800116e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001172:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001176:	2b3f      	cmp	r3, #63	; 0x3f
 8001178:	ddc0      	ble.n	80010fc <aimMode+0x104>
		  int largest_x = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		  int largest_y = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		  float largest_pix = 0;
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
		  for (int i = 0; i < 8; ++i) {
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8001194:	e039      	b.n	800120a <aimMode+0x212>
			  for (int j = 0; j < 8; ++j) {
 8001196:	2300      	movs	r3, #0
 8001198:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800119c:	e02c      	b.n	80011f8 <aimMode+0x200>
				  if (pixels[i*8 + j] > largest_pix) {
 800119e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011a2:	00da      	lsls	r2, r3, #3
 80011a4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011a8:	4413      	add	r3, r2
 80011aa:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	edd3 7a00 	vldr	s15, [r3]
 80011b6:	ed97 7a65 	vldr	s14, [r7, #404]	; 0x194
 80011ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d514      	bpl.n	80011ee <aimMode+0x1f6>
		    			largest_x = j;
 80011c4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
		    			largest_y = i;
 80011cc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011d0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
		    			largest_pix = pixels[i*8 + j];
 80011d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80011d8:	00da      	lsls	r2, r3, #3
 80011da:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011de:	4413      	add	r3, r2
 80011e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
			  for (int j = 0; j < 8; ++j) {
 80011ee:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80011f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	ddce      	ble.n	800119e <aimMode+0x1a6>
		  for (int i = 0; i < 8; ++i) {
 8001200:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001204:	3301      	adds	r3, #1
 8001206:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800120a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800120e:	2b07      	cmp	r3, #7
 8001210:	ddc1      	ble.n	8001196 <aimMode+0x19e>
		  if (largest_x < 3) {
 8001212:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8001216:	2b02      	cmp	r3, #2
 8001218:	dc1d      	bgt.n	8001256 <aimMode+0x25e>
			  printf("Turn Left\n\r");
 800121a:	4846      	ldr	r0, [pc, #280]	; (8001334 <aimMode+0x33c>)
 800121c:	f008 fa22 	bl	8009664 <iprintf>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4 = L
 8001220:	2200      	movs	r2, #0
 8001222:	2110      	movs	r1, #16
 8001224:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001228:	f002 f9c2 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4 = H
 800122c:	2201      	movs	r2, #1
 800122e:	2110      	movs	r1, #16
 8001230:	483b      	ldr	r0, [pc, #236]	; (8001320 <aimMode+0x328>)
 8001232:	f002 f9bd 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3 = High
 8001236:	2201      	movs	r2, #1
 8001238:	2108      	movs	r1, #8
 800123a:	4839      	ldr	r0, [pc, #228]	; (8001320 <aimMode+0x328>)
 800123c:	f002 f9b8 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5 = LOW
 8001240:	2200      	movs	r2, #0
 8001242:	2120      	movs	r1, #32
 8001244:	4836      	ldr	r0, [pc, #216]	; (8001320 <aimMode+0x328>)
 8001246:	f002 f9b3 	bl	80035b0 <HAL_GPIO_WritePin>
			  position--;
 800124a:	4b3b      	ldr	r3, [pc, #236]	; (8001338 <aimMode+0x340>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	3b01      	subs	r3, #1
 8001250:	4a39      	ldr	r2, [pc, #228]	; (8001338 <aimMode+0x340>)
 8001252:	6013      	str	r3, [r2, #0]
 8001254:	e03e      	b.n	80012d4 <aimMode+0x2dc>
		  }else if (largest_x > 4) {
 8001256:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800125a:	2b04      	cmp	r3, #4
 800125c:	dd1d      	ble.n	800129a <aimMode+0x2a2>
			  printf("Turn Right\n\r");
 800125e:	4837      	ldr	r0, [pc, #220]	; (800133c <aimMode+0x344>)
 8001260:	f008 fa00 	bl	8009664 <iprintf>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4 = High
 8001264:	2201      	movs	r2, #1
 8001266:	2110      	movs	r1, #16
 8001268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126c:	f002 f9a0 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4 = LOW
 8001270:	2200      	movs	r2, #0
 8001272:	2110      	movs	r1, #16
 8001274:	482a      	ldr	r0, [pc, #168]	; (8001320 <aimMode+0x328>)
 8001276:	f002 f99b 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3 = L
 800127a:	2200      	movs	r2, #0
 800127c:	2108      	movs	r1, #8
 800127e:	4828      	ldr	r0, [pc, #160]	; (8001320 <aimMode+0x328>)
 8001280:	f002 f996 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5 = H
 8001284:	2201      	movs	r2, #1
 8001286:	2120      	movs	r1, #32
 8001288:	4825      	ldr	r0, [pc, #148]	; (8001320 <aimMode+0x328>)
 800128a:	f002 f991 	bl	80035b0 <HAL_GPIO_WritePin>
			  position++;
 800128e:	4b2a      	ldr	r3, [pc, #168]	; (8001338 <aimMode+0x340>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	3301      	adds	r3, #1
 8001294:	4a28      	ldr	r2, [pc, #160]	; (8001338 <aimMode+0x340>)
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	e01c      	b.n	80012d4 <aimMode+0x2dc>
			  printf("Hold Still\n\r");
 800129a:	4829      	ldr	r0, [pc, #164]	; (8001340 <aimMode+0x348>)
 800129c:	f008 f9e2 	bl	8009664 <iprintf>
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4 = H
 80012a0:	2201      	movs	r2, #1
 80012a2:	2110      	movs	r1, #16
 80012a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a8:	f002 f982 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4 = H
 80012ac:	2201      	movs	r2, #1
 80012ae:	2110      	movs	r1, #16
 80012b0:	481b      	ldr	r0, [pc, #108]	; (8001320 <aimMode+0x328>)
 80012b2:	f002 f97d 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3 = H
 80012b6:	2201      	movs	r2, #1
 80012b8:	2108      	movs	r1, #8
 80012ba:	4819      	ldr	r0, [pc, #100]	; (8001320 <aimMode+0x328>)
 80012bc:	f002 f978 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5 = H
 80012c0:	2201      	movs	r2, #1
 80012c2:	2120      	movs	r1, #32
 80012c4:	4816      	ldr	r0, [pc, #88]	; (8001320 <aimMode+0x328>)
 80012c6:	f002 f973 	bl	80035b0 <HAL_GPIO_WritePin>
			  lock_on += 1;
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <aimMode+0x34c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <aimMode+0x34c>)
 80012d2:	6013      	str	r3, [r2, #0]
		  if (lock_on >= CLEARTOFIRE) {
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <aimMode+0x34c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b09      	cmp	r3, #9
 80012da:	dd41      	ble.n	8001360 <aimMode+0x368>
			  startShooting();
 80012dc:	f7ff fe5a 	bl	8000f94 <startShooting>
			  for (int t = 0; t < 100; ++t) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80012e6:	e00b      	b.n	8001300 <aimMode+0x308>
				  if (armed == 0) {
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <aimMode+0x320>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d02b      	beq.n	8001348 <aimMode+0x350>
				  HAL_Delay(45);
 80012f0:	202d      	movs	r0, #45	; 0x2d
 80012f2:	f001 fdc3 	bl	8002e7c <HAL_Delay>
			  for (int t = 0; t < 100; ++t) {
 80012f6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80012fa:	3301      	adds	r3, #1
 80012fc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001300:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001304:	2b63      	cmp	r3, #99	; 0x63
 8001306:	ddef      	ble.n	80012e8 <aimMode+0x2f0>
 8001308:	e01f      	b.n	800134a <aimMode+0x352>
 800130a:	bf00      	nop
 800130c:	20000390 	.word	0x20000390
 8001310:	200003dc 	.word	0x200003dc
 8001314:	48000800 	.word	0x48000800
 8001318:	200001fc 	.word	0x200001fc
 800131c:	2000038c 	.word	0x2000038c
 8001320:	48000400 	.word	0x48000400
 8001324:	200002b0 	.word	0x200002b0
 8001328:	20000264 	.word	0x20000264
 800132c:	200004b8 	.word	0x200004b8
 8001330:	3fd00000 	.word	0x3fd00000
 8001334:	0800b780 	.word	0x0800b780
 8001338:	20000204 	.word	0x20000204
 800133c:	0800b78c 	.word	0x0800b78c
 8001340:	0800b79c 	.word	0x0800b79c
 8001344:	20000208 	.word	0x20000208
					  break;
 8001348:	bf00      	nop
			  stopShooting();
 800134a:	f7ff fe3d 	bl	8000fc8 <stopShooting>
			  lock_on = 0;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <aimMode+0x3cc>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
			  timer += 1000;
 8001354:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001358:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800135c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
		  if (largest_y < 3) {
 8001360:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001364:	2b02      	cmp	r3, #2
 8001366:	dc11      	bgt.n	800138c <aimMode+0x394>
			  if (current_angle >= -13) {
 8001368:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <aimMode+0x3d0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f113 0f0d 	cmn.w	r3, #13
 8001370:	db20      	blt.n	80013b4 <aimMode+0x3bc>
				  current_angle -= 2;
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <aimMode+0x3d0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	3b02      	subs	r3, #2
 8001378:	4a13      	ldr	r2, [pc, #76]	; (80013c8 <aimMode+0x3d0>)
 800137a:	6013      	str	r3, [r2, #0]
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (240 - 60) * (current_angle + 90) / 180 + 60);		// set the new pulse width
 800137c:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <aimMode+0x3d0>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f103 0296 	add.w	r2, r3, #150	; 0x96
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <aimMode+0x3d4>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	63da      	str	r2, [r3, #60]	; 0x3c
 800138a:	e013      	b.n	80013b4 <aimMode+0x3bc>
		  } else if (largest_y > 4) {
 800138c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8001390:	2b04      	cmp	r3, #4
 8001392:	dd0f      	ble.n	80013b4 <aimMode+0x3bc>
			  if (current_angle <= 23) {
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <aimMode+0x3d0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b17      	cmp	r3, #23
 800139a:	dc0b      	bgt.n	80013b4 <aimMode+0x3bc>
				  current_angle += 2;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <aimMode+0x3d0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3302      	adds	r3, #2
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <aimMode+0x3d0>)
 80013a4:	6013      	str	r3, [r2, #0]
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (240 - 60) * (current_angle + 90) / 180 + 60);		// set the new pulse width
 80013a6:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <aimMode+0x3d0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f103 0296 	add.w	r2, r3, #150	; 0x96
 80013ae:	4b07      	ldr	r3, [pc, #28]	; (80013cc <aimMode+0x3d4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
		  HAL_Delay(100);
 80013b4:	2064      	movs	r0, #100	; 0x64
 80013b6:	f001 fd61 	bl	8002e7c <HAL_Delay>
	while (1) {
 80013ba:	e636      	b.n	800102a <aimMode+0x32>
}
 80013bc:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000208 	.word	0x20000208
 80013c8:	2000038c 	.word	0x2000038c
 80013cc:	200002b0 	.word	0x200002b0

080013d0 <turnAround>:

void turnAround() {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
	// Turn in clockwise direction
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, BASE_SPEED);		// set the new pulse width
 80013d6:	4b83      	ldr	r3, [pc, #524]	; (80015e4 <turnAround+0x214>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, BASE_SPEED);
 80013e0:	4b81      	ldr	r3, [pc, #516]	; (80015e8 <turnAround+0x218>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34

	if (position >= 0) {
 80013ea:	4b80      	ldr	r3, [pc, #512]	; (80015ec <turnAround+0x21c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	db15      	blt.n	800141e <turnAround+0x4e>
	// right
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 80013f2:	2200      	movs	r2, #0
 80013f4:	2110      	movs	r1, #16
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013fa:	f002 f8d9 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4
 80013fe:	2201      	movs	r2, #1
 8001400:	2110      	movs	r1, #16
 8001402:	487b      	ldr	r0, [pc, #492]	; (80015f0 <turnAround+0x220>)
 8001404:	f002 f8d4 	bl	80035b0 <HAL_GPIO_WritePin>
	// left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 8001408:	2201      	movs	r2, #1
 800140a:	2108      	movs	r1, #8
 800140c:	4878      	ldr	r0, [pc, #480]	; (80015f0 <turnAround+0x220>)
 800140e:	f002 f8cf 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 8001412:	2200      	movs	r2, #0
 8001414:	2120      	movs	r1, #32
 8001416:	4876      	ldr	r0, [pc, #472]	; (80015f0 <turnAround+0x220>)
 8001418:	f002 f8ca 	bl	80035b0 <HAL_GPIO_WritePin>
 800141c:	e014      	b.n	8001448 <turnAround+0x78>
	}
	else {
		// right
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 800141e:	2201      	movs	r2, #1
 8001420:	2110      	movs	r1, #16
 8001422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001426:	f002 f8c3 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 800142a:	2200      	movs	r2, #0
 800142c:	2110      	movs	r1, #16
 800142e:	4870      	ldr	r0, [pc, #448]	; (80015f0 <turnAround+0x220>)
 8001430:	f002 f8be 	bl	80035b0 <HAL_GPIO_WritePin>
			// left
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 8001434:	2200      	movs	r2, #0
 8001436:	2108      	movs	r1, #8
 8001438:	486d      	ldr	r0, [pc, #436]	; (80015f0 <turnAround+0x220>)
 800143a:	f002 f8b9 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5
 800143e:	2201      	movs	r2, #1
 8001440:	2120      	movs	r1, #32
 8001442:	486b      	ldr	r0, [pc, #428]	; (80015f0 <turnAround+0x220>)
 8001444:	f002 f8b4 	bl	80035b0 <HAL_GPIO_WritePin>
	}

	GPIO_PinState leftIR = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001448:	2102      	movs	r1, #2
 800144a:	486a      	ldr	r0, [pc, #424]	; (80015f4 <turnAround+0x224>)
 800144c:	f002 f898 	bl	8003580 <HAL_GPIO_ReadPin>
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
	GPIO_PinState rightIR = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0);
 8001454:	2101      	movs	r1, #1
 8001456:	4868      	ldr	r0, [pc, #416]	; (80015f8 <turnAround+0x228>)
 8001458:	f002 f892 	bl	8003580 <HAL_GPIO_ReadPin>
 800145c:	4603      	mov	r3, r0
 800145e:	71bb      	strb	r3, [r7, #6]
	int timer = 0;
 8001460:	2300      	movs	r3, #0
 8001462:	603b      	str	r3, [r7, #0]
	while (leftIR == 0 && rightIR == 0) {
 8001464:	e09d      	b.n	80015a2 <turnAround+0x1d2>
		leftIR = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001466:	2102      	movs	r1, #2
 8001468:	4862      	ldr	r0, [pc, #392]	; (80015f4 <turnAround+0x224>)
 800146a:	f002 f889 	bl	8003580 <HAL_GPIO_ReadPin>
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
		rightIR = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0);
 8001472:	2101      	movs	r1, #1
 8001474:	4860      	ldr	r0, [pc, #384]	; (80015f8 <turnAround+0x228>)
 8001476:	f002 f883 	bl	8003580 <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	71bb      	strb	r3, [r7, #6]
		if (timer >= 30000) {
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f247 522f 	movw	r2, #29999	; 0x752f
 8001484:	4293      	cmp	r3, r2
 8001486:	f340 8089 	ble.w	800159c <turnAround+0x1cc>
			if (position >= 0) {
 800148a:	4b58      	ldr	r3, [pc, #352]	; (80015ec <turnAround+0x21c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db41      	blt.n	8001516 <turnAround+0x146>
			// right
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 8001492:	2201      	movs	r2, #1
 8001494:	2110      	movs	r1, #16
 8001496:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149a:	f002 f889 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 800149e:	2200      	movs	r2, #0
 80014a0:	2110      	movs	r1, #16
 80014a2:	4853      	ldr	r0, [pc, #332]	; (80015f0 <turnAround+0x220>)
 80014a4:	f002 f884 	bl	80035b0 <HAL_GPIO_WritePin>
			// left
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 80014a8:	2200      	movs	r2, #0
 80014aa:	2108      	movs	r1, #8
 80014ac:	4850      	ldr	r0, [pc, #320]	; (80015f0 <turnAround+0x220>)
 80014ae:	f002 f87f 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5
 80014b2:	2201      	movs	r2, #1
 80014b4:	2120      	movs	r1, #32
 80014b6:	484e      	ldr	r0, [pc, #312]	; (80015f0 <turnAround+0x220>)
 80014b8:	f002 f87a 	bl	80035b0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, HIGH_SPEED);		// right
 80014bc:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <turnAround+0x214>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, BACK_SPEED);		// left
 80014c6:	4b48      	ldr	r3, [pc, #288]	; (80015e8 <turnAround+0x218>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f44f 7248 	mov.w	r2, #800	; 0x320
 80014ce:	635a      	str	r2, [r3, #52]	; 0x34

			HAL_Delay(50);
 80014d0:	2032      	movs	r0, #50	; 0x32
 80014d2:	f001 fcd3 	bl	8002e7c <HAL_Delay>

			// right
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 80014d6:	2200      	movs	r2, #0
 80014d8:	2110      	movs	r1, #16
 80014da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014de:	f002 f867 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4
 80014e2:	2201      	movs	r2, #1
 80014e4:	2110      	movs	r1, #16
 80014e6:	4842      	ldr	r0, [pc, #264]	; (80015f0 <turnAround+0x220>)
 80014e8:	f002 f862 	bl	80035b0 <HAL_GPIO_WritePin>
			// left
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 80014ec:	2201      	movs	r2, #1
 80014ee:	2108      	movs	r1, #8
 80014f0:	483f      	ldr	r0, [pc, #252]	; (80015f0 <turnAround+0x220>)
 80014f2:	f002 f85d 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 80014f6:	2200      	movs	r2, #0
 80014f8:	2120      	movs	r1, #32
 80014fa:	483d      	ldr	r0, [pc, #244]	; (80015f0 <turnAround+0x220>)
 80014fc:	f002 f858 	bl	80035b0 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, BACK_SPEED);		// right
 8001500:	4b38      	ldr	r3, [pc, #224]	; (80015e4 <turnAround+0x214>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001508:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, HIGH_SPEED);		// left
 800150a:	4b37      	ldr	r3, [pc, #220]	; (80015e8 <turnAround+0x218>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001512:	635a      	str	r2, [r3, #52]	; 0x34
 8001514:	e040      	b.n	8001598 <turnAround+0x1c8>
			} else {
				// right
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 8001516:	2200      	movs	r2, #0
 8001518:	2110      	movs	r1, #16
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f002 f847 	bl	80035b0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4
 8001522:	2201      	movs	r2, #1
 8001524:	2110      	movs	r1, #16
 8001526:	4832      	ldr	r0, [pc, #200]	; (80015f0 <turnAround+0x220>)
 8001528:	f002 f842 	bl	80035b0 <HAL_GPIO_WritePin>
							// left
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 800152c:	2201      	movs	r2, #1
 800152e:	2108      	movs	r1, #8
 8001530:	482f      	ldr	r0, [pc, #188]	; (80015f0 <turnAround+0x220>)
 8001532:	f002 f83d 	bl	80035b0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 8001536:	2200      	movs	r2, #0
 8001538:	2120      	movs	r1, #32
 800153a:	482d      	ldr	r0, [pc, #180]	; (80015f0 <turnAround+0x220>)
 800153c:	f002 f838 	bl	80035b0 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, BACK_SPEED);		// right
 8001540:	4b28      	ldr	r3, [pc, #160]	; (80015e4 <turnAround+0x214>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001548:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, HIGH_SPEED);		// left
 800154a:	4b27      	ldr	r3, [pc, #156]	; (80015e8 <turnAround+0x218>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

							HAL_Delay(50);
 8001554:	2032      	movs	r0, #50	; 0x32
 8001556:	f001 fc91 	bl	8002e7c <HAL_Delay>

							// right
							HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 800155a:	2201      	movs	r2, #1
 800155c:	2110      	movs	r1, #16
 800155e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001562:	f002 f825 	bl	80035b0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	4821      	ldr	r0, [pc, #132]	; (80015f0 <turnAround+0x220>)
 800156c:	f002 f820 	bl	80035b0 <HAL_GPIO_WritePin>
							// left
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 8001570:	2200      	movs	r2, #0
 8001572:	2108      	movs	r1, #8
 8001574:	481e      	ldr	r0, [pc, #120]	; (80015f0 <turnAround+0x220>)
 8001576:	f002 f81b 	bl	80035b0 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5
 800157a:	2201      	movs	r2, #1
 800157c:	2120      	movs	r1, #32
 800157e:	481c      	ldr	r0, [pc, #112]	; (80015f0 <turnAround+0x220>)
 8001580:	f002 f816 	bl	80035b0 <HAL_GPIO_WritePin>
							__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, HIGH_SPEED);		// right
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <turnAround+0x214>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
							__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, BACK_SPEED);		// left
 800158e:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <turnAround+0x218>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001596:	635a      	str	r2, [r3, #52]	; 0x34
			}

			timer = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]
		}
		timer++;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	3301      	adds	r3, #1
 80015a0:	603b      	str	r3, [r7, #0]
	while (leftIR == 0 && rightIR == 0) {
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d103      	bne.n	80015b0 <turnAround+0x1e0>
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f43f af5b 	beq.w	8001466 <turnAround+0x96>
	}
	// right
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 80015b0:	2200      	movs	r2, #0
 80015b2:	2110      	movs	r1, #16
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f001 fffa 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 80015bc:	2200      	movs	r2, #0
 80015be:	2110      	movs	r1, #16
 80015c0:	480b      	ldr	r0, [pc, #44]	; (80015f0 <turnAround+0x220>)
 80015c2:	f001 fff5 	bl	80035b0 <HAL_GPIO_WritePin>
	// left
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 80015c6:	2200      	movs	r2, #0
 80015c8:	2108      	movs	r1, #8
 80015ca:	4809      	ldr	r0, [pc, #36]	; (80015f0 <turnAround+0x220>)
 80015cc:	f001 fff0 	bl	80035b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 80015d0:	2200      	movs	r2, #0
 80015d2:	2120      	movs	r1, #32
 80015d4:	4806      	ldr	r0, [pc, #24]	; (80015f0 <turnAround+0x220>)
 80015d6:	f001 ffeb 	bl	80035b0 <HAL_GPIO_WritePin>
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000390 	.word	0x20000390
 80015e8:	200003dc 	.word	0x200003dc
 80015ec:	20000204 	.word	0x20000204
 80015f0:	48000400 	.word	0x48000400
 80015f4:	48000c00 	.word	0x48000c00
 80015f8:	48001800 	.word	0x48001800

080015fc <lineFollowingMode>:

void lineFollowingMode() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, BASE_SPEED);		// set the new pulse width
 8001602:	4b90      	ldr	r3, [pc, #576]	; (8001844 <lineFollowingMode+0x248>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f240 22ee 	movw	r2, #750	; 0x2ee
 800160a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, BASE_SPEED);
 800160c:	4b8e      	ldr	r3, [pc, #568]	; (8001848 <lineFollowingMode+0x24c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 8001616:	2201      	movs	r2, #1
 8001618:	2110      	movs	r1, #16
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f001 ffc7 	bl	80035b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 8001622:	2200      	movs	r2, #0
 8001624:	2110      	movs	r1, #16
 8001626:	4889      	ldr	r0, [pc, #548]	; (800184c <lineFollowingMode+0x250>)
 8001628:	f001 ffc2 	bl	80035b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 800162c:	2201      	movs	r2, #1
 800162e:	2108      	movs	r1, #8
 8001630:	4886      	ldr	r0, [pc, #536]	; (800184c <lineFollowingMode+0x250>)
 8001632:	f001 ffbd 	bl	80035b0 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 8001636:	2200      	movs	r2, #0
 8001638:	2120      	movs	r1, #32
 800163a:	4884      	ldr	r0, [pc, #528]	; (800184c <lineFollowingMode+0x250>)
 800163c:	f001 ffb8 	bl	80035b0 <HAL_GPIO_WritePin>
	int counter = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	60fb      	str	r3, [r7, #12]
	int go_home = 0;
 8001644:	2300      	movs	r3, #0
 8001646:	60bb      	str	r3, [r7, #8]
	while (1)
	  {
		GPIO_PinState button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001648:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800164c:	4880      	ldr	r0, [pc, #512]	; (8001850 <lineFollowingMode+0x254>)
 800164e:	f001 ff97 	bl	8003580 <HAL_GPIO_ReadPin>
 8001652:	4603      	mov	r3, r0
 8001654:	71fb      	strb	r3, [r7, #7]
		if (button == 1) {
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d11b      	bne.n	8001694 <lineFollowingMode+0x98>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 800165c:	2200      	movs	r2, #0
 800165e:	2110      	movs	r1, #16
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f001 ffa4 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 8001668:	2200      	movs	r2, #0
 800166a:	2110      	movs	r1, #16
 800166c:	4877      	ldr	r0, [pc, #476]	; (800184c <lineFollowingMode+0x250>)
 800166e:	f001 ff9f 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 8001672:	2200      	movs	r2, #0
 8001674:	2108      	movs	r1, #8
 8001676:	4875      	ldr	r0, [pc, #468]	; (800184c <lineFollowingMode+0x250>)
 8001678:	f001 ff9a 	bl	80035b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 800167c:	2200      	movs	r2, #0
 800167e:	2120      	movs	r1, #32
 8001680:	4872      	ldr	r0, [pc, #456]	; (800184c <lineFollowingMode+0x250>)
 8001682:	f001 ff95 	bl	80035b0 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001686:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800168a:	f001 fbf7 	bl	8002e7c <HAL_Delay>
		  aimMode();
 800168e:	f7ff fcb3 	bl	8000ff8 <aimMode>
		  break;
 8001692:	e0d3      	b.n	800183c <lineFollowingMode+0x240>
		}
		if (armed == 0) {
 8001694:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <lineFollowingMode+0x258>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d101      	bne.n	80016a0 <lineFollowingMode+0xa4>
			go_home = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	60bb      	str	r3, [r7, #8]
		}
		counter++;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3301      	adds	r3, #1
 80016a4:	60fb      	str	r3, [r7, #12]
		  GPIO_PinState leftIR = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80016a6:	2102      	movs	r1, #2
 80016a8:	486b      	ldr	r0, [pc, #428]	; (8001858 <lineFollowingMode+0x25c>)
 80016aa:	f001 ff69 	bl	8003580 <HAL_GPIO_ReadPin>
 80016ae:	4603      	mov	r3, r0
 80016b0:	71bb      	strb	r3, [r7, #6]
		  GPIO_PinState rightIR = HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_0);
 80016b2:	2101      	movs	r1, #1
 80016b4:	4869      	ldr	r0, [pc, #420]	; (800185c <lineFollowingMode+0x260>)
 80016b6:	f001 ff63 	bl	8003580 <HAL_GPIO_ReadPin>
 80016ba:	4603      	mov	r3, r0
 80016bc:	717b      	strb	r3, [r7, #5]
		  if (leftIR == 0 && rightIR == 0) {
 80016be:	79bb      	ldrb	r3, [r7, #6]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d122      	bne.n	800170a <lineFollowingMode+0x10e>
 80016c4:	797b      	ldrb	r3, [r7, #5]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11f      	bne.n	800170a <lineFollowingMode+0x10e>
			  // right
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 80016ca:	2201      	movs	r2, #1
 80016cc:	2110      	movs	r1, #16
 80016ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016d2:	f001 ff6d 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 80016d6:	2200      	movs	r2, #0
 80016d8:	2110      	movs	r1, #16
 80016da:	485c      	ldr	r0, [pc, #368]	; (800184c <lineFollowingMode+0x250>)
 80016dc:	f001 ff68 	bl	80035b0 <HAL_GPIO_WritePin>
			  // left
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 80016e0:	2201      	movs	r2, #1
 80016e2:	2108      	movs	r1, #8
 80016e4:	4859      	ldr	r0, [pc, #356]	; (800184c <lineFollowingMode+0x250>)
 80016e6:	f001 ff63 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 80016ea:	2200      	movs	r2, #0
 80016ec:	2120      	movs	r1, #32
 80016ee:	4857      	ldr	r0, [pc, #348]	; (800184c <lineFollowingMode+0x250>)
 80016f0:	f001 ff5e 	bl	80035b0 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, BASE_SPEED);		// right
 80016f4:	4b53      	ldr	r3, [pc, #332]	; (8001844 <lineFollowingMode+0x248>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, BASE_SPEED);		// left
 80016fe:	4b52      	ldr	r3, [pc, #328]	; (8001848 <lineFollowingMode+0x24c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001706:	635a      	str	r2, [r3, #52]	; 0x34
 8001708:	e096      	b.n	8001838 <lineFollowingMode+0x23c>
		  } else if (leftIR == 1 && rightIR == 0) {
 800170a:	79bb      	ldrb	r3, [r7, #6]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d122      	bne.n	8001756 <lineFollowingMode+0x15a>
 8001710:	797b      	ldrb	r3, [r7, #5]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d11f      	bne.n	8001756 <lineFollowingMode+0x15a>
			  // Leaning to the right
			  // Need to turn left
			  // right
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 8001716:	2201      	movs	r2, #1
 8001718:	2110      	movs	r1, #16
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f001 ff47 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 8001722:	2200      	movs	r2, #0
 8001724:	2110      	movs	r1, #16
 8001726:	4849      	ldr	r0, [pc, #292]	; (800184c <lineFollowingMode+0x250>)
 8001728:	f001 ff42 	bl	80035b0 <HAL_GPIO_WritePin>
			  // left
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 800172c:	2200      	movs	r2, #0
 800172e:	2108      	movs	r1, #8
 8001730:	4846      	ldr	r0, [pc, #280]	; (800184c <lineFollowingMode+0x250>)
 8001732:	f001 ff3d 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  1);	// PB5
 8001736:	2201      	movs	r2, #1
 8001738:	2120      	movs	r1, #32
 800173a:	4844      	ldr	r0, [pc, #272]	; (800184c <lineFollowingMode+0x250>)
 800173c:	f001 ff38 	bl	80035b0 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, HIGH_SPEED);		// right
 8001740:	4b40      	ldr	r3, [pc, #256]	; (8001844 <lineFollowingMode+0x248>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001748:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, BACK_SPEED);		// left
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <lineFollowingMode+0x24c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001752:	635a      	str	r2, [r3, #52]	; 0x34
 8001754:	e070      	b.n	8001838 <lineFollowingMode+0x23c>
		  } else if (leftIR == 0 && rightIR == 1) {
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d122      	bne.n	80017a2 <lineFollowingMode+0x1a6>
 800175c:	797b      	ldrb	r3, [r7, #5]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d11f      	bne.n	80017a2 <lineFollowingMode+0x1a6>
			  // Leaning to the left
			  // Need to turn right
			  // right
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 8001762:	2200      	movs	r2, #0
 8001764:	2110      	movs	r1, #16
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f001 ff21 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  1);	// PB4
 800176e:	2201      	movs	r2, #1
 8001770:	2110      	movs	r1, #16
 8001772:	4836      	ldr	r0, [pc, #216]	; (800184c <lineFollowingMode+0x250>)
 8001774:	f001 ff1c 	bl	80035b0 <HAL_GPIO_WritePin>
			  // left
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 8001778:	2201      	movs	r2, #1
 800177a:	2108      	movs	r1, #8
 800177c:	4833      	ldr	r0, [pc, #204]	; (800184c <lineFollowingMode+0x250>)
 800177e:	f001 ff17 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 8001782:	2200      	movs	r2, #0
 8001784:	2120      	movs	r1, #32
 8001786:	4831      	ldr	r0, [pc, #196]	; (800184c <lineFollowingMode+0x250>)
 8001788:	f001 ff12 	bl	80035b0 <HAL_GPIO_WritePin>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, BACK_SPEED);		// right
 800178c:	4b2d      	ldr	r3, [pc, #180]	; (8001844 <lineFollowingMode+0x248>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001794:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, HIGH_SPEED);		// left
 8001796:	4b2c      	ldr	r3, [pc, #176]	; (8001848 <lineFollowingMode+0x24c>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800179e:	635a      	str	r2, [r3, #52]	; 0x34
 80017a0:	e04a      	b.n	8001838 <lineFollowingMode+0x23c>
		  } else {
			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  1);	// PA4
 80017a2:	2201      	movs	r2, #1
 80017a4:	2110      	movs	r1, #16
 80017a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017aa:	f001 ff01 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 80017ae:	2200      	movs	r2, #0
 80017b0:	2110      	movs	r1, #16
 80017b2:	4826      	ldr	r0, [pc, #152]	; (800184c <lineFollowingMode+0x250>)
 80017b4:	f001 fefc 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  1);	// PB3
 80017b8:	2201      	movs	r2, #1
 80017ba:	2108      	movs	r1, #8
 80017bc:	4823      	ldr	r0, [pc, #140]	; (800184c <lineFollowingMode+0x250>)
 80017be:	f001 fef7 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 80017c2:	2200      	movs	r2, #0
 80017c4:	2120      	movs	r1, #32
 80017c6:	4821      	ldr	r0, [pc, #132]	; (800184c <lineFollowingMode+0x250>)
 80017c8:	f001 fef2 	bl	80035b0 <HAL_GPIO_WritePin>

			  // wait to pass the point a little bit
			  if (go_home == 1) {
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d104      	bne.n	80017dc <lineFollowingMode+0x1e0>
				  HAL_Delay(300);
 80017d2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80017d6:	f001 fb51 	bl	8002e7c <HAL_Delay>
 80017da:	e003      	b.n	80017e4 <lineFollowingMode+0x1e8>
			  } else {
				  HAL_Delay(400);
 80017dc:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80017e0:	f001 fb4c 	bl	8002e7c <HAL_Delay>
			  }

			  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 80017e4:	2200      	movs	r2, #0
 80017e6:	2110      	movs	r1, #16
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f001 fee0 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 80017f0:	2200      	movs	r2, #0
 80017f2:	2110      	movs	r1, #16
 80017f4:	4815      	ldr	r0, [pc, #84]	; (800184c <lineFollowingMode+0x250>)
 80017f6:	f001 fedb 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 80017fa:	2200      	movs	r2, #0
 80017fc:	2108      	movs	r1, #8
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <lineFollowingMode+0x250>)
 8001800:	f001 fed6 	bl	80035b0 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 8001804:	2200      	movs	r2, #0
 8001806:	2120      	movs	r1, #32
 8001808:	4810      	ldr	r0, [pc, #64]	; (800184c <lineFollowingMode+0x250>)
 800180a:	f001 fed1 	bl	80035b0 <HAL_GPIO_WritePin>

			  if (go_home == 1) {
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d012      	beq.n	800183a <lineFollowingMode+0x23e>
			  	break;
			  }

			  HAL_Delay(1000);
 8001814:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001818:	f001 fb30 	bl	8002e7c <HAL_Delay>

			  aimMode();
 800181c:	f7ff fbec 	bl	8000ff8 <aimMode>

			  HAL_Delay(1000);
 8001820:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001824:	f001 fb2a 	bl	8002e7c <HAL_Delay>
			  turnAround();
 8001828:	f7ff fdd2 	bl	80013d0 <turnAround>
			  HAL_Delay(1000);
 800182c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001830:	f001 fb24 	bl	8002e7c <HAL_Delay>
			  go_home = 1;
 8001834:	2301      	movs	r3, #1
 8001836:	60bb      	str	r3, [r7, #8]
	  {
 8001838:	e706      	b.n	8001648 <lineFollowingMode+0x4c>
			  	break;
 800183a:	bf00      	nop
			  // go back home
			  // return
		  }
	  }
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000390 	.word	0x20000390
 8001848:	200003dc 	.word	0x200003dc
 800184c:	48000400 	.word	0x48000400
 8001850:	48000800 	.word	0x48000800
 8001854:	200001fc 	.word	0x200001fc
 8001858:	48000c00 	.word	0x48000c00
 800185c:	48001800 	.word	0x48001800

08001860 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
 8001864:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001866:	f001 fa94 	bl	8002d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800186a:	f000 f925 	bl	8001ab8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800186e:	f000 fc5d 	bl	800212c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001872:	f000 faf5 	bl	8001e60 <MX_TIM2_Init>
  MX_TIM1_Init();
 8001876:	f000 fa3b 	bl	8001cf0 <MX_TIM1_Init>
  MX_I2C1_Init();
 800187a:	f000 f963 	bl	8001b44 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800187e:	f000 f99f 	bl	8001bc0 <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 8001882:	f000 fb63 	bl	8001f4c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001886:	f000 fbd9 	bl	800203c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 800188a:	f000 f9e5 	bl	8001c58 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // I2C initialization
  // enter normal mode
  uint8_t buf_mode[10]= {AMG88xx_PCTL, AMG88xx_NORMAL_MODE};
 800188e:	2300      	movs	r3, #0
 8001890:	627b      	str	r3, [r7, #36]	; 0x24
 8001892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001896:	2200      	movs	r2, #0
 8001898:	601a      	str	r2, [r3, #0]
 800189a:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_mode[0], 2, 1000);
 800189c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2302      	movs	r3, #2
 80018a8:	21d2      	movs	r1, #210	; 0xd2
 80018aa:	4875      	ldr	r0, [pc, #468]	; (8001a80 <main+0x220>)
 80018ac:	f001 ff28 	bl	8003700 <HAL_I2C_Master_Transmit>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	4b73      	ldr	r3, [pc, #460]	; (8001a84 <main+0x224>)
 80018b6:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf_mode[0], 1, 1000);
 80018b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80018bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	21d3      	movs	r1, #211	; 0xd3
 80018c6:	486e      	ldr	r0, [pc, #440]	; (8001a80 <main+0x220>)
 80018c8:	f002 f80e 	bl	80038e8 <HAL_I2C_Master_Receive>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	4b6c      	ldr	r3, [pc, #432]	; (8001a84 <main+0x224>)
 80018d2:	701a      	strb	r2, [r3, #0]

  // software reset
  uint8_t buf_rst[10]= {AMG88xx_RST, AMG88xx_INITIAL_RESET};
 80018d4:	f643 7301 	movw	r3, #16129	; 0x3f01
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	f107 031c 	add.w	r3, r7, #28
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_rst[0], 2, 1000);
 80018e4:	f107 0218 	add.w	r2, r7, #24
 80018e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	2302      	movs	r3, #2
 80018f0:	21d2      	movs	r1, #210	; 0xd2
 80018f2:	4863      	ldr	r0, [pc, #396]	; (8001a80 <main+0x220>)
 80018f4:	f001 ff04 	bl	8003700 <HAL_I2C_Master_Transmit>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	4b61      	ldr	r3, [pc, #388]	; (8001a84 <main+0x224>)
 80018fe:	701a      	strb	r2, [r3, #0]

  // disable interrupts by default
  uint8_t buf_int[10]= {AMG88xx_INTC, 0};
 8001900:	2303      	movs	r3, #3
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	f107 0310 	add.w	r3, r7, #16
 8001908:	2200      	movs	r2, #0
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_int[0], 2, 1000);
 800190e:	f107 020c 	add.w	r2, r7, #12
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	21d2      	movs	r1, #210	; 0xd2
 800191c:	4858      	ldr	r0, [pc, #352]	; (8001a80 <main+0x220>)
 800191e:	f001 feef 	bl	8003700 <HAL_I2C_Master_Transmit>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	4b57      	ldr	r3, [pc, #348]	; (8001a84 <main+0x224>)
 8001928:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf_int[0], 1, 1000);
 800192a:	f107 020c 	add.w	r2, r7, #12
 800192e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	2301      	movs	r3, #1
 8001936:	21d3      	movs	r1, #211	; 0xd3
 8001938:	4851      	ldr	r0, [pc, #324]	; (8001a80 <main+0x220>)
 800193a:	f001 ffd5 	bl	80038e8 <HAL_I2C_Master_Receive>
 800193e:	4603      	mov	r3, r0
 8001940:	461a      	mov	r2, r3
 8001942:	4b50      	ldr	r3, [pc, #320]	; (8001a84 <main+0x224>)
 8001944:	701a      	strb	r2, [r3, #0]

  // set to 10 FPS
  uint8_t buf_fps[10]= {AMG88xx_FPSC, AMG88xx_FPS_10};
 8001946:	2302      	movs	r3, #2
 8001948:	603b      	str	r3, [r7, #0]
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	809a      	strh	r2, [r3, #4]
  ret = HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf_fps[0], 2, 1000);
 8001952:	463a      	mov	r2, r7
 8001954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2302      	movs	r3, #2
 800195c:	21d2      	movs	r1, #210	; 0xd2
 800195e:	4848      	ldr	r0, [pc, #288]	; (8001a80 <main+0x220>)
 8001960:	f001 fece 	bl	8003700 <HAL_I2C_Master_Transmit>
 8001964:	4603      	mov	r3, r0
 8001966:	461a      	mov	r2, r3
 8001968:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <main+0x224>)
 800196a:	701a      	strb	r2, [r3, #0]
  ret = HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, &buf_fps[0], 1, 1000);
 800196c:	463a      	mov	r2, r7
 800196e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	2301      	movs	r3, #1
 8001976:	21d3      	movs	r1, #211	; 0xd3
 8001978:	4841      	ldr	r0, [pc, #260]	; (8001a80 <main+0x220>)
 800197a:	f001 ffb5 	bl	80038e8 <HAL_I2C_Master_Receive>
 800197e:	4603      	mov	r3, r0
 8001980:	461a      	mov	r2, r3
 8001982:	4b40      	ldr	r3, [pc, #256]	; (8001a84 <main+0x224>)
 8001984:	701a      	strb	r2, [r3, #0]

  HAL_Delay(100);
 8001986:	2064      	movs	r0, #100	; 0x64
 8001988:	f001 fa78 	bl	8002e7c <HAL_Delay>

  // PWM initialization

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800198c:	2100      	movs	r1, #0
 800198e:	483e      	ldr	r0, [pc, #248]	; (8001a88 <main+0x228>)
 8001990:	f004 f92c 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001994:	2100      	movs	r1, #0
 8001996:	483d      	ldr	r0, [pc, #244]	; (8001a8c <main+0x22c>)
 8001998:	f004 f928 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800199c:	2108      	movs	r1, #8
 800199e:	483c      	ldr	r0, [pc, #240]	; (8001a90 <main+0x230>)
 80019a0:	f004 f924 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80019a4:	210c      	movs	r1, #12
 80019a6:	483b      	ldr	r0, [pc, #236]	; (8001a94 <main+0x234>)
 80019a8:	f004 f920 	bl	8005bec <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,  0);	// PA4
 80019ac:	2200      	movs	r2, #0
 80019ae:	2110      	movs	r1, #16
 80019b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b4:	f001 fdfc 	bl	80035b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  0);	// PB4
 80019b8:	2200      	movs	r2, #0
 80019ba:	2110      	movs	r1, #16
 80019bc:	4836      	ldr	r0, [pc, #216]	; (8001a98 <main+0x238>)
 80019be:	f001 fdf7 	bl	80035b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  0);	// PB3
 80019c2:	2200      	movs	r2, #0
 80019c4:	2108      	movs	r1, #8
 80019c6:	4834      	ldr	r0, [pc, #208]	; (8001a98 <main+0x238>)
 80019c8:	f001 fdf2 	bl	80035b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  0);	// PB5
 80019cc:	2200      	movs	r2, #0
 80019ce:	2120      	movs	r1, #32
 80019d0:	4831      	ldr	r0, [pc, #196]	; (8001a98 <main+0x238>)
 80019d2:	f001 fded 	bl	80035b0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12,  0);	// PB12
 80019d6:	2200      	movs	r2, #0
 80019d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019dc:	482e      	ldr	r0, [pc, #184]	; (8001a98 <main+0x238>)
 80019de:	f001 fde7 	bl	80035b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13,  0);	// PB13
 80019e2:	2200      	movs	r2, #0
 80019e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019e8:	482b      	ldr	r0, [pc, #172]	; (8001a98 <main+0x238>)
 80019ea:	f001 fde1 	bl	80035b0 <HAL_GPIO_WritePin>
  // wheels
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 600);		// set the new pulse width
 80019ee:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <main+0x228>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f44f 7216 	mov.w	r2, #600	; 0x258
 80019f6:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 600);		// set the new pulse width
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <main+0x22c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 7216 	mov.w	r2, #600	; 0x258
 8001a00:	635a      	str	r2, [r3, #52]	; 0x34
  // gun shooting
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 800);
 8001a02:	4b24      	ldr	r3, [pc, #144]	; (8001a94 <main+0x234>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001a0a:	641a      	str	r2, [r3, #64]	; 0x40
  // servo
  current_angle = -15;
 8001a0c:	4b23      	ldr	r3, [pc, #140]	; (8001a9c <main+0x23c>)
 8001a0e:	f06f 020e 	mvn.w	r2, #14
 8001a12:	601a      	str	r2, [r3, #0]
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, (240 - 60) * (current_angle + 90) / 180 + 60);		// set the new pulse width
 8001a14:	4b21      	ldr	r3, [pc, #132]	; (8001a9c <main+0x23c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f103 0296 	add.w	r2, r3, #150	; 0x96
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <main+0x230>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	63da      	str	r2, [r3, #60]	; 0x3c

  armed = 0;
 8001a22:	4b1f      	ldr	r3, [pc, #124]	; (8001aa0 <main+0x240>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart2, uart_buf, 1);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	491e      	ldr	r1, [pc, #120]	; (8001aa4 <main+0x244>)
 8001a2c:	481e      	ldr	r0, [pc, #120]	; (8001aa8 <main+0x248>)
 8001a2e:	f005 f9df 	bl	8006df0 <HAL_UART_Receive_IT>

  HAL_Delay(100);
 8001a32:	2064      	movs	r0, #100	; 0x64
 8001a34:	f001 fa22 	bl	8002e7c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  GPIO_PinState button = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001a38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a3c:	481b      	ldr	r0, [pc, #108]	; (8001aac <main+0x24c>)
 8001a3e:	f001 fd9f 	bl	8003580 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	  if ((armed == 1 && send_off == 1) || button != 0) {
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <main+0x240>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d103      	bne.n	8001a58 <main+0x1f8>
 8001a50:	4b17      	ldr	r3, [pc, #92]	; (8001ab0 <main+0x250>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d003      	beq.n	8001a60 <main+0x200>
 8001a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0eb      	beq.n	8001a38 <main+0x1d8>
		  armed = 1;
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <main+0x240>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]
		  send_off = 0;
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <main+0x250>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
		  position = 0;
 8001a6c:	4b11      	ldr	r3, [pc, #68]	; (8001ab4 <main+0x254>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	601a      	str	r2, [r3, #0]
		  HAL_Delay(500);
 8001a72:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a76:	f001 fa01 	bl	8002e7c <HAL_Delay>
		  //aimMode();
		  lineFollowingMode();
 8001a7a:	f7ff fdbf 	bl	80015fc <lineFollowingMode>
  {
 8001a7e:	e7db      	b.n	8001a38 <main+0x1d8>
 8001a80:	20000264 	.word	0x20000264
 8001a84:	200004b8 	.word	0x200004b8
 8001a88:	20000390 	.word	0x20000390
 8001a8c:	200003dc 	.word	0x200003dc
 8001a90:	200002b0 	.word	0x200002b0
 8001a94:	20000218 	.word	0x20000218
 8001a98:	48000400 	.word	0x48000400
 8001a9c:	2000038c 	.word	0x2000038c
 8001aa0:	200001fc 	.word	0x200001fc
 8001aa4:	200001f8 	.word	0x200001f8
 8001aa8:	20000428 	.word	0x20000428
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	20000200 	.word	0x20000200
 8001ab4:	20000204 	.word	0x20000204

08001ab8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b096      	sub	sp, #88	; 0x58
 8001abc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2244      	movs	r2, #68	; 0x44
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f007 f95a 	bl	8008d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001acc:	463b      	mov	r3, r7
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ada:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ade:	f002 fb29 	bl	8004134 <HAL_PWREx_ControlVoltageScaling>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ae8:	f000 fd38 	bl	800255c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001aec:	2310      	movs	r3, #16
 8001aee:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001af0:	2301      	movs	r3, #1
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001af8:	2360      	movs	r3, #96	; 0x60
 8001afa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4618      	mov	r0, r3
 8001b06:	f002 fbc9 	bl	800429c <HAL_RCC_OscConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001b10:	f000 fd24 	bl	800255c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b14:	230f      	movs	r3, #15
 8001b16:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b20:	2300      	movs	r3, #0
 8001b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001b28:	463b      	mov	r3, r7
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f002 ffdb 	bl	8004ae8 <HAL_RCC_ClockConfig>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b38:	f000 fd10 	bl	800255c <Error_Handler>
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	3758      	adds	r7, #88	; 0x58
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b48:	4b1b      	ldr	r3, [pc, #108]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b4a:	4a1c      	ldr	r2, [pc, #112]	; (8001bbc <MX_I2C1_Init+0x78>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b50:	f640 6214 	movw	r2, #3604	; 0xe14
 8001b54:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001b56:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b5c:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b5e:	2201      	movs	r2, #1
 8001b60:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b62:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001b68:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b6e:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b7a:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b82:	f001 fd2d 	bl	80035e0 <HAL_I2C_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b8c:	f000 fce6 	bl	800255c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b90:	2100      	movs	r1, #0
 8001b92:	4809      	ldr	r0, [pc, #36]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001b94:	f002 fa16 	bl	8003fc4 <HAL_I2CEx_ConfigAnalogFilter>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001b9e:	f000 fcdd 	bl	800255c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_I2C1_Init+0x74>)
 8001ba6:	f002 fa58 	bl	800405a <HAL_I2CEx_ConfigDigitalFilter>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001bb0:	f000 fcd4 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000264 	.word	0x20000264
 8001bbc:	40005400 	.word	0x40005400

08001bc0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001bc4:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bc6:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <MX_LPUART1_UART_Init+0x94>)
 8001bc8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001bca:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001be4:	4b1a      	ldr	r3, [pc, #104]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001be6:	220c      	movs	r2, #12
 8001be8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001c08:	4811      	ldr	r0, [pc, #68]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001c0a:	f005 f809 	bl	8006c20 <HAL_UART_Init>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8001c14:	f000 fca2 	bl	800255c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001c1c:	f006 ffbc 	bl	8008b98 <HAL_UARTEx_SetTxFifoThreshold>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001c26:	f000 fc99 	bl	800255c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4808      	ldr	r0, [pc, #32]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001c2e:	f006 fff1 	bl	8008c14 <HAL_UARTEx_SetRxFifoThreshold>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001c38:	f000 fc90 	bl	800255c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001c3c:	4804      	ldr	r0, [pc, #16]	; (8001c50 <MX_LPUART1_UART_Init+0x90>)
 8001c3e:	f006 ff72 	bl	8008b26 <HAL_UARTEx_DisableFifoMode>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001c48:	f000 fc88 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	200002fc 	.word	0x200002fc
 8001c54:	40008000 	.word	0x40008000

08001c58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c5c:	4b22      	ldr	r3, [pc, #136]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c5e:	4a23      	ldr	r2, [pc, #140]	; (8001cec <MX_USART2_UART_Init+0x94>)
 8001c60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c70:	4b1d      	ldr	r3, [pc, #116]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c7e:	220c      	movs	r2, #12
 8001c80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c88:	4b17      	ldr	r3, [pc, #92]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca0:	4811      	ldr	r0, [pc, #68]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001ca2:	f004 ffbd 	bl	8006c20 <HAL_UART_Init>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001cac:	f000 fc56 	bl	800255c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb0:	2100      	movs	r1, #0
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001cb4:	f006 ff70 	bl	8008b98 <HAL_UARTEx_SetTxFifoThreshold>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001cbe:	f000 fc4d 	bl	800255c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001cc6:	f006 ffa5 	bl	8008c14 <HAL_UARTEx_SetRxFifoThreshold>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001cd0:	f000 fc44 	bl	800255c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_USART2_UART_Init+0x90>)
 8001cd6:	f006 feeb 	bl	8008ab0 <HAL_UARTEx_EnableFifoMode>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001ce0:	f000 fc3c 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000428 	.word	0x20000428
 8001cec:	40004400 	.word	0x40004400

08001cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b09a      	sub	sp, #104	; 0x68
 8001cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cf6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	605a      	str	r2, [r3, #4]
 8001d1a:	609a      	str	r2, [r3, #8]
 8001d1c:	60da      	str	r2, [r3, #12]
 8001d1e:	611a      	str	r2, [r3, #16]
 8001d20:	615a      	str	r2, [r3, #20]
 8001d22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	222c      	movs	r2, #44	; 0x2c
 8001d28:	2100      	movs	r1, #0
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f007 f828 	bl	8008d80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d30:	4b49      	ldr	r3, [pc, #292]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d32:	4a4a      	ldr	r2, [pc, #296]	; (8001e5c <MX_TIM1_Init+0x16c>)
 8001d34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 19;
 8001d36:	4b48      	ldr	r3, [pc, #288]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d38:	2213      	movs	r2, #19
 8001d3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3c:	4b46      	ldr	r3, [pc, #280]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001d42:	4b45      	ldr	r3, [pc, #276]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4a:	4b43      	ldr	r3, [pc, #268]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d50:	4b41      	ldr	r3, [pc, #260]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d56:	4b40      	ldr	r3, [pc, #256]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d5c:	483e      	ldr	r0, [pc, #248]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d5e:	f003 fe8d 	bl	8005a7c <HAL_TIM_Base_Init>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d68:	f000 fbf8 	bl	800255c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d70:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d72:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001d76:	4619      	mov	r1, r3
 8001d78:	4837      	ldr	r0, [pc, #220]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d7a:	f004 f951 	bl	8006020 <HAL_TIM_ConfigClockSource>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d84:	f000 fbea 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d88:	4833      	ldr	r0, [pc, #204]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001d8a:	f003 fece 	bl	8005b2a <HAL_TIM_PWM_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001d94:	f000 fbe2 	bl	800255c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001da8:	4619      	mov	r1, r3
 8001daa:	482b      	ldr	r0, [pc, #172]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001dac:	f004 fe32 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001db6:	f000 fbd1 	bl	800255c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dba:	2360      	movs	r3, #96	; 0x60
 8001dbc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dd6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	481e      	ldr	r0, [pc, #120]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001de0:	f004 f80a 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001dea:	f000 fbb7 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df2:	2204      	movs	r2, #4
 8001df4:	4619      	mov	r1, r3
 8001df6:	4818      	ldr	r0, [pc, #96]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001df8:	f003 fffe 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001e02:	f000 fbab 	bl	800255c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e1e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e24:	2300      	movs	r3, #0
 8001e26:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	4619      	mov	r1, r3
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001e3c:	f004 fe72 	bl	8006b24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8001e46:	f000 fb89 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e4a:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_TIM1_Init+0x168>)
 8001e4c:	f000 fdc4 	bl	80029d8 <HAL_TIM_MspPostInit>

}
 8001e50:	bf00      	nop
 8001e52:	3768      	adds	r7, #104	; 0x68
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	20000390 	.word	0x20000390
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e80:	463b      	mov	r3, r7
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
 8001e8c:	611a      	str	r2, [r3, #16]
 8001e8e:	615a      	str	r2, [r3, #20]
 8001e90:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e92:	4b2d      	ldr	r3, [pc, #180]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 19;
 8001e9a:	4b2b      	ldr	r3, [pc, #172]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001e9c:	2213      	movs	r2, #19
 8001e9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea0:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001ea6:	4b28      	ldr	r3, [pc, #160]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001ea8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001eac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eae:	4b26      	ldr	r3, [pc, #152]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eba:	4823      	ldr	r0, [pc, #140]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001ebc:	f003 fdde 	bl	8005a7c <HAL_TIM_Base_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ec6:	f000 fb49 	bl	800255c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ed0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	481c      	ldr	r0, [pc, #112]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001ed8:	f004 f8a2 	bl	8006020 <HAL_TIM_ConfigClockSource>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001ee2:	f000 fb3b 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ee6:	4818      	ldr	r0, [pc, #96]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001ee8:	f003 fe1f 	bl	8005b2a <HAL_TIM_PWM_Init>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ef2:	f000 fb33 	bl	800255c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001efa:	2300      	movs	r3, #0
 8001efc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001efe:	f107 031c 	add.w	r3, r7, #28
 8001f02:	4619      	mov	r1, r3
 8001f04:	4810      	ldr	r0, [pc, #64]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001f06:	f004 fd85 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001f10:	f000 fb24 	bl	800255c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f14:	2360      	movs	r3, #96	; 0x60
 8001f16:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f20:	2300      	movs	r3, #0
 8001f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f24:	463b      	mov	r3, r7
 8001f26:	2200      	movs	r2, #0
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4807      	ldr	r0, [pc, #28]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001f2c:	f003 ff64 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001f36:	f000 fb11 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f3a:	4803      	ldr	r0, [pc, #12]	; (8001f48 <MX_TIM2_Init+0xe8>)
 8001f3c:	f000 fd4c 	bl	80029d8 <HAL_TIM_MspPostInit>

}
 8001f40:	bf00      	nop
 8001f42:	3738      	adds	r7, #56	; 0x38
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	200003dc 	.word	0x200003dc

08001f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08e      	sub	sp, #56	; 0x38
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f60:	f107 031c 	add.w	r3, r7, #28
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	605a      	str	r2, [r3, #4]
 8001f6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f6c:	463b      	mov	r3, r7
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]
 8001f7a:	615a      	str	r2, [r3, #20]
 8001f7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f7e:	4b2d      	ldr	r3, [pc, #180]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f80:	4a2d      	ldr	r2, [pc, #180]	; (8002038 <MX_TIM3_Init+0xec>)
 8001f82:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 39;
 8001f84:	4b2b      	ldr	r3, [pc, #172]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f86:	2227      	movs	r2, #39	; 0x27
 8001f88:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8a:	4b2a      	ldr	r3, [pc, #168]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f92:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001f96:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f98:	4b26      	ldr	r3, [pc, #152]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fa4:	4823      	ldr	r0, [pc, #140]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fa6:	f003 fd69 	bl	8005a7c <HAL_TIM_Base_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001fb0:	f000 fad4 	bl	800255c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	481c      	ldr	r0, [pc, #112]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fc2:	f004 f82d 	bl	8006020 <HAL_TIM_ConfigClockSource>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001fcc:	f000 fac6 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001fd0:	4818      	ldr	r0, [pc, #96]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001fd2:	f003 fdaa 	bl	8005b2a <HAL_TIM_PWM_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001fdc:	f000 fabe 	bl	800255c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fe8:	f107 031c 	add.w	r3, r7, #28
 8001fec:	4619      	mov	r1, r3
 8001fee:	4811      	ldr	r0, [pc, #68]	; (8002034 <MX_TIM3_Init+0xe8>)
 8001ff0:	f004 fd10 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001ffa:	f000 faaf 	bl	800255c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ffe:	2360      	movs	r3, #96	; 0x60
 8002000:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 150;
 8002002:	2396      	movs	r3, #150	; 0x96
 8002004:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800200a:	2300      	movs	r3, #0
 800200c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800200e:	463b      	mov	r3, r7
 8002010:	2208      	movs	r2, #8
 8002012:	4619      	mov	r1, r3
 8002014:	4807      	ldr	r0, [pc, #28]	; (8002034 <MX_TIM3_Init+0xe8>)
 8002016:	f003 feef 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d001      	beq.n	8002024 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002020:	f000 fa9c 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002024:	4803      	ldr	r0, [pc, #12]	; (8002034 <MX_TIM3_Init+0xe8>)
 8002026:	f000 fcd7 	bl	80029d8 <HAL_TIM_MspPostInit>

}
 800202a:	bf00      	nop
 800202c:	3738      	adds	r7, #56	; 0x38
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	200002b0 	.word	0x200002b0
 8002038:	40000400 	.word	0x40000400

0800203c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b08e      	sub	sp, #56	; 0x38
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
 800204a:	605a      	str	r2, [r3, #4]
 800204c:	609a      	str	r2, [r3, #8]
 800204e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	2200      	movs	r2, #0
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	605a      	str	r2, [r3, #4]
 800205a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	615a      	str	r2, [r3, #20]
 800206c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800206e:	4b2d      	ldr	r3, [pc, #180]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002070:	4a2d      	ldr	r2, [pc, #180]	; (8002128 <MX_TIM4_Init+0xec>)
 8002072:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 19;
 8002074:	4b2b      	ldr	r3, [pc, #172]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002076:	2213      	movs	r2, #19
 8002078:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207a:	4b2a      	ldr	r3, [pc, #168]	; (8002124 <MX_TIM4_Init+0xe8>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8002080:	4b28      	ldr	r3, [pc, #160]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002082:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002086:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002088:	4b26      	ldr	r3, [pc, #152]	; (8002124 <MX_TIM4_Init+0xe8>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800208e:	4b25      	ldr	r3, [pc, #148]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002094:	4823      	ldr	r0, [pc, #140]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002096:	f003 fcf1 	bl	8005a7c <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80020a0:	f000 fa5c 	bl	800255c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ae:	4619      	mov	r1, r3
 80020b0:	481c      	ldr	r0, [pc, #112]	; (8002124 <MX_TIM4_Init+0xe8>)
 80020b2:	f003 ffb5 	bl	8006020 <HAL_TIM_ConfigClockSource>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80020bc:	f000 fa4e 	bl	800255c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020c0:	4818      	ldr	r0, [pc, #96]	; (8002124 <MX_TIM4_Init+0xe8>)
 80020c2:	f003 fd32 	bl	8005b2a <HAL_TIM_PWM_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80020cc:	f000 fa46 	bl	800255c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d0:	2300      	movs	r3, #0
 80020d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4811      	ldr	r0, [pc, #68]	; (8002124 <MX_TIM4_Init+0xe8>)
 80020e0:	f004 fc98 	bl	8006a14 <HAL_TIMEx_MasterConfigSynchronization>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80020ea:	f000 fa37 	bl	800255c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ee:	2360      	movs	r3, #96	; 0x60
 80020f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	220c      	movs	r2, #12
 8002102:	4619      	mov	r1, r3
 8002104:	4807      	ldr	r0, [pc, #28]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002106:	f003 fe77 	bl	8005df8 <HAL_TIM_PWM_ConfigChannel>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002110:	f000 fa24 	bl	800255c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002114:	4803      	ldr	r0, [pc, #12]	; (8002124 <MX_TIM4_Init+0xe8>)
 8002116:	f000 fc5f 	bl	80029d8 <HAL_TIM_MspPostInit>

}
 800211a:	bf00      	nop
 800211c:	3738      	adds	r7, #56	; 0x38
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000218 	.word	0x20000218
 8002128:	40000800 	.word	0x40000800

0800212c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	; 0x38
 8002130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002132:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
 8002140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002142:	4bb4      	ldr	r3, [pc, #720]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002146:	4ab3      	ldr	r2, [pc, #716]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002148:	f043 0310 	orr.w	r3, r3, #16
 800214c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214e:	4bb1      	ldr	r3, [pc, #708]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	623b      	str	r3, [r7, #32]
 8002158:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	4bae      	ldr	r3, [pc, #696]	; (8002414 <MX_GPIO_Init+0x2e8>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4aad      	ldr	r2, [pc, #692]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002166:	4bab      	ldr	r3, [pc, #684]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002172:	4ba8      	ldr	r3, [pc, #672]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4aa7      	ldr	r2, [pc, #668]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002178:	f043 0320 	orr.w	r3, r3, #32
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4ba5      	ldr	r3, [pc, #660]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	61bb      	str	r3, [r7, #24]
 8002188:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800218a:	4ba2      	ldr	r3, [pc, #648]	; (8002414 <MX_GPIO_Init+0x2e8>)
 800218c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218e:	4aa1      	ldr	r2, [pc, #644]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002196:	4b9f      	ldr	r3, [pc, #636]	; (8002414 <MX_GPIO_Init+0x2e8>)
 8002198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219e:	617b      	str	r3, [r7, #20]
 80021a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021a2:	4b9c      	ldr	r3, [pc, #624]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a6:	4a9b      	ldr	r2, [pc, #620]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ae:	4b99      	ldr	r3, [pc, #612]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	613b      	str	r3, [r7, #16]
 80021b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ba:	4b96      	ldr	r3, [pc, #600]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021be:	4a95      	ldr	r2, [pc, #596]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021c0:	f043 0302 	orr.w	r3, r3, #2
 80021c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c6:	4b93      	ldr	r3, [pc, #588]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80021d2:	4b90      	ldr	r3, [pc, #576]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d6:	4a8f      	ldr	r2, [pc, #572]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021de:	4b8d      	ldr	r3, [pc, #564]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	4a89      	ldr	r2, [pc, #548]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021f0:	f043 0308 	orr.w	r3, r3, #8
 80021f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f6:	4b87      	ldr	r3, [pc, #540]	; (8002414 <MX_GPIO_Init+0x2e8>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f003 0308 	and.w	r3, r3, #8
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8002202:	f002 f83b 	bl	800427c <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2110      	movs	r1, #16
 800220a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220e:	f001 f9cf 	bl	80035b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 8002212:	2200      	movs	r2, #0
 8002214:	f243 0138 	movw	r1, #12344	; 0x3038
 8002218:	487f      	ldr	r0, [pc, #508]	; (8002418 <MX_GPIO_Init+0x2ec>)
 800221a:	f001 f9c9 	bl	80035b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800221e:	230c      	movs	r3, #12
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002226:	2300      	movs	r3, #0
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222a:	2300      	movs	r3, #0
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800222e:	230d      	movs	r3, #13
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	4619      	mov	r1, r3
 8002238:	4878      	ldr	r0, [pc, #480]	; (800241c <MX_GPIO_Init+0x2f0>)
 800223a:	f001 f80f 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800223e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800224c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002250:	4619      	mov	r1, r3
 8002252:	4873      	ldr	r0, [pc, #460]	; (8002420 <MX_GPIO_Init+0x2f4>)
 8002254:	f001 f802 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8002258:	2307      	movs	r3, #7
 800225a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800225c:	2312      	movs	r3, #18
 800225e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002268:	2304      	movs	r3, #4
 800226a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800226c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002270:	4619      	mov	r1, r3
 8002272:	486c      	ldr	r0, [pc, #432]	; (8002424 <MX_GPIO_Init+0x2f8>)
 8002274:	f000 fff2 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227c:	2302      	movs	r3, #2
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8002288:	230d      	movs	r3, #13
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800228c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002290:	4619      	mov	r1, r3
 8002292:	4864      	ldr	r0, [pc, #400]	; (8002424 <MX_GPIO_Init+0x2f8>)
 8002294:	f000 ffe2 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002298:	233f      	movs	r3, #63	; 0x3f
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800229c:	230b      	movs	r3, #11
 800229e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022a8:	4619      	mov	r1, r3
 80022aa:	485d      	ldr	r0, [pc, #372]	; (8002420 <MX_GPIO_Init+0x2f4>)
 80022ac:	f000 ffd6 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80022b0:	230a      	movs	r3, #10
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022b4:	230b      	movs	r3, #11
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022c0:	4619      	mov	r1, r3
 80022c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022c6:	f000 ffc9 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022ca:	2310      	movs	r3, #16
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ce:	2301      	movs	r3, #1
 80022d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d6:	2300      	movs	r3, #0
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022e4:	f000 ffba 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022e8:	23e0      	movs	r3, #224	; 0xe0
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ec:	2302      	movs	r3, #2
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022f8:	2305      	movs	r3, #5
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002300:	4619      	mov	r1, r3
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f000 ffa9 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800230a:	2302      	movs	r3, #2
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800230e:	230b      	movs	r3, #11
 8002310:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002312:	2300      	movs	r3, #0
 8002314:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002316:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231a:	4619      	mov	r1, r3
 800231c:	483e      	ldr	r0, [pc, #248]	; (8002418 <MX_GPIO_Init+0x2ec>)
 800231e:	f000 ff9d 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 8002322:	2344      	movs	r3, #68	; 0x44
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002326:	2303      	movs	r3, #3
 8002328:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232a:	2300      	movs	r3, #0
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002332:	4619      	mov	r1, r3
 8002334:	4838      	ldr	r0, [pc, #224]	; (8002418 <MX_GPIO_Init+0x2ec>)
 8002336:	f000 ff91 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800233a:	2301      	movs	r3, #1
 800233c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233e:	2300      	movs	r3, #0
 8002340:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	2300      	movs	r3, #0
 8002344:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800234a:	4619      	mov	r1, r3
 800234c:	4836      	ldr	r0, [pc, #216]	; (8002428 <MX_GPIO_Init+0x2fc>)
 800234e:	f000 ff85 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3|GPIO_PIN_4
 8002352:	f243 0338 	movw	r3, #12344	; 0x3038
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002358:	2301      	movs	r3, #1
 800235a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235c:	2300      	movs	r3, #0
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002360:	2300      	movs	r3, #0
 8002362:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002368:	4619      	mov	r1, r3
 800236a:	482b      	ldr	r0, [pc, #172]	; (8002418 <MX_GPIO_Init+0x2ec>)
 800236c:	f000 ff76 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002370:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002376:	2302      	movs	r3, #2
 8002378:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237e:	2300      	movs	r3, #0
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8002382:	230e      	movs	r3, #14
 8002384:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800238a:	4619      	mov	r1, r3
 800238c:	4822      	ldr	r0, [pc, #136]	; (8002418 <MX_GPIO_Init+0x2ec>)
 800238e:	f000 ff65 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002396:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002398:	2302      	movs	r3, #2
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a0:	2300      	movs	r3, #0
 80023a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80023a4:	230d      	movs	r3, #13
 80023a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ac:	4619      	mov	r1, r3
 80023ae:	481a      	ldr	r0, [pc, #104]	; (8002418 <MX_GPIO_Init+0x2ec>)
 80023b0:	f000 ff54 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ba:	2302      	movs	r3, #2
 80023bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023be:	2300      	movs	r3, #0
 80023c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023c2:	2303      	movs	r3, #3
 80023c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023c6:	2307      	movs	r3, #7
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ce:	4619      	mov	r1, r3
 80023d0:	4816      	ldr	r0, [pc, #88]	; (800242c <MX_GPIO_Init+0x300>)
 80023d2:	f000 ff43 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023d6:	2340      	movs	r3, #64	; 0x40
 80023d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023da:	2302      	movs	r3, #2
 80023dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80023e6:	230d      	movs	r3, #13
 80023e8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ee:	4619      	mov	r1, r3
 80023f0:	480b      	ldr	r0, [pc, #44]	; (8002420 <MX_GPIO_Init+0x2f4>)
 80023f2:	f000 ff33 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80023f6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002408:	230c      	movs	r3, #12
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	e00e      	b.n	8002430 <MX_GPIO_Init+0x304>
 8002412:	bf00      	nop
 8002414:	40021000 	.word	0x40021000
 8002418:	48000400 	.word	0x48000400
 800241c:	48001000 	.word	0x48001000
 8002420:	48000800 	.word	0x48000800
 8002424:	48001400 	.word	0x48001400
 8002428:	48001800 	.word	0x48001800
 800242c:	48000c00 	.word	0x48000c00
 8002430:	4619      	mov	r1, r3
 8002432:	4829      	ldr	r0, [pc, #164]	; (80024d8 <MX_GPIO_Init+0x3ac>)
 8002434:	f000 ff12 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8002438:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002446:	2303      	movs	r3, #3
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800244a:	230a      	movs	r3, #10
 800244c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002452:	4619      	mov	r1, r3
 8002454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002458:	f000 ff00 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800245c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002460:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002462:	2300      	movs	r3, #0
 8002464:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246e:	4619      	mov	r1, r3
 8002470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002474:	f000 fef2 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002478:	2301      	movs	r3, #1
 800247a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002488:	2309      	movs	r3, #9
 800248a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4812      	ldr	r0, [pc, #72]	; (80024dc <MX_GPIO_Init+0x3b0>)
 8002494:	f000 fee2 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002498:	2302      	movs	r3, #2
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <MX_GPIO_Init+0x3b0>)
 80024ac:	f000 fed6 	bl	800325c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80024b0:	2304      	movs	r3, #4
 80024b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80024c0:	230c      	movs	r3, #12
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	4804      	ldr	r0, [pc, #16]	; (80024dc <MX_GPIO_Init+0x3b0>)
 80024cc:	f000 fec6 	bl	800325c <HAL_GPIO_Init>

}
 80024d0:	bf00      	nop
 80024d2:	3738      	adds	r7, #56	; 0x38
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	48000800 	.word	0x48000800
 80024dc:	48000c00 	.word	0x48000c00

080024e0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 80024e8:	1d39      	adds	r1, r7, #4
 80024ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ee:	2201      	movs	r2, #1
 80024f0:	4803      	ldr	r0, [pc, #12]	; (8002500 <__io_putchar+0x20>)
 80024f2:	f004 fbe5 	bl	8006cc0 <HAL_UART_Transmit>
  return ch;
 80024f6:	687b      	ldr	r3, [r7, #4]
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3708      	adds	r7, #8
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200002fc 	.word	0x200002fc

08002504 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if (uart_buf[0] == '3') {
 800250c:	4b0f      	ldr	r3, [pc, #60]	; (800254c <HAL_UART_RxCpltCallback+0x48>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b33      	cmp	r3, #51	; 0x33
 8002512:	d103      	bne.n	800251c <HAL_UART_RxCpltCallback+0x18>
		send_off = 1;
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <HAL_UART_RxCpltCallback+0x4c>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e00e      	b.n	800253a <HAL_UART_RxCpltCallback+0x36>
	} else if (uart_buf[0] == 'D') {
 800251c:	4b0b      	ldr	r3, [pc, #44]	; (800254c <HAL_UART_RxCpltCallback+0x48>)
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	2b44      	cmp	r3, #68	; 0x44
 8002522:	d103      	bne.n	800252c <HAL_UART_RxCpltCallback+0x28>
		armed = 0;
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_UART_RxCpltCallback+0x50>)
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e006      	b.n	800253a <HAL_UART_RxCpltCallback+0x36>
	} else if (uart_buf[0] == 'A') {
 800252c:	4b07      	ldr	r3, [pc, #28]	; (800254c <HAL_UART_RxCpltCallback+0x48>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b41      	cmp	r3, #65	; 0x41
 8002532:	d102      	bne.n	800253a <HAL_UART_RxCpltCallback+0x36>
		armed = 1;
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_UART_RxCpltCallback+0x50>)
 8002536:	2201      	movs	r2, #1
 8002538:	601a      	str	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(&huart2, uart_buf, 1);
 800253a:	2201      	movs	r2, #1
 800253c:	4903      	ldr	r1, [pc, #12]	; (800254c <HAL_UART_RxCpltCallback+0x48>)
 800253e:	4806      	ldr	r0, [pc, #24]	; (8002558 <HAL_UART_RxCpltCallback+0x54>)
 8002540:	f004 fc56 	bl	8006df0 <HAL_UART_Receive_IT>
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200001f8 	.word	0x200001f8
 8002550:	20000200 	.word	0x20000200
 8002554:	200001fc 	.word	0x200001fc
 8002558:	20000428 	.word	0x20000428

0800255c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002560:	b672      	cpsid	i
}
 8002562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002564:	e7fe      	b.n	8002564 <Error_Handler+0x8>
	...

08002568 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	4b0f      	ldr	r3, [pc, #60]	; (80025ac <HAL_MspInit+0x44>)
 8002570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002572:	4a0e      	ldr	r2, [pc, #56]	; (80025ac <HAL_MspInit+0x44>)
 8002574:	f043 0301 	orr.w	r3, r3, #1
 8002578:	6613      	str	r3, [r2, #96]	; 0x60
 800257a:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_MspInit+0x44>)
 800257c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	607b      	str	r3, [r7, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b09      	ldr	r3, [pc, #36]	; (80025ac <HAL_MspInit+0x44>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	4a08      	ldr	r2, [pc, #32]	; (80025ac <HAL_MspInit+0x44>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	6593      	str	r3, [r2, #88]	; 0x58
 8002592:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_MspInit+0x44>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000

080025b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b0ae      	sub	sp, #184	; 0xb8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025b8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80025bc:	2200      	movs	r2, #0
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	605a      	str	r2, [r3, #4]
 80025c2:	609a      	str	r2, [r3, #8]
 80025c4:	60da      	str	r2, [r3, #12]
 80025c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025c8:	f107 0310 	add.w	r3, r7, #16
 80025cc:	2294      	movs	r2, #148	; 0x94
 80025ce:	2100      	movs	r1, #0
 80025d0:	4618      	mov	r0, r3
 80025d2:	f006 fbd5 	bl	8008d80 <memset>
  if(hi2c->Instance==I2C1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a21      	ldr	r2, [pc, #132]	; (8002660 <HAL_I2C_MspInit+0xb0>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d13b      	bne.n	8002658 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80025e0:	2340      	movs	r3, #64	; 0x40
 80025e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80025e4:	2300      	movs	r3, #0
 80025e6:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e8:	f107 0310 	add.w	r3, r7, #16
 80025ec:	4618      	mov	r0, r3
 80025ee:	f002 fd2d 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80025f8:	f7ff ffb0 	bl	800255c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fc:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_I2C_MspInit+0xb4>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4a18      	ldr	r2, [pc, #96]	; (8002664 <HAL_I2C_MspInit+0xb4>)
 8002602:	f043 0302 	orr.w	r3, r3, #2
 8002606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002608:	4b16      	ldr	r3, [pc, #88]	; (8002664 <HAL_I2C_MspInit+0xb4>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002614:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800261c:	2312      	movs	r3, #18
 800261e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002628:	2303      	movs	r3, #3
 800262a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800262e:	2304      	movs	r3, #4
 8002630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002634:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002638:	4619      	mov	r1, r3
 800263a:	480b      	ldr	r0, [pc, #44]	; (8002668 <HAL_I2C_MspInit+0xb8>)
 800263c:	f000 fe0e 	bl	800325c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002640:	4b08      	ldr	r3, [pc, #32]	; (8002664 <HAL_I2C_MspInit+0xb4>)
 8002642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002644:	4a07      	ldr	r2, [pc, #28]	; (8002664 <HAL_I2C_MspInit+0xb4>)
 8002646:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800264a:	6593      	str	r3, [r2, #88]	; 0x58
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <HAL_I2C_MspInit+0xb4>)
 800264e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002654:	60bb      	str	r3, [r7, #8]
 8002656:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002658:	bf00      	nop
 800265a:	37b8      	adds	r7, #184	; 0xb8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40005400 	.word	0x40005400
 8002664:	40021000 	.word	0x40021000
 8002668:	48000400 	.word	0x48000400

0800266c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b0b0      	sub	sp, #192	; 0xc0
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002674:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
 800267c:	605a      	str	r2, [r3, #4]
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	60da      	str	r2, [r3, #12]
 8002682:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002684:	f107 0318 	add.w	r3, r7, #24
 8002688:	2294      	movs	r2, #148	; 0x94
 800268a:	2100      	movs	r1, #0
 800268c:	4618      	mov	r0, r3
 800268e:	f006 fb77 	bl	8008d80 <memset>
  if(huart->Instance==LPUART1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a47      	ldr	r2, [pc, #284]	; (80027b4 <HAL_UART_MspInit+0x148>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d13e      	bne.n	800271a <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800269c:	2320      	movs	r3, #32
 800269e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80026a0:	2300      	movs	r3, #0
 80026a2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f002 fccf 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80026b4:	f7ff ff52 	bl	800255c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80026b8:	4b3f      	ldr	r3, [pc, #252]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	4a3e      	ldr	r2, [pc, #248]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 80026be:	f043 0301 	orr.w	r3, r3, #1
 80026c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80026c4:	4b3c      	ldr	r3, [pc, #240]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 80026c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c8:	f003 0301 	and.w	r3, r3, #1
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80026d0:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 80026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d4:	4a38      	ldr	r2, [pc, #224]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 80026d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 80026de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 80026e8:	f001 fdc8 	bl	800427c <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026ec:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80026f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fa:	2300      	movs	r3, #0
 80026fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002700:	2303      	movs	r3, #3
 8002702:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002706:	2308      	movs	r3, #8
 8002708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800270c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002710:	4619      	mov	r1, r3
 8002712:	482a      	ldr	r0, [pc, #168]	; (80027bc <HAL_UART_MspInit+0x150>)
 8002714:	f000 fda2 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002718:	e047      	b.n	80027aa <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a28      	ldr	r2, [pc, #160]	; (80027c0 <HAL_UART_MspInit+0x154>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d142      	bne.n	80027aa <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002724:	2302      	movs	r3, #2
 8002726:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002728:	2300      	movs	r3, #0
 800272a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f002 fc8b 	bl	800504c <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0xd4>
      Error_Handler();
 800273c:	f7ff ff0e 	bl	800255c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 8002742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 8002746:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800274a:	6593      	str	r3, [r2, #88]	; 0x58
 800274c:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	4a16      	ldr	r2, [pc, #88]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 800275e:	f043 0308 	orr.w	r3, r3, #8
 8002762:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002764:	4b14      	ldr	r3, [pc, #80]	; (80027b8 <HAL_UART_MspInit+0x14c>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002770:	2378      	movs	r3, #120	; 0x78
 8002772:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002788:	2307      	movs	r3, #7
 800278a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800278e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002792:	4619      	mov	r1, r3
 8002794:	480b      	ldr	r0, [pc, #44]	; (80027c4 <HAL_UART_MspInit+0x158>)
 8002796:	f000 fd61 	bl	800325c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2100      	movs	r1, #0
 800279e:	2026      	movs	r0, #38	; 0x26
 80027a0:	f000 fc6b 	bl	800307a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027a4:	2026      	movs	r0, #38	; 0x26
 80027a6:	f000 fc84 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	37c0      	adds	r7, #192	; 0xc0
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40008000 	.word	0x40008000
 80027b8:	40021000 	.word	0x40021000
 80027bc:	48001800 	.word	0x48001800
 80027c0:	40004400 	.word	0x40004400
 80027c4:	48000c00 	.word	0x48000c00

080027c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b090      	sub	sp, #64	; 0x40
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	605a      	str	r2, [r3, #4]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a74      	ldr	r2, [pc, #464]	; (80029b8 <HAL_TIM_Base_MspInit+0x1f0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d13a      	bne.n	8002860 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027ea:	4b74      	ldr	r3, [pc, #464]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80027ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ee:	4a73      	ldr	r2, [pc, #460]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80027f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027f4:	6613      	str	r3, [r2, #96]	; 0x60
 80027f6:	4b71      	ldr	r3, [pc, #452]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8002800:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002802:	4b6e      	ldr	r3, [pc, #440]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002806:	4a6d      	ldr	r2, [pc, #436]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002808:	f043 0310 	orr.w	r3, r3, #16
 800280c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800280e:	4b6b      	ldr	r3, [pc, #428]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002812:	f003 0310 	and.w	r3, r3, #16
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PE7     ------> TIM1_ETR
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_BKIN2
    PE15     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_13;
 800281a:	f44f 5302 	mov.w	r3, #8320	; 0x2080
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002820:	2302      	movs	r3, #2
 8002822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002824:	2300      	movs	r3, #0
 8002826:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002828:	2300      	movs	r3, #0
 800282a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800282c:	2301      	movs	r3, #1
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002830:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002834:	4619      	mov	r1, r3
 8002836:	4862      	ldr	r0, [pc, #392]	; (80029c0 <HAL_TIM_Base_MspInit+0x1f8>)
 8002838:	f000 fd10 	bl	800325c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800283c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800284a:	2300      	movs	r3, #0
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800284e:	2303      	movs	r3, #3
 8002850:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002852:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002856:	4619      	mov	r1, r3
 8002858:	4859      	ldr	r0, [pc, #356]	; (80029c0 <HAL_TIM_Base_MspInit+0x1f8>)
 800285a:	f000 fcff 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800285e:	e0a6      	b.n	80029ae <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002868:	d129      	bne.n	80028be <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800286a:	4b54      	ldr	r3, [pc, #336]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	4a53      	ldr	r2, [pc, #332]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002870:	f043 0301 	orr.w	r3, r3, #1
 8002874:	6593      	str	r3, [r2, #88]	; 0x58
 8002876:	4b51      	ldr	r3, [pc, #324]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002882:	4b4e      	ldr	r3, [pc, #312]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002886:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002888:	f043 0302 	orr.w	r3, r3, #2
 800288c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800288e:	4b4b      	ldr	r3, [pc, #300]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	61fb      	str	r3, [r7, #28]
 8002898:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800289a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800289e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028ac:	2301      	movs	r3, #1
 80028ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028b4:	4619      	mov	r1, r3
 80028b6:	4843      	ldr	r0, [pc, #268]	; (80029c4 <HAL_TIM_Base_MspInit+0x1fc>)
 80028b8:	f000 fcd0 	bl	800325c <HAL_GPIO_Init>
}
 80028bc:	e077      	b.n	80029ae <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM3)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a41      	ldr	r2, [pc, #260]	; (80029c8 <HAL_TIM_Base_MspInit+0x200>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d128      	bne.n	800291a <HAL_TIM_Base_MspInit+0x152>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028c8:	4b3c      	ldr	r3, [pc, #240]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80028ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028cc:	4a3b      	ldr	r2, [pc, #236]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	6593      	str	r3, [r2, #88]	; 0x58
 80028d4:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	61bb      	str	r3, [r7, #24]
 80028de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028e0:	4b36      	ldr	r3, [pc, #216]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80028e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e4:	4a35      	ldr	r2, [pc, #212]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80028e6:	f043 0304 	orr.w	r3, r3, #4
 80028ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ec:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80028f8:	2380      	movs	r3, #128	; 0x80
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002908:	2302      	movs	r3, #2
 800290a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002910:	4619      	mov	r1, r3
 8002912:	482e      	ldr	r0, [pc, #184]	; (80029cc <HAL_TIM_Base_MspInit+0x204>)
 8002914:	f000 fca2 	bl	800325c <HAL_GPIO_Init>
}
 8002918:	e049      	b.n	80029ae <HAL_TIM_Base_MspInit+0x1e6>
  else if(htim_base->Instance==TIM4)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a2c      	ldr	r2, [pc, #176]	; (80029d0 <HAL_TIM_Base_MspInit+0x208>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d144      	bne.n	80029ae <HAL_TIM_Base_MspInit+0x1e6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a24      	ldr	r2, [pc, #144]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 800292a:	f043 0304 	orr.w	r3, r3, #4
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	613b      	str	r3, [r7, #16]
 800293a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800293c:	4b1f      	ldr	r3, [pc, #124]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 800293e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002942:	f043 0308 	orr.w	r3, r3, #8
 8002946:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002948:	4b1c      	ldr	r3, [pc, #112]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 800294a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002958:	4a18      	ldr	r2, [pc, #96]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 800295a:	f043 0310 	orr.w	r3, r3, #16
 800295e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_TIM_Base_MspInit+0x1f4>)
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800296c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002972:	2302      	movs	r3, #2
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297a:	2300      	movs	r3, #0
 800297c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800297e:	2302      	movs	r3, #2
 8002980:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002982:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002986:	4619      	mov	r1, r3
 8002988:	4812      	ldr	r0, [pc, #72]	; (80029d4 <HAL_TIM_Base_MspInit+0x20c>)
 800298a:	f000 fc67 	bl	800325c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800298e:	2301      	movs	r3, #1
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002992:	2302      	movs	r3, #2
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002996:	2300      	movs	r3, #0
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800299a:	2300      	movs	r3, #0
 800299c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800299e:	2302      	movs	r3, #2
 80029a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80029a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	; (80029c0 <HAL_TIM_Base_MspInit+0x1f8>)
 80029aa:	f000 fc57 	bl	800325c <HAL_GPIO_Init>
}
 80029ae:	bf00      	nop
 80029b0:	3740      	adds	r7, #64	; 0x40
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40012c00 	.word	0x40012c00
 80029bc:	40021000 	.word	0x40021000
 80029c0:	48001000 	.word	0x48001000
 80029c4:	48000400 	.word	0x48000400
 80029c8:	40000400 	.word	0x40000400
 80029cc:	48000800 	.word	0x48000800
 80029d0:	40000800 	.word	0x40000800
 80029d4:	48000c00 	.word	0x48000c00

080029d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08c      	sub	sp, #48	; 0x30
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e0:	f107 031c 	add.w	r3, r7, #28
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
 80029e8:	605a      	str	r2, [r3, #4]
 80029ea:	609a      	str	r2, [r3, #8]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a45      	ldr	r2, [pc, #276]	; (8002b0c <HAL_TIM_MspPostInit+0x134>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d11d      	bne.n	8002a36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029fa:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	4a44      	ldr	r2, [pc, #272]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a00:	f043 0310 	orr.w	r3, r3, #16
 8002a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	f003 0310 	and.w	r3, r3, #16
 8002a0e:	61bb      	str	r3, [r7, #24]
 8002a10:	69bb      	ldr	r3, [r7, #24]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002a12:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002a16:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a20:	2300      	movs	r3, #0
 8002a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a24:	2301      	movs	r3, #1
 8002a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a28:	f107 031c 	add.w	r3, r7, #28
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4839      	ldr	r0, [pc, #228]	; (8002b14 <HAL_TIM_MspPostInit+0x13c>)
 8002a30:	f000 fc14 	bl	800325c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002a34:	e066      	b.n	8002b04 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM2)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a3e:	d11d      	bne.n	8002a7c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a44:	4a32      	ldr	r2, [pc, #200]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4c:	4b30      	ldr	r3, [pc, #192]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	617b      	str	r3, [r7, #20]
 8002a56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 031c 	add.w	r3, r7, #28
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f000 fbf1 	bl	800325c <HAL_GPIO_Init>
}
 8002a7a:	e043      	b.n	8002b04 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM3)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a25      	ldr	r2, [pc, #148]	; (8002b18 <HAL_TIM_MspPostInit+0x140>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11c      	bne.n	8002ac0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a86:	4b22      	ldr	r3, [pc, #136]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a21      	ldr	r2, [pc, #132]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a8c:	f043 0302 	orr.w	r3, r3, #2
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ab2:	f107 031c 	add.w	r3, r7, #28
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4818      	ldr	r0, [pc, #96]	; (8002b1c <HAL_TIM_MspPostInit+0x144>)
 8002aba:	f000 fbcf 	bl	800325c <HAL_GPIO_Init>
}
 8002abe:	e021      	b.n	8002b04 <HAL_TIM_MspPostInit+0x12c>
  else if(htim->Instance==TIM4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a16      	ldr	r2, [pc, #88]	; (8002b20 <HAL_TIM_MspPostInit+0x148>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d11c      	bne.n	8002b04 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aca:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ace:	4a10      	ldr	r2, [pc, #64]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002ad0:	f043 0308 	orr.w	r3, r3, #8
 8002ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ad6:	4b0e      	ldr	r3, [pc, #56]	; (8002b10 <HAL_TIM_MspPostInit+0x138>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae8:	2302      	movs	r3, #2
 8002aea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af0:	2300      	movs	r3, #0
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002af4:	2302      	movs	r3, #2
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	4619      	mov	r1, r3
 8002afe:	4809      	ldr	r0, [pc, #36]	; (8002b24 <HAL_TIM_MspPostInit+0x14c>)
 8002b00:	f000 fbac 	bl	800325c <HAL_GPIO_Init>
}
 8002b04:	bf00      	nop
 8002b06:	3730      	adds	r7, #48	; 0x30
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40012c00 	.word	0x40012c00
 8002b10:	40021000 	.word	0x40021000
 8002b14:	48001000 	.word	0x48001000
 8002b18:	40000400 	.word	0x40000400
 8002b1c:	48000400 	.word	0x48000400
 8002b20:	40000800 	.word	0x40000800
 8002b24:	48000c00 	.word	0x48000c00

08002b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b2c:	e7fe      	b.n	8002b2c <NMI_Handler+0x4>

08002b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b32:	e7fe      	b.n	8002b32 <HardFault_Handler+0x4>

08002b34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b38:	e7fe      	b.n	8002b38 <MemManage_Handler+0x4>

08002b3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3e:	e7fe      	b.n	8002b3e <BusFault_Handler+0x4>

08002b40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b40:	b480      	push	{r7}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b44:	e7fe      	b.n	8002b44 <UsageFault_Handler+0x4>

08002b46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b46:	b480      	push	{r7}
 8002b48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b74:	f000 f962 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <USART2_IRQHandler+0x10>)
 8002b82:	f004 f98b 	bl	8006e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000428 	.word	0x20000428

08002b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	return 1;
 8002b94:	2301      	movs	r3, #1
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <_kill>:

int _kill(int pid, int sig)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002baa:	f006 f8bf 	bl	8008d2c <__errno>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2216      	movs	r2, #22
 8002bb2:	601a      	str	r2, [r3, #0]
	return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <_exit>:

void _exit (int status)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f7ff ffe7 	bl	8002ba0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002bd2:	e7fe      	b.n	8002bd2 <_exit+0x12>

08002bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	e00a      	b.n	8002bfc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002be6:	f3af 8000 	nop.w
 8002bea:	4601      	mov	r1, r0
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	60ba      	str	r2, [r7, #8]
 8002bf2:	b2ca      	uxtb	r2, r1
 8002bf4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	dbf0      	blt.n	8002be6 <_read+0x12>
	}

return len;
 8002c04:	687b      	ldr	r3, [r7, #4]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3718      	adds	r7, #24
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	617b      	str	r3, [r7, #20]
 8002c1e:	e009      	b.n	8002c34 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	60ba      	str	r2, [r7, #8]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff fc59 	bl	80024e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	3301      	adds	r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	dbf1      	blt.n	8002c20 <_write+0x12>
	}
	return len;
 8002c3c:	687b      	ldr	r3, [r7, #4]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3718      	adds	r7, #24
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <_close>:

int _close(int file)
{
 8002c46:	b480      	push	{r7}
 8002c48:	b083      	sub	sp, #12
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8002c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8002c70:	2300      	movs	r3, #0
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <_isatty>:

int _isatty(int file)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
	return 1;
 8002c86:	2301      	movs	r3, #1
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3714      	adds	r7, #20
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
	...

08002cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <_sbrk+0x5c>)
 8002cba:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <_sbrk+0x60>)
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <_sbrk+0x64>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ccc:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <_sbrk+0x64>)
 8002cce:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <_sbrk+0x68>)
 8002cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <_sbrk+0x64>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4413      	add	r3, r2
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d207      	bcs.n	8002cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ce0:	f006 f824 	bl	8008d2c <__errno>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	220c      	movs	r2, #12
 8002ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cea:	f04f 33ff 	mov.w	r3, #4294967295
 8002cee:	e009      	b.n	8002d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <_sbrk+0x64>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cf6:	4b07      	ldr	r3, [pc, #28]	; (8002d14 <_sbrk+0x64>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	4a05      	ldr	r2, [pc, #20]	; (8002d14 <_sbrk+0x64>)
 8002d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d02:	68fb      	ldr	r3, [r7, #12]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	200a0000 	.word	0x200a0000
 8002d10:	00000400 	.word	0x00000400
 8002d14:	2000020c 	.word	0x2000020c
 8002d18:	200004d0 	.word	0x200004d0

08002d1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <SystemInit+0x20>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <SystemInit+0x20>)
 8002d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d78 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d44:	f7ff ffea 	bl	8002d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d48:	480c      	ldr	r0, [pc, #48]	; (8002d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d4a:	490d      	ldr	r1, [pc, #52]	; (8002d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <LoopForever+0xe>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d50:	e002      	b.n	8002d58 <LoopCopyDataInit>

08002d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d56:	3304      	adds	r3, #4

08002d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d5c:	d3f9      	bcc.n	8002d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d5e:	4a0a      	ldr	r2, [pc, #40]	; (8002d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d60:	4c0a      	ldr	r4, [pc, #40]	; (8002d8c <LoopForever+0x16>)
  movs r3, #0
 8002d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d64:	e001      	b.n	8002d6a <LoopFillZerobss>

08002d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d68:	3204      	adds	r2, #4

08002d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d6c:	d3fb      	bcc.n	8002d66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d6e:	f005 ffe3 	bl	8008d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d72:	f7fe fd75 	bl	8001860 <main>

08002d76 <LoopForever>:

LoopForever:
    b LoopForever
 8002d76:	e7fe      	b.n	8002d76 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002d78:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d80:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002d84:	0800bc0c 	.word	0x0800bc0c
  ldr r2, =_sbss
 8002d88:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002d8c:	200004d0 	.word	0x200004d0

08002d90 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d90:	e7fe      	b.n	8002d90 <ADC1_IRQHandler>

08002d92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d9c:	2003      	movs	r0, #3
 8002d9e:	f000 f961 	bl	8003064 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002da2:	2000      	movs	r0, #0
 8002da4:	f000 f80e 	bl	8002dc4 <HAL_InitTick>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	71fb      	strb	r3, [r7, #7]
 8002db2:	e001      	b.n	8002db8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db4:	f7ff fbd8 	bl	8002568 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002db8:	79fb      	ldrb	r3, [r7, #7]
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3708      	adds	r7, #8
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002dd0:	4b17      	ldr	r3, [pc, #92]	; (8002e30 <HAL_InitTick+0x6c>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d023      	beq.n	8002e20 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <HAL_InitTick+0x70>)
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	4b14      	ldr	r3, [pc, #80]	; (8002e30 <HAL_InitTick+0x6c>)
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de6:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f96d 	bl	80030ce <HAL_SYSTICK_Config>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b0f      	cmp	r3, #15
 8002dfe:	d809      	bhi.n	8002e14 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e00:	2200      	movs	r2, #0
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	f04f 30ff 	mov.w	r0, #4294967295
 8002e08:	f000 f937 	bl	800307a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002e0c:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <HAL_InitTick+0x74>)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	e007      	b.n	8002e24 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e004      	b.n	8002e24 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	73fb      	strb	r3, [r7, #15]
 8002e1e:	e001      	b.n	8002e24 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000008 	.word	0x20000008
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000004 	.word	0x20000004

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000008 	.word	0x20000008
 8002e60:	200004bc 	.word	0x200004bc

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	200004bc 	.word	0x200004bc

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000008 	.word	0x20000008

08002ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ed4:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002eda:	68ba      	ldr	r2, [r7, #8]
 8002edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ef6:	4a04      	ldr	r2, [pc, #16]	; (8002f08 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	60d3      	str	r3, [r2, #12]
}
 8002efc:	bf00      	nop
 8002efe:	3714      	adds	r7, #20
 8002f00:	46bd      	mov	sp, r7
 8002f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f06:	4770      	bx	lr
 8002f08:	e000ed00 	.word	0xe000ed00

08002f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <__NVIC_GetPriorityGrouping+0x18>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	0a1b      	lsrs	r3, r3, #8
 8002f16:	f003 0307 	and.w	r3, r3, #7
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	db0b      	blt.n	8002f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f3a:	79fb      	ldrb	r3, [r7, #7]
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	4907      	ldr	r1, [pc, #28]	; (8002f60 <__NVIC_EnableIRQ+0x38>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	2001      	movs	r0, #1
 8002f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	e000e100 	.word	0xe000e100

08002f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	6039      	str	r1, [r7, #0]
 8002f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	db0a      	blt.n	8002f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	490c      	ldr	r1, [pc, #48]	; (8002fb0 <__NVIC_SetPriority+0x4c>)
 8002f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	440b      	add	r3, r1
 8002f88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f8c:	e00a      	b.n	8002fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	b2da      	uxtb	r2, r3
 8002f92:	4908      	ldr	r1, [pc, #32]	; (8002fb4 <__NVIC_SetPriority+0x50>)
 8002f94:	79fb      	ldrb	r3, [r7, #7]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	3b04      	subs	r3, #4
 8002f9c:	0112      	lsls	r2, r2, #4
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	761a      	strb	r2, [r3, #24]
}
 8002fa4:	bf00      	nop
 8002fa6:	370c      	adds	r7, #12
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000e100 	.word	0xe000e100
 8002fb4:	e000ed00 	.word	0xe000ed00

08002fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b089      	sub	sp, #36	; 0x24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f1c3 0307 	rsb	r3, r3, #7
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	bf28      	it	cs
 8002fd6:	2304      	movcs	r3, #4
 8002fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	2b06      	cmp	r3, #6
 8002fe0:	d902      	bls.n	8002fe8 <NVIC_EncodePriority+0x30>
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	3b03      	subs	r3, #3
 8002fe6:	e000      	b.n	8002fea <NVIC_EncodePriority+0x32>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fec:	f04f 32ff 	mov.w	r2, #4294967295
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43da      	mvns	r2, r3
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003000:	f04f 31ff 	mov.w	r1, #4294967295
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	fa01 f303 	lsl.w	r3, r1, r3
 800300a:	43d9      	mvns	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003010:	4313      	orrs	r3, r2
         );
}
 8003012:	4618      	mov	r0, r3
 8003014:	3724      	adds	r7, #36	; 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3b01      	subs	r3, #1
 800302c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003030:	d301      	bcc.n	8003036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003032:	2301      	movs	r3, #1
 8003034:	e00f      	b.n	8003056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003036:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <SysTick_Config+0x40>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3b01      	subs	r3, #1
 800303c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800303e:	210f      	movs	r1, #15
 8003040:	f04f 30ff 	mov.w	r0, #4294967295
 8003044:	f7ff ff8e 	bl	8002f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <SysTick_Config+0x40>)
 800304a:	2200      	movs	r2, #0
 800304c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800304e:	4b04      	ldr	r3, [pc, #16]	; (8003060 <SysTick_Config+0x40>)
 8003050:	2207      	movs	r2, #7
 8003052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	e000e010 	.word	0xe000e010

08003064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f7ff ff29 	bl	8002ec4 <__NVIC_SetPriorityGrouping>
}
 8003072:	bf00      	nop
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b086      	sub	sp, #24
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	60b9      	str	r1, [r7, #8]
 8003084:	607a      	str	r2, [r7, #4]
 8003086:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003088:	2300      	movs	r3, #0
 800308a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800308c:	f7ff ff3e 	bl	8002f0c <__NVIC_GetPriorityGrouping>
 8003090:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	6978      	ldr	r0, [r7, #20]
 8003098:	f7ff ff8e 	bl	8002fb8 <NVIC_EncodePriority>
 800309c:	4602      	mov	r2, r0
 800309e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030a2:	4611      	mov	r1, r2
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff ff5d 	bl	8002f64 <__NVIC_SetPriority>
}
 80030aa:	bf00      	nop
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	4603      	mov	r3, r0
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff ff31 	bl	8002f28 <__NVIC_EnableIRQ>
}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7ff ffa2 	bl	8003020 <SysTick_Config>
 80030dc:	4603      	mov	r3, r0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d008      	beq.n	8003110 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2204      	movs	r2, #4
 8003102:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e040      	b.n	8003192 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 020e 	bic.w	r2, r2, #14
 800311e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800312a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800312e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0201 	bic.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f003 021c 	and.w	r2, r3, #28
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	2101      	movs	r1, #1
 800314e:	fa01 f202 	lsl.w	r2, r1, r2
 8003152:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800315c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003174:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800317e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003190:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003192:	4618      	mov	r0, r3
 8003194:	3714      	adds	r7, #20
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr

0800319e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a6:	2300      	movs	r3, #0
 80031a8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d005      	beq.n	80031c2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	73fb      	strb	r3, [r7, #15]
 80031c0:	e047      	b.n	8003252 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f022 020e 	bic.w	r2, r2, #14
 80031d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0201 	bic.w	r2, r2, #1
 80031e0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f003 021c 	and.w	r2, r3, #28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800320e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00c      	beq.n	8003232 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003226:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003230:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
    }
  }
  return status;
 8003252:	7bfb      	ldrb	r3, [r7, #15]
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003266:	2300      	movs	r3, #0
 8003268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800326a:	e166      	b.n	800353a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	2101      	movs	r1, #1
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	4013      	ands	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8158 	beq.w	8003534 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d005      	beq.n	800329c <HAL_GPIO_Init+0x40>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d130      	bne.n	80032fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	2203      	movs	r2, #3
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	68da      	ldr	r2, [r3, #12]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	005b      	lsls	r3, r3, #1
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80032d2:	2201      	movs	r2, #1
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	4013      	ands	r3, r2
 80032e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 0201 	and.w	r2, r3, #1
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa02 f303 	lsl.w	r3, r2, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	2b03      	cmp	r3, #3
 8003308:	d017      	beq.n	800333a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	4013      	ands	r3, r2
 8003320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d123      	bne.n	800338e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	08da      	lsrs	r2, r3, #3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	3208      	adds	r2, #8
 800334e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0307 	and.w	r3, r3, #7
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	693a      	ldr	r2, [r7, #16]
 8003366:	4013      	ands	r3, r2
 8003368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	691a      	ldr	r2, [r3, #16]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	6939      	ldr	r1, [r7, #16]
 800338a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f003 0203 	and.w	r2, r3, #3
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80b2 	beq.w	8003534 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_GPIO_Init+0x2fc>)
 80033d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d4:	4a60      	ldr	r2, [pc, #384]	; (8003558 <HAL_GPIO_Init+0x2fc>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	6613      	str	r3, [r2, #96]	; 0x60
 80033dc:	4b5e      	ldr	r3, [pc, #376]	; (8003558 <HAL_GPIO_Init+0x2fc>)
 80033de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
 80033e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80033e8:	4a5c      	ldr	r2, [pc, #368]	; (800355c <HAL_GPIO_Init+0x300>)
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	089b      	lsrs	r3, r3, #2
 80033ee:	3302      	adds	r3, #2
 80033f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	220f      	movs	r2, #15
 8003400:	fa02 f303 	lsl.w	r3, r2, r3
 8003404:	43db      	mvns	r3, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4013      	ands	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003412:	d02b      	beq.n	800346c <HAL_GPIO_Init+0x210>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_GPIO_Init+0x304>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d025      	beq.n	8003468 <HAL_GPIO_Init+0x20c>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_GPIO_Init+0x308>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01f      	beq.n	8003464 <HAL_GPIO_Init+0x208>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a50      	ldr	r2, [pc, #320]	; (8003568 <HAL_GPIO_Init+0x30c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d019      	beq.n	8003460 <HAL_GPIO_Init+0x204>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a4f      	ldr	r2, [pc, #316]	; (800356c <HAL_GPIO_Init+0x310>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d013      	beq.n	800345c <HAL_GPIO_Init+0x200>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a4e      	ldr	r2, [pc, #312]	; (8003570 <HAL_GPIO_Init+0x314>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00d      	beq.n	8003458 <HAL_GPIO_Init+0x1fc>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a4d      	ldr	r2, [pc, #308]	; (8003574 <HAL_GPIO_Init+0x318>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <HAL_GPIO_Init+0x1f8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_GPIO_Init+0x31c>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_GPIO_Init+0x1f4>
 800344c:	2307      	movs	r3, #7
 800344e:	e00e      	b.n	800346e <HAL_GPIO_Init+0x212>
 8003450:	2308      	movs	r3, #8
 8003452:	e00c      	b.n	800346e <HAL_GPIO_Init+0x212>
 8003454:	2306      	movs	r3, #6
 8003456:	e00a      	b.n	800346e <HAL_GPIO_Init+0x212>
 8003458:	2305      	movs	r3, #5
 800345a:	e008      	b.n	800346e <HAL_GPIO_Init+0x212>
 800345c:	2304      	movs	r3, #4
 800345e:	e006      	b.n	800346e <HAL_GPIO_Init+0x212>
 8003460:	2303      	movs	r3, #3
 8003462:	e004      	b.n	800346e <HAL_GPIO_Init+0x212>
 8003464:	2302      	movs	r3, #2
 8003466:	e002      	b.n	800346e <HAL_GPIO_Init+0x212>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_GPIO_Init+0x212>
 800346c:	2300      	movs	r3, #0
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	f002 0203 	and.w	r2, r2, #3
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	4093      	lsls	r3, r2
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800347e:	4937      	ldr	r1, [pc, #220]	; (800355c <HAL_GPIO_Init+0x300>)
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	3302      	adds	r3, #2
 8003486:	693a      	ldr	r2, [r7, #16]
 8003488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800348c:	4b3b      	ldr	r3, [pc, #236]	; (800357c <HAL_GPIO_Init+0x320>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	43db      	mvns	r3, r3
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034b0:	4a32      	ldr	r2, [pc, #200]	; (800357c <HAL_GPIO_Init+0x320>)
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034b6:	4b31      	ldr	r3, [pc, #196]	; (800357c <HAL_GPIO_Init+0x320>)
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	43db      	mvns	r3, r3
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4013      	ands	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d003      	beq.n	80034da <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034da:	4a28      	ldr	r2, [pc, #160]	; (800357c <HAL_GPIO_Init+0x320>)
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80034e0:	4b26      	ldr	r3, [pc, #152]	; (800357c <HAL_GPIO_Init+0x320>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	43db      	mvns	r3, r3
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4013      	ands	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003504:	4a1d      	ldr	r2, [pc, #116]	; (800357c <HAL_GPIO_Init+0x320>)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800350a:	4b1c      	ldr	r3, [pc, #112]	; (800357c <HAL_GPIO_Init+0x320>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	43db      	mvns	r3, r3
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800352e:	4a13      	ldr	r2, [pc, #76]	; (800357c <HAL_GPIO_Init+0x320>)
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	3301      	adds	r3, #1
 8003538:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fa22 f303 	lsr.w	r3, r2, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	f47f ae91 	bne.w	800326c <HAL_GPIO_Init+0x10>
  }
}
 800354a:	bf00      	nop
 800354c:	bf00      	nop
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr
 8003558:	40021000 	.word	0x40021000
 800355c:	40010000 	.word	0x40010000
 8003560:	48000400 	.word	0x48000400
 8003564:	48000800 	.word	0x48000800
 8003568:	48000c00 	.word	0x48000c00
 800356c:	48001000 	.word	0x48001000
 8003570:	48001400 	.word	0x48001400
 8003574:	48001800 	.word	0x48001800
 8003578:	48001c00 	.word	0x48001c00
 800357c:	40010400 	.word	0x40010400

08003580 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	460b      	mov	r3, r1
 800358a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003598:	2301      	movs	r3, #1
 800359a:	73fb      	strb	r3, [r7, #15]
 800359c:	e001      	b.n	80035a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800359e:	2300      	movs	r3, #0
 80035a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3714      	adds	r7, #20
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	807b      	strh	r3, [r7, #2]
 80035bc:	4613      	mov	r3, r2
 80035be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035c0:	787b      	ldrb	r3, [r7, #1]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035c6:	887a      	ldrh	r2, [r7, #2]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035cc:	e002      	b.n	80035d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035ce:	887a      	ldrh	r2, [r7, #2]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e081      	b.n	80036f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fe ffd2 	bl	80025b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2224      	movs	r2, #36	; 0x24
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003630:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003640:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d107      	bne.n	800365a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689a      	ldr	r2, [r3, #8]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003656:	609a      	str	r2, [r3, #8]
 8003658:	e006      	b.n	8003668 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003666:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b02      	cmp	r3, #2
 800366e:	d104      	bne.n	800367a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003678:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003688:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800368c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800369c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691a      	ldr	r2, [r3, #16]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	69d9      	ldr	r1, [r3, #28]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b088      	sub	sp, #32
 8003704:	af02      	add	r7, sp, #8
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	607a      	str	r2, [r7, #4]
 800370a:	461a      	mov	r2, r3
 800370c:	460b      	mov	r3, r1
 800370e:	817b      	strh	r3, [r7, #10]
 8003710:	4613      	mov	r3, r2
 8003712:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b20      	cmp	r3, #32
 800371e:	f040 80da 	bne.w	80038d6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_I2C_Master_Transmit+0x30>
 800372c:	2302      	movs	r3, #2
 800372e:	e0d3      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1d8>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003738:	f7ff fb94 	bl	8002e64 <HAL_GetTick>
 800373c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	2319      	movs	r3, #25
 8003744:	2201      	movs	r2, #1
 8003746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f9e6 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0be      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2221      	movs	r2, #33	; 0x21
 800375e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2210      	movs	r2, #16
 8003766:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	893a      	ldrh	r2, [r7, #8]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	2bff      	cmp	r3, #255	; 0xff
 800378a:	d90e      	bls.n	80037aa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	22ff      	movs	r2, #255	; 0xff
 8003790:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	b2da      	uxtb	r2, r3
 8003798:	8979      	ldrh	r1, [r7, #10]
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <HAL_I2C_Master_Transmit+0x1e0>)
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fbdc 	bl	8003f60 <I2C_TransferConfig>
 80037a8:	e06c      	b.n	8003884 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	b2da      	uxtb	r2, r3
 80037ba:	8979      	ldrh	r1, [r7, #10]
 80037bc:	4b48      	ldr	r3, [pc, #288]	; (80038e0 <HAL_I2C_Master_Transmit+0x1e0>)
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fbcb 	bl	8003f60 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80037ca:	e05b      	b.n	8003884 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	6a39      	ldr	r1, [r7, #32]
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f9e3 	bl	8003b9c <I2C_WaitOnTXISFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e07b      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	d034      	beq.n	8003884 <HAL_I2C_Master_Transmit+0x184>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d130      	bne.n	8003884 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	2200      	movs	r2, #0
 800382a:	2180      	movs	r1, #128	; 0x80
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f975 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e04d      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	2bff      	cmp	r3, #255	; 0xff
 8003844:	d90e      	bls.n	8003864 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	22ff      	movs	r2, #255	; 0xff
 800384a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003850:	b2da      	uxtb	r2, r3
 8003852:	8979      	ldrh	r1, [r7, #10]
 8003854:	2300      	movs	r3, #0
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800385c:	68f8      	ldr	r0, [r7, #12]
 800385e:	f000 fb7f 	bl	8003f60 <I2C_TransferConfig>
 8003862:	e00f      	b.n	8003884 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	b2da      	uxtb	r2, r3
 8003874:	8979      	ldrh	r1, [r7, #10]
 8003876:	2300      	movs	r3, #0
 8003878:	9300      	str	r3, [sp, #0]
 800387a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fb6e 	bl	8003f60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d19e      	bne.n	80037cc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388e:	697a      	ldr	r2, [r7, #20]
 8003890:	6a39      	ldr	r1, [r7, #32]
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f000 f9c2 	bl	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e01a      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2220      	movs	r2, #32
 80038a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <HAL_I2C_Master_Transmit+0x1e4>)
 80038b6:	400b      	ands	r3, r1
 80038b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038d2:	2300      	movs	r3, #0
 80038d4:	e000      	b.n	80038d8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80038d6:	2302      	movs	r3, #2
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	80002000 	.word	0x80002000
 80038e4:	fe00e800 	.word	0xfe00e800

080038e8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	607a      	str	r2, [r7, #4]
 80038f2:	461a      	mov	r2, r3
 80038f4:	460b      	mov	r3, r1
 80038f6:	817b      	strh	r3, [r7, #10]
 80038f8:	4613      	mov	r3, r2
 80038fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b20      	cmp	r3, #32
 8003906:	f040 80db 	bne.w	8003ac0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_I2C_Master_Receive+0x30>
 8003914:	2302      	movs	r3, #2
 8003916:	e0d4      	b.n	8003ac2 <HAL_I2C_Master_Receive+0x1da>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003920:	f7ff faa0 	bl	8002e64 <HAL_GetTick>
 8003924:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	2319      	movs	r3, #25
 800392c:	2201      	movs	r2, #1
 800392e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f000 f8f2 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d001      	beq.n	8003942 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e0bf      	b.n	8003ac2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2222      	movs	r2, #34	; 0x22
 8003946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2210      	movs	r2, #16
 800394e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	893a      	ldrh	r2, [r7, #8]
 8003962:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2bff      	cmp	r3, #255	; 0xff
 8003972:	d90e      	bls.n	8003992 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	22ff      	movs	r2, #255	; 0xff
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	b2da      	uxtb	r2, r3
 8003980:	8979      	ldrh	r1, [r7, #10]
 8003982:	4b52      	ldr	r3, [pc, #328]	; (8003acc <HAL_I2C_Master_Receive+0x1e4>)
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fae8 	bl	8003f60 <I2C_TransferConfig>
 8003990:	e06d      	b.n	8003a6e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	8979      	ldrh	r1, [r7, #10]
 80039a4:	4b49      	ldr	r3, [pc, #292]	; (8003acc <HAL_I2C_Master_Receive+0x1e4>)
 80039a6:	9300      	str	r3, [sp, #0]
 80039a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 fad7 	bl	8003f60 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80039b2:	e05c      	b.n	8003a6e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	6a39      	ldr	r1, [r7, #32]
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 f96b 	bl	8003c94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e07c      	b.n	8003ac2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d034      	beq.n	8003a6e <HAL_I2C_Master_Receive+0x186>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d130      	bne.n	8003a6e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	2200      	movs	r2, #0
 8003a14:	2180      	movs	r1, #128	; 0x80
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f880 	bl	8003b1c <I2C_WaitOnFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e04d      	b.n	8003ac2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2bff      	cmp	r3, #255	; 0xff
 8003a2e:	d90e      	bls.n	8003a4e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	22ff      	movs	r2, #255	; 0xff
 8003a34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a3a:	b2da      	uxtb	r2, r3
 8003a3c:	8979      	ldrh	r1, [r7, #10]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f000 fa8a 	bl	8003f60 <I2C_TransferConfig>
 8003a4c:	e00f      	b.n	8003a6e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	8979      	ldrh	r1, [r7, #10]
 8003a60:	2300      	movs	r3, #0
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a68:	68f8      	ldr	r0, [r7, #12]
 8003a6a:	f000 fa79 	bl	8003f60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d19d      	bne.n	80039b4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a78:	697a      	ldr	r2, [r7, #20]
 8003a7a:	6a39      	ldr	r1, [r7, #32]
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f8cd 	bl	8003c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e01a      	b.n	8003ac2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2220      	movs	r2, #32
 8003a92:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6859      	ldr	r1, [r3, #4]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <HAL_I2C_Master_Receive+0x1e8>)
 8003aa0:	400b      	ands	r3, r1
 8003aa2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003ac0:	2302      	movs	r3, #2
  }
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	80002400 	.word	0x80002400
 8003ad0:	fe00e800 	.word	0xfe00e800

08003ad4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d103      	bne.n	8003af2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d007      	beq.n	8003b10 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	619a      	str	r2, [r3, #24]
  }
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	603b      	str	r3, [r7, #0]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b2c:	e022      	b.n	8003b74 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b34:	d01e      	beq.n	8003b74 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b36:	f7ff f995 	bl	8002e64 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	683a      	ldr	r2, [r7, #0]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d302      	bcc.n	8003b4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d113      	bne.n	8003b74 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b50:	f043 0220 	orr.w	r2, r3, #32
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e00f      	b.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	bf0c      	ite	eq
 8003b84:	2301      	moveq	r3, #1
 8003b86:	2300      	movne	r3, #0
 8003b88:	b2db      	uxtb	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	79fb      	ldrb	r3, [r7, #7]
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d0cd      	beq.n	8003b2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3710      	adds	r7, #16
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ba8:	e02c      	b.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f8ea 	bl	8003d88 <I2C_IsErrorOccurred>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e02a      	b.n	8003c14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d01e      	beq.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7ff f94d 	bl	8002e64 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d113      	bne.n	8003c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be0:	f043 0220 	orr.w	r2, r3, #32
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e007      	b.n	8003c14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d1cb      	bne.n	8003baa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c28:	e028      	b.n	8003c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f8aa 	bl	8003d88 <I2C_IsErrorOccurred>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e026      	b.n	8003c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3e:	f7ff f911 	bl	8002e64 <HAL_GetTick>
 8003c42:	4602      	mov	r2, r0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	1ad3      	subs	r3, r2, r3
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d302      	bcc.n	8003c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d113      	bne.n	8003c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c58:	f043 0220 	orr.w	r2, r3, #32
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	699b      	ldr	r3, [r3, #24]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d1cf      	bne.n	8003c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca0:	e064      	b.n	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	68b9      	ldr	r1, [r7, #8]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	f000 f86e 	bl	8003d88 <I2C_IsErrorOccurred>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e062      	b.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	699b      	ldr	r3, [r3, #24]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d138      	bne.n	8003d36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d105      	bne.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e04e      	b.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0310 	and.w	r3, r3, #16
 8003ce8:	2b10      	cmp	r3, #16
 8003cea:	d107      	bne.n	8003cfc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2210      	movs	r2, #16
 8003cf2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2204      	movs	r2, #4
 8003cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8003cfa:	e002      	b.n	8003d02 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2220      	movs	r2, #32
 8003d08:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003d16:	400b      	ands	r3, r1
 8003d18:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d36:	f7ff f895 	bl	8002e64 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d302      	bcc.n	8003d4c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d10f      	bne.n	8003d6c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d50:	f043 0220 	orr.w	r2, r3, #32
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e007      	b.n	8003d7c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d193      	bne.n	8003ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3710      	adds	r7, #16
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	fe00e800 	.word	0xfe00e800

08003d88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b08a      	sub	sp, #40	; 0x28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003da2:	2300      	movs	r3, #0
 8003da4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d075      	beq.n	8003ea0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2210      	movs	r2, #16
 8003dba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003dbc:	e056      	b.n	8003e6c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc4:	d052      	beq.n	8003e6c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dc6:	f7ff f84d 	bl	8002e64 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d302      	bcc.n	8003ddc <I2C_IsErrorOccurred+0x54>
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d147      	bne.n	8003e6c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dfe:	d12e      	bne.n	8003e5e <I2C_IsErrorOccurred+0xd6>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e06:	d02a      	beq.n	8003e5e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003e08:	7cfb      	ldrb	r3, [r7, #19]
 8003e0a:	2b20      	cmp	r3, #32
 8003e0c:	d027      	beq.n	8003e5e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e1c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e1e:	f7ff f821 	bl	8002e64 <HAL_GetTick>
 8003e22:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e24:	e01b      	b.n	8003e5e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e26:	f7ff f81d 	bl	8002e64 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b19      	cmp	r3, #25
 8003e32:	d914      	bls.n	8003e5e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	f043 0220 	orr.w	r2, r3, #32
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d1dc      	bne.n	8003e26 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	d003      	beq.n	8003e82 <I2C_IsErrorOccurred+0xfa>
 8003e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d09d      	beq.n	8003dbe <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003e82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	f043 0304 	orr.w	r3, r3, #4
 8003e98:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	f043 0301 	orr.w	r3, r3, #1
 8003eb8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ec2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00b      	beq.n	8003eec <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	f043 0308 	orr.w	r3, r3, #8
 8003eda:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ee4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00b      	beq.n	8003f0e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003ef6:	6a3b      	ldr	r3, [r7, #32]
 8003ef8:	f043 0302 	orr.w	r3, r3, #2
 8003efc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d01c      	beq.n	8003f50 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f7ff fddc 	bl	8003ad4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b0d      	ldr	r3, [pc, #52]	; (8003f5c <I2C_IsErrorOccurred+0x1d4>)
 8003f28:	400b      	ands	r3, r1
 8003f2a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003f50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3728      	adds	r7, #40	; 0x28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	fe00e800 	.word	0xfe00e800

08003f60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	817b      	strh	r3, [r7, #10]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f72:	897b      	ldrh	r3, [r7, #10]
 8003f74:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f78:	7a7b      	ldrb	r3, [r7, #9]
 8003f7a:	041b      	lsls	r3, r3, #16
 8003f7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f80:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f8e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685a      	ldr	r2, [r3, #4]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	0d5b      	lsrs	r3, r3, #21
 8003f9a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003f9e:	4b08      	ldr	r3, [pc, #32]	; (8003fc0 <I2C_TransferConfig+0x60>)
 8003fa0:	430b      	orrs	r3, r1
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	ea02 0103 	and.w	r1, r2, r3
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	697a      	ldr	r2, [r7, #20]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003fb2:	bf00      	nop
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	03ff63ff 	.word	0x03ff63ff

08003fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d138      	bne.n	800404c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e032      	b.n	800404e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2224      	movs	r2, #36	; 0x24
 8003ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f022 0201 	bic.w	r2, r2, #1
 8004006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6819      	ldr	r1, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2220      	movs	r2, #32
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004048:	2300      	movs	r3, #0
 800404a:	e000      	b.n	800404e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800404c:	2302      	movs	r3, #2
  }
}
 800404e:	4618      	mov	r0, r3
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800405a:	b480      	push	{r7}
 800405c:	b085      	sub	sp, #20
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
 8004062:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b20      	cmp	r3, #32
 800406e:	d139      	bne.n	80040e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004076:	2b01      	cmp	r3, #1
 8004078:	d101      	bne.n	800407e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800407a:	2302      	movs	r3, #2
 800407c:	e033      	b.n	80040e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2224      	movs	r2, #36	; 0x24
 800408a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0201 	bic.w	r2, r2, #1
 800409c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	021b      	lsls	r3, r3, #8
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0201 	orr.w	r2, r2, #1
 80040ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2220      	movs	r2, #32
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040e0:	2300      	movs	r3, #0
 80040e2:	e000      	b.n	80040e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040e4:	2302      	movs	r3, #2
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040f8:	4b0d      	ldr	r3, [pc, #52]	; (8004130 <HAL_PWREx_GetVoltageRange+0x3c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004104:	d102      	bne.n	800410c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004106:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800410a:	e00b      	b.n	8004124 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800410c:	4b08      	ldr	r3, [pc, #32]	; (8004130 <HAL_PWREx_GetVoltageRange+0x3c>)
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800411a:	d102      	bne.n	8004122 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800411c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004120:	e000      	b.n	8004124 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004122:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004124:	4618      	mov	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40007000 	.word	0x40007000

08004134 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d141      	bne.n	80041c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004142:	4b4b      	ldr	r3, [pc, #300]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800414a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800414e:	d131      	bne.n	80041b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004150:	4b47      	ldr	r3, [pc, #284]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004152:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004156:	4a46      	ldr	r2, [pc, #280]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800415c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004160:	4b43      	ldr	r3, [pc, #268]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004168:	4a41      	ldr	r2, [pc, #260]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800416e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004170:	4b40      	ldr	r3, [pc, #256]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2232      	movs	r2, #50	; 0x32
 8004176:	fb02 f303 	mul.w	r3, r2, r3
 800417a:	4a3f      	ldr	r2, [pc, #252]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800417c:	fba2 2303 	umull	r2, r3, r2, r3
 8004180:	0c9b      	lsrs	r3, r3, #18
 8004182:	3301      	adds	r3, #1
 8004184:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004186:	e002      	b.n	800418e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	3b01      	subs	r3, #1
 800418c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800418e:	4b38      	ldr	r3, [pc, #224]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800419a:	d102      	bne.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d1f2      	bne.n	8004188 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041a2:	4b33      	ldr	r3, [pc, #204]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041a4:	695b      	ldr	r3, [r3, #20]
 80041a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ae:	d158      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e057      	b.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b4:	4b2e      	ldr	r3, [pc, #184]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041ba:	4a2d      	ldr	r2, [pc, #180]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041c4:	e04d      	b.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041cc:	d141      	bne.n	8004252 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ce:	4b28      	ldr	r3, [pc, #160]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041da:	d131      	bne.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041dc:	4b24      	ldr	r3, [pc, #144]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041e2:	4a23      	ldr	r2, [pc, #140]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ec:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041f4:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041fc:	4b1d      	ldr	r3, [pc, #116]	; (8004274 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2232      	movs	r2, #50	; 0x32
 8004202:	fb02 f303 	mul.w	r3, r2, r3
 8004206:	4a1c      	ldr	r2, [pc, #112]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	0c9b      	lsrs	r3, r3, #18
 800420e:	3301      	adds	r3, #1
 8004210:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004212:	e002      	b.n	800421a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	3b01      	subs	r3, #1
 8004218:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004226:	d102      	bne.n	800422e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f2      	bne.n	8004214 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800422e:	4b10      	ldr	r3, [pc, #64]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800423a:	d112      	bne.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800423c:	2303      	movs	r3, #3
 800423e:	e011      	b.n	8004264 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004242:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004246:	4a0a      	ldr	r2, [pc, #40]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004250:	e007      	b.n	8004262 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004252:	4b07      	ldr	r3, [pc, #28]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800425a:	4a05      	ldr	r2, [pc, #20]	; (8004270 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800425c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004260:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40007000 	.word	0x40007000
 8004274:	20000000 	.word	0x20000000
 8004278:	431bde83 	.word	0x431bde83

0800427c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 800427c:	b480      	push	{r7}
 800427e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004280:	4b05      	ldr	r3, [pc, #20]	; (8004298 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a04      	ldr	r2, [pc, #16]	; (8004298 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004286:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800428a:	6053      	str	r3, [r2, #4]
}
 800428c:	bf00      	nop
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40007000 	.word	0x40007000

0800429c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f000 bc16 	b.w	8004adc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042b0:	4ba0      	ldr	r3, [pc, #640]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ba:	4b9e      	ldr	r3, [pc, #632]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80e4 	beq.w	800449a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d007      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4c>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	f040 808b 	bne.w	80043f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 8087 	bne.w	80043f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042e8:	4b92      	ldr	r3, [pc, #584]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d005      	beq.n	8004300 <HAL_RCC_OscConfig+0x64>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e3ed      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a1a      	ldr	r2, [r3, #32]
 8004304:	4b8b      	ldr	r3, [pc, #556]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0308 	and.w	r3, r3, #8
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_RCC_OscConfig+0x7e>
 8004310:	4b88      	ldr	r3, [pc, #544]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004318:	e005      	b.n	8004326 <HAL_RCC_OscConfig+0x8a>
 800431a:	4b86      	ldr	r3, [pc, #536]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800431c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004326:	4293      	cmp	r3, r2
 8004328:	d223      	bcs.n	8004372 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fdca 	bl	8004ec8 <RCC_SetFlashLatencyFromMSIRange>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e3ce      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800433e:	4b7d      	ldr	r3, [pc, #500]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a7c      	ldr	r2, [pc, #496]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004344:	f043 0308 	orr.w	r3, r3, #8
 8004348:	6013      	str	r3, [r2, #0]
 800434a:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	4977      	ldr	r1, [pc, #476]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800435c:	4b75      	ldr	r3, [pc, #468]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	021b      	lsls	r3, r3, #8
 800436a:	4972      	ldr	r1, [pc, #456]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800436c:	4313      	orrs	r3, r2
 800436e:	604b      	str	r3, [r1, #4]
 8004370:	e025      	b.n	80043be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004372:	4b70      	ldr	r3, [pc, #448]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a6f      	ldr	r2, [pc, #444]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004378:	f043 0308 	orr.w	r3, r3, #8
 800437c:	6013      	str	r3, [r2, #0]
 800437e:	4b6d      	ldr	r3, [pc, #436]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	496a      	ldr	r1, [pc, #424]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800438c:	4313      	orrs	r3, r2
 800438e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004390:	4b68      	ldr	r3, [pc, #416]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	021b      	lsls	r3, r3, #8
 800439e:	4965      	ldr	r1, [pc, #404]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80043a0:	4313      	orrs	r3, r2
 80043a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fd8a 	bl	8004ec8 <RCC_SetFlashLatencyFromMSIRange>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e38e      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043be:	f000 fcbf 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b5b      	ldr	r3, [pc, #364]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	495a      	ldr	r1, [pc, #360]	; (8004538 <HAL_RCC_OscConfig+0x29c>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	f003 031f 	and.w	r3, r3, #31
 80043d6:	fa22 f303 	lsr.w	r3, r2, r3
 80043da:	4a58      	ldr	r2, [pc, #352]	; (800453c <HAL_RCC_OscConfig+0x2a0>)
 80043dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043de:	4b58      	ldr	r3, [pc, #352]	; (8004540 <HAL_RCC_OscConfig+0x2a4>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fe fcee 	bl	8002dc4 <HAL_InitTick>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d052      	beq.n	8004498 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	e372      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d032      	beq.n	8004464 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043fe:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a4c      	ldr	r2, [pc, #304]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800440a:	f7fe fd2b 	bl	8002e64 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004412:	f7fe fd27 	bl	8002e64 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e35b      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004430:	4b40      	ldr	r3, [pc, #256]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3f      	ldr	r2, [pc, #252]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004436:	f043 0308 	orr.w	r3, r3, #8
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	493a      	ldr	r1, [pc, #232]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800444a:	4313      	orrs	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444e:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69db      	ldr	r3, [r3, #28]
 800445a:	021b      	lsls	r3, r3, #8
 800445c:	4935      	ldr	r1, [pc, #212]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800445e:	4313      	orrs	r3, r2
 8004460:	604b      	str	r3, [r1, #4]
 8004462:	e01a      	b.n	800449a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004464:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a32      	ldr	r2, [pc, #200]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800446a:	f023 0301 	bic.w	r3, r3, #1
 800446e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004470:	f7fe fcf8 	bl	8002e64 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004478:	f7fe fcf4 	bl	8002e64 <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e328      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0302 	and.w	r3, r3, #2
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x1dc>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d073      	beq.n	800458e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_OscConfig+0x21c>
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b0c      	cmp	r3, #12
 80044b0:	d10e      	bne.n	80044d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b03      	cmp	r3, #3
 80044b6:	d10b      	bne.n	80044d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b8:	4b1e      	ldr	r3, [pc, #120]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d063      	beq.n	800458c <HAL_RCC_OscConfig+0x2f0>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d15f      	bne.n	800458c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	e305      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_OscConfig+0x24c>
 80044da:	4b16      	ldr	r3, [pc, #88]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a15      	ldr	r2, [pc, #84]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80044e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e4:	6013      	str	r3, [r2, #0]
 80044e6:	e01d      	b.n	8004524 <HAL_RCC_OscConfig+0x288>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044f0:	d10c      	bne.n	800450c <HAL_RCC_OscConfig+0x270>
 80044f2:	4b10      	ldr	r3, [pc, #64]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a0f      	ldr	r2, [pc, #60]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 80044f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a0c      	ldr	r2, [pc, #48]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004508:	6013      	str	r3, [r2, #0]
 800450a:	e00b      	b.n	8004524 <HAL_RCC_OscConfig+0x288>
 800450c:	4b09      	ldr	r3, [pc, #36]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a08      	ldr	r2, [pc, #32]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 8004512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004516:	6013      	str	r3, [r2, #0]
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a05      	ldr	r2, [pc, #20]	; (8004534 <HAL_RCC_OscConfig+0x298>)
 800451e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d01b      	beq.n	8004564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800452c:	f7fe fc9a 	bl	8002e64 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004532:	e010      	b.n	8004556 <HAL_RCC_OscConfig+0x2ba>
 8004534:	40021000 	.word	0x40021000
 8004538:	0800b7ac 	.word	0x0800b7ac
 800453c:	20000000 	.word	0x20000000
 8004540:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004544:	f7fe fc8e 	bl	8002e64 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b64      	cmp	r3, #100	; 0x64
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e2c2      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004556:	4baf      	ldr	r3, [pc, #700]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d0f0      	beq.n	8004544 <HAL_RCC_OscConfig+0x2a8>
 8004562:	e014      	b.n	800458e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004564:	f7fe fc7e 	bl	8002e64 <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800456a:	e008      	b.n	800457e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800456c:	f7fe fc7a 	bl	8002e64 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e2ae      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457e:	4ba5      	ldr	r3, [pc, #660]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCC_OscConfig+0x2d0>
 800458a:	e000      	b.n	800458e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800458c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d060      	beq.n	800465c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	2b04      	cmp	r3, #4
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x310>
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d119      	bne.n	80045da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d116      	bne.n	80045da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ac:	4b99      	ldr	r3, [pc, #612]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d005      	beq.n	80045c4 <HAL_RCC_OscConfig+0x328>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e28b      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c4:	4b93      	ldr	r3, [pc, #588]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	061b      	lsls	r3, r3, #24
 80045d2:	4990      	ldr	r1, [pc, #576]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d8:	e040      	b.n	800465c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d023      	beq.n	800462a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045e2:	4b8c      	ldr	r3, [pc, #560]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a8b      	ldr	r2, [pc, #556]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80045e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ee:	f7fe fc39 	bl	8002e64 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f6:	f7fe fc35 	bl	8002e64 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e269      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004608:	4b82      	ldr	r3, [pc, #520]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0f0      	beq.n	80045f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004614:	4b7f      	ldr	r3, [pc, #508]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	061b      	lsls	r3, r3, #24
 8004622:	497c      	ldr	r1, [pc, #496]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004624:	4313      	orrs	r3, r2
 8004626:	604b      	str	r3, [r1, #4]
 8004628:	e018      	b.n	800465c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800462a:	4b7a      	ldr	r3, [pc, #488]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a79      	ldr	r2, [pc, #484]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004636:	f7fe fc15 	bl	8002e64 <HAL_GetTick>
 800463a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800463c:	e008      	b.n	8004650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463e:	f7fe fc11 	bl	8002e64 <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b02      	cmp	r3, #2
 800464a:	d901      	bls.n	8004650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e245      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004650:	4b70      	ldr	r3, [pc, #448]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1f0      	bne.n	800463e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0308 	and.w	r3, r3, #8
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03c      	beq.n	80046e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01c      	beq.n	80046aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004670:	4b68      	ldr	r3, [pc, #416]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004676:	4a67      	ldr	r2, [pc, #412]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004680:	f7fe fbf0 	bl	8002e64 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004688:	f7fe fbec 	bl	8002e64 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e220      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800469a:	4b5e      	ldr	r3, [pc, #376]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800469c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d0ef      	beq.n	8004688 <HAL_RCC_OscConfig+0x3ec>
 80046a8:	e01b      	b.n	80046e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046aa:	4b5a      	ldr	r3, [pc, #360]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80046ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046b0:	4a58      	ldr	r2, [pc, #352]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80046b2:	f023 0301 	bic.w	r3, r3, #1
 80046b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ba:	f7fe fbd3 	bl	8002e64 <HAL_GetTick>
 80046be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046c0:	e008      	b.n	80046d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046c2:	f7fe fbcf 	bl	8002e64 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b02      	cmp	r3, #2
 80046ce:	d901      	bls.n	80046d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e203      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d4:	4b4f      	ldr	r3, [pc, #316]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80046d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1ef      	bne.n	80046c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0304 	and.w	r3, r3, #4
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f000 80a6 	beq.w	800483c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f0:	2300      	movs	r3, #0
 80046f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046f4:	4b47      	ldr	r3, [pc, #284]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10d      	bne.n	800471c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004700:	4b44      	ldr	r3, [pc, #272]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004704:	4a43      	ldr	r2, [pc, #268]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470a:	6593      	str	r3, [r2, #88]	; 0x58
 800470c:	4b41      	ldr	r3, [pc, #260]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800470e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004714:	60bb      	str	r3, [r7, #8]
 8004716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004718:	2301      	movs	r3, #1
 800471a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800471c:	4b3e      	ldr	r3, [pc, #248]	; (8004818 <HAL_RCC_OscConfig+0x57c>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004724:	2b00      	cmp	r3, #0
 8004726:	d118      	bne.n	800475a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004728:	4b3b      	ldr	r3, [pc, #236]	; (8004818 <HAL_RCC_OscConfig+0x57c>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a3a      	ldr	r2, [pc, #232]	; (8004818 <HAL_RCC_OscConfig+0x57c>)
 800472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004734:	f7fe fb96 	bl	8002e64 <HAL_GetTick>
 8004738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800473a:	e008      	b.n	800474e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fe fb92 	bl	8002e64 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d901      	bls.n	800474e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e1c6      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474e:	4b32      	ldr	r3, [pc, #200]	; (8004818 <HAL_RCC_OscConfig+0x57c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0f0      	beq.n	800473c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d108      	bne.n	8004774 <HAL_RCC_OscConfig+0x4d8>
 8004762:	4b2c      	ldr	r3, [pc, #176]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004768:	4a2a      	ldr	r2, [pc, #168]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800476a:	f043 0301 	orr.w	r3, r3, #1
 800476e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004772:	e024      	b.n	80047be <HAL_RCC_OscConfig+0x522>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b05      	cmp	r3, #5
 800477a:	d110      	bne.n	800479e <HAL_RCC_OscConfig+0x502>
 800477c:	4b25      	ldr	r3, [pc, #148]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800477e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004782:	4a24      	ldr	r2, [pc, #144]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004784:	f043 0304 	orr.w	r3, r3, #4
 8004788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800478c:	4b21      	ldr	r3, [pc, #132]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	4a20      	ldr	r2, [pc, #128]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800479c:	e00f      	b.n	80047be <HAL_RCC_OscConfig+0x522>
 800479e:	4b1d      	ldr	r3, [pc, #116]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	4a1b      	ldr	r2, [pc, #108]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80047a6:	f023 0301 	bic.w	r3, r3, #1
 80047aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047ae:	4b19      	ldr	r3, [pc, #100]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	4a17      	ldr	r2, [pc, #92]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80047b6:	f023 0304 	bic.w	r3, r3, #4
 80047ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d016      	beq.n	80047f4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047c6:	f7fe fb4d 	bl	8002e64 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047cc:	e00a      	b.n	80047e4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ce:	f7fe fb49 	bl	8002e64 <HAL_GetTick>
 80047d2:	4602      	mov	r2, r0
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1ad3      	subs	r3, r2, r3
 80047d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047dc:	4293      	cmp	r3, r2
 80047de:	d901      	bls.n	80047e4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e17b      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e4:	4b0b      	ldr	r3, [pc, #44]	; (8004814 <HAL_RCC_OscConfig+0x578>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d0ed      	beq.n	80047ce <HAL_RCC_OscConfig+0x532>
 80047f2:	e01a      	b.n	800482a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f4:	f7fe fb36 	bl	8002e64 <HAL_GetTick>
 80047f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047fa:	e00f      	b.n	800481c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fc:	f7fe fb32 	bl	8002e64 <HAL_GetTick>
 8004800:	4602      	mov	r2, r0
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	f241 3288 	movw	r2, #5000	; 0x1388
 800480a:	4293      	cmp	r3, r2
 800480c:	d906      	bls.n	800481c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e164      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
 8004812:	bf00      	nop
 8004814:	40021000 	.word	0x40021000
 8004818:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800481c:	4ba8      	ldr	r3, [pc, #672]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1e8      	bne.n	80047fc <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800482a:	7ffb      	ldrb	r3, [r7, #31]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d105      	bne.n	800483c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004830:	4ba3      	ldr	r3, [pc, #652]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004834:	4aa2      	ldr	r2, [pc, #648]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800483a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d03c      	beq.n	80048c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d01c      	beq.n	800488a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004850:	4b9b      	ldr	r3, [pc, #620]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004856:	4a9a      	ldr	r2, [pc, #616]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004860:	f7fe fb00 	bl	8002e64 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004868:	f7fe fafc 	bl	8002e64 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e130      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800487a:	4b91      	ldr	r3, [pc, #580]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800487c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004880:	f003 0302 	and.w	r3, r3, #2
 8004884:	2b00      	cmp	r3, #0
 8004886:	d0ef      	beq.n	8004868 <HAL_RCC_OscConfig+0x5cc>
 8004888:	e01b      	b.n	80048c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800488a:	4b8d      	ldr	r3, [pc, #564]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800488c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004890:	4a8b      	ldr	r2, [pc, #556]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004892:	f023 0301 	bic.w	r3, r3, #1
 8004896:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489a:	f7fe fae3 	bl	8002e64 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80048a2:	f7fe fadf 	bl	8002e64 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e113      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b4:	4b82      	ldr	r3, [pc, #520]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80048b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ef      	bne.n	80048a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 8107 	beq.w	8004ada <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	f040 80cb 	bne.w	8004a6c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048d6:	4b7a      	ldr	r3, [pc, #488]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 0203 	and.w	r2, r3, #3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d12c      	bne.n	8004944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	3b01      	subs	r3, #1
 80048f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d123      	bne.n	8004944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004908:	429a      	cmp	r2, r3
 800490a:	d11b      	bne.n	8004944 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004918:	429a      	cmp	r2, r3
 800491a:	d113      	bne.n	8004944 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d109      	bne.n	8004944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	3b01      	subs	r3, #1
 800493e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004940:	429a      	cmp	r2, r3
 8004942:	d06d      	beq.n	8004a20 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	2b0c      	cmp	r3, #12
 8004948:	d068      	beq.n	8004a1c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800494a:	4b5d      	ldr	r3, [pc, #372]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d105      	bne.n	8004962 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004956:	4b5a      	ldr	r3, [pc, #360]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e0ba      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004966:	4b56      	ldr	r3, [pc, #344]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a55      	ldr	r2, [pc, #340]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800496c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004970:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004972:	f7fe fa77 	bl	8002e64 <HAL_GetTick>
 8004976:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800497a:	f7fe fa73 	bl	8002e64 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e0a7      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800498c:	4b4c      	ldr	r3, [pc, #304]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f0      	bne.n	800497a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004998:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 800499a:	68da      	ldr	r2, [r3, #12]
 800499c:	4b49      	ldr	r3, [pc, #292]	; (8004ac4 <HAL_RCC_OscConfig+0x828>)
 800499e:	4013      	ands	r3, r2
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049a8:	3a01      	subs	r2, #1
 80049aa:	0112      	lsls	r2, r2, #4
 80049ac:	4311      	orrs	r1, r2
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049b2:	0212      	lsls	r2, r2, #8
 80049b4:	4311      	orrs	r1, r2
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049ba:	0852      	lsrs	r2, r2, #1
 80049bc:	3a01      	subs	r2, #1
 80049be:	0552      	lsls	r2, r2, #21
 80049c0:	4311      	orrs	r1, r2
 80049c2:	687a      	ldr	r2, [r7, #4]
 80049c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049c6:	0852      	lsrs	r2, r2, #1
 80049c8:	3a01      	subs	r2, #1
 80049ca:	0652      	lsls	r2, r2, #25
 80049cc:	4311      	orrs	r1, r2
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049d2:	06d2      	lsls	r2, r2, #27
 80049d4:	430a      	orrs	r2, r1
 80049d6:	493a      	ldr	r1, [pc, #232]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049dc:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a37      	ldr	r2, [pc, #220]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80049e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e8:	4b35      	ldr	r3, [pc, #212]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a34      	ldr	r2, [pc, #208]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 80049ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f4:	f7fe fa36 	bl	8002e64 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fc:	f7fe fa32 	bl	8002e64 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e066      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a1a:	e05e      	b.n	8004ada <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e05d      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a20:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d156      	bne.n	8004ada <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a2c:	4b24      	ldr	r3, [pc, #144]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a23      	ldr	r2, [pc, #140]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a38:	4b21      	ldr	r3, [pc, #132]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a20      	ldr	r2, [pc, #128]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a44:	f7fe fa0e 	bl	8002e64 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a4c:	f7fe fa0a 	bl	8002e64 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e03e      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a5e:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d0f0      	beq.n	8004a4c <HAL_RCC_OscConfig+0x7b0>
 8004a6a:	e036      	b.n	8004ada <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d031      	beq.n	8004ad6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a72:	4b13      	ldr	r3, [pc, #76]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a12      	ldr	r2, [pc, #72]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a78:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a7c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a7e:	4b10      	ldr	r3, [pc, #64]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d105      	bne.n	8004a96 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a90:	f023 0303 	bic.w	r3, r3, #3
 8004a94:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	4a09      	ldr	r2, [pc, #36]	; (8004ac0 <HAL_RCC_OscConfig+0x824>)
 8004a9c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa6:	f7fe f9dd 	bl	8002e64 <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004aac:	e00c      	b.n	8004ac8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aae:	f7fe f9d9 	bl	8002e64 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b02      	cmp	r3, #2
 8004aba:	d905      	bls.n	8004ac8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004abc:	2303      	movs	r3, #3
 8004abe:	e00d      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <HAL_RCC_OscConfig+0x848>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1ec      	bne.n	8004aae <HAL_RCC_OscConfig+0x812>
 8004ad4:	e001      	b.n	8004ada <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e000      	b.n	8004adc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3720      	adds	r7, #32
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004af2:	2300      	movs	r3, #0
 8004af4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d101      	bne.n	8004b00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e10f      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b00:	4b89      	ldr	r3, [pc, #548]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 030f 	and.w	r3, r3, #15
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d910      	bls.n	8004b30 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b86      	ldr	r3, [pc, #536]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 020f 	bic.w	r2, r3, #15
 8004b16:	4984      	ldr	r1, [pc, #528]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b82      	ldr	r3, [pc, #520]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e0f7      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8089 	beq.w	8004c50 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b03      	cmp	r3, #3
 8004b44:	d133      	bne.n	8004bae <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b46:	4b79      	ldr	r3, [pc, #484]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e0e4      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004b56:	f000 fa11 	bl	8004f7c <RCC_GetSysClockFreqFromPLLSource>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	4a74      	ldr	r2, [pc, #464]	; (8004d30 <HAL_RCC_ClockConfig+0x248>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d955      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b62:	4b72      	ldr	r3, [pc, #456]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d10a      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b6e:	4b6f      	ldr	r3, [pc, #444]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b76:	4a6d      	ldr	r2, [pc, #436]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b7e:	2380      	movs	r3, #128	; 0x80
 8004b80:	617b      	str	r3, [r7, #20]
 8004b82:	e044      	b.n	8004c0e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03e      	beq.n	8004c0e <HAL_RCC_ClockConfig+0x126>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d13a      	bne.n	8004c0e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b98:	4b64      	ldr	r3, [pc, #400]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ba0:	4a62      	ldr	r2, [pc, #392]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ba8:	2380      	movs	r3, #128	; 0x80
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	e02f      	b.n	8004c0e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d107      	bne.n	8004bc6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb6:	4b5d      	ldr	r3, [pc, #372]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d115      	bne.n	8004bee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e0ac      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d107      	bne.n	8004bde <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bce:	4b57      	ldr	r3, [pc, #348]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d109      	bne.n	8004bee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e0a0      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bde:	4b53      	ldr	r3, [pc, #332]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e098      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004bee:	f000 f8a7 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	4a4e      	ldr	r2, [pc, #312]	; (8004d30 <HAL_RCC_ClockConfig+0x248>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d909      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bfa:	4b4c      	ldr	r3, [pc, #304]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c02:	4a4a      	ldr	r2, [pc, #296]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c0a:	2380      	movs	r3, #128	; 0x80
 8004c0c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c0e:	4b47      	ldr	r3, [pc, #284]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f023 0203 	bic.w	r2, r3, #3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4944      	ldr	r1, [pc, #272]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c20:	f7fe f920 	bl	8002e64 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c28:	f7fe f91c 	bl	8002e64 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e070      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3e:	4b3b      	ldr	r3, [pc, #236]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 020c 	and.w	r2, r3, #12
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	009b      	lsls	r3, r3, #2
 8004c4c:	429a      	cmp	r2, r3
 8004c4e:	d1eb      	bne.n	8004c28 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0302 	and.w	r3, r3, #2
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d009      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c5c:	4b33      	ldr	r3, [pc, #204]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4930      	ldr	r1, [pc, #192]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	608b      	str	r3, [r1, #8]
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b80      	cmp	r3, #128	; 0x80
 8004c74:	d105      	bne.n	8004c82 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c76:	4b2d      	ldr	r3, [pc, #180]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004c7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c80:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c82:	4b29      	ldr	r3, [pc, #164]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d210      	bcs.n	8004cb2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c90:	4b25      	ldr	r3, [pc, #148]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f023 020f 	bic.w	r2, r3, #15
 8004c98:	4923      	ldr	r1, [pc, #140]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ca0:	4b21      	ldr	r3, [pc, #132]	; (8004d28 <HAL_RCC_ClockConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 030f 	and.w	r3, r3, #15
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d001      	beq.n	8004cb2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e036      	b.n	8004d20 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d008      	beq.n	8004cd0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cbe:	4b1b      	ldr	r3, [pc, #108]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	4918      	ldr	r1, [pc, #96]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0308 	and.w	r3, r3, #8
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d009      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cdc:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	00db      	lsls	r3, r3, #3
 8004cea:	4910      	ldr	r1, [pc, #64]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cf0:	f000 f826 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	4b0d      	ldr	r3, [pc, #52]	; (8004d2c <HAL_RCC_ClockConfig+0x244>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	490c      	ldr	r1, [pc, #48]	; (8004d34 <HAL_RCC_ClockConfig+0x24c>)
 8004d02:	5ccb      	ldrb	r3, [r1, r3]
 8004d04:	f003 031f 	and.w	r3, r3, #31
 8004d08:	fa22 f303 	lsr.w	r3, r2, r3
 8004d0c:	4a0a      	ldr	r2, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x250>)
 8004d0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d10:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <HAL_RCC_ClockConfig+0x254>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe f855 	bl	8002dc4 <HAL_InitTick>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	40022000 	.word	0x40022000
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	04c4b400 	.word	0x04c4b400
 8004d34:	0800b7ac 	.word	0x0800b7ac
 8004d38:	20000000 	.word	0x20000000
 8004d3c:	20000004 	.word	0x20000004

08004d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b089      	sub	sp, #36	; 0x24
 8004d44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	4b3e      	ldr	r3, [pc, #248]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
 8004d56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d58:	4b3b      	ldr	r3, [pc, #236]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x34>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b0c      	cmp	r3, #12
 8004d6c:	d121      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d11e      	bne.n	8004db2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d74:	4b34      	ldr	r3, [pc, #208]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0308 	and.w	r3, r3, #8
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d107      	bne.n	8004d90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d80:	4b31      	ldr	r3, [pc, #196]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d86:	0a1b      	lsrs	r3, r3, #8
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	61fb      	str	r3, [r7, #28]
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d90:	4b2d      	ldr	r3, [pc, #180]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f003 030f 	and.w	r3, r3, #15
 8004d9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d9c:	4a2b      	ldr	r2, [pc, #172]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d10d      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004db0:	e00a      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d102      	bne.n	8004dbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	e004      	b.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc4:	4b23      	ldr	r3, [pc, #140]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d134      	bne.n	8004e38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d003      	beq.n	8004dec <HAL_RCC_GetSysClockFreq+0xac>
 8004de4:	e005      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004de6:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <HAL_RCC_GetSysClockFreq+0x110>)
 8004de8:	617b      	str	r3, [r7, #20]
      break;
 8004dea:	e005      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004dec:	4b19      	ldr	r3, [pc, #100]	; (8004e54 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dee:	617b      	str	r3, [r7, #20]
      break;
 8004df0:	e002      	b.n	8004df8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	617b      	str	r3, [r7, #20]
      break;
 8004df6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df8:	4b13      	ldr	r3, [pc, #76]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	091b      	lsrs	r3, r3, #4
 8004dfe:	f003 030f 	and.w	r3, r3, #15
 8004e02:	3301      	adds	r3, #1
 8004e04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	fb02 f203 	mul.w	r2, r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e1e:	4b0a      	ldr	r3, [pc, #40]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e20:	68db      	ldr	r3, [r3, #12]
 8004e22:	0e5b      	lsrs	r3, r3, #25
 8004e24:	f003 0303 	and.w	r3, r3, #3
 8004e28:	3301      	adds	r3, #1
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e38:	69bb      	ldr	r3, [r7, #24]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3724      	adds	r7, #36	; 0x24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	0800b7c4 	.word	0x0800b7c4
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	007a1200 	.word	0x007a1200

08004e58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e58:	b480      	push	{r7}
 8004e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e5c:	4b03      	ldr	r3, [pc, #12]	; (8004e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000000 	.word	0x20000000

08004e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e74:	f7ff fff0 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	4904      	ldr	r1, [pc, #16]	; (8004e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e86:	5ccb      	ldrb	r3, [r1, r3]
 8004e88:	f003 031f 	and.w	r3, r3, #31
 8004e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40021000 	.word	0x40021000
 8004e98:	0800b7bc 	.word	0x0800b7bc

08004e9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ea0:	f7ff ffda 	bl	8004e58 <HAL_RCC_GetHCLKFreq>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	4b06      	ldr	r3, [pc, #24]	; (8004ec0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	0adb      	lsrs	r3, r3, #11
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	4904      	ldr	r1, [pc, #16]	; (8004ec4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eb2:	5ccb      	ldrb	r3, [r1, r3]
 8004eb4:	f003 031f 	and.w	r3, r3, #31
 8004eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	0800b7bc 	.word	0x0800b7bc

08004ec8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d003      	beq.n	8004ee8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ee0:	f7ff f908 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004ee4:	6178      	str	r0, [r7, #20]
 8004ee6:	e014      	b.n	8004f12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ee8:	4b22      	ldr	r3, [pc, #136]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eec:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8004ef4:	4b1f      	ldr	r3, [pc, #124]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004efc:	60fb      	str	r3, [r7, #12]
 8004efe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f00:	f7ff f8f8 	bl	80040f4 <HAL_PWREx_GetVoltageRange>
 8004f04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f06:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0a:	4a1a      	ldr	r2, [pc, #104]	; (8004f74 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f18:	d10b      	bne.n	8004f32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b80      	cmp	r3, #128	; 0x80
 8004f1e:	d913      	bls.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2ba0      	cmp	r3, #160	; 0xa0
 8004f24:	d902      	bls.n	8004f2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f26:	2302      	movs	r3, #2
 8004f28:	613b      	str	r3, [r7, #16]
 8004f2a:	e00d      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e00a      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b7f      	cmp	r3, #127	; 0x7f
 8004f36:	d902      	bls.n	8004f3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004f38:	2302      	movs	r3, #2
 8004f3a:	613b      	str	r3, [r7, #16]
 8004f3c:	e004      	b.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b70      	cmp	r3, #112	; 0x70
 8004f42:	d101      	bne.n	8004f48 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f44:	2301      	movs	r3, #1
 8004f46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 020f 	bic.w	r2, r3, #15
 8004f50:	4909      	ldr	r1, [pc, #36]	; (8004f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d001      	beq.n	8004f6a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e000      	b.n	8004f6c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004f6a:	2300      	movs	r3, #0
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000
 8004f78:	40022000 	.word	0x40022000

08004f7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b087      	sub	sp, #28
 8004f80:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004f86:	4b2d      	ldr	r3, [pc, #180]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d118      	bne.n	8004fc4 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f92:	4b2a      	ldr	r3, [pc, #168]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d107      	bne.n	8004fae <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f9e:	4b27      	ldr	r3, [pc, #156]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fa4:	0a1b      	lsrs	r3, r3, #8
 8004fa6:	f003 030f 	and.w	r3, r3, #15
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e005      	b.n	8004fba <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fae:	4b23      	ldr	r3, [pc, #140]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	091b      	lsrs	r3, r3, #4
 8004fb4:	f003 030f 	and.w	r3, r3, #15
 8004fb8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc2:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fc4:	4b1d      	ldr	r3, [pc, #116]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d003      	beq.n	8004fdc <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b03      	cmp	r3, #3
 8004fd8:	d003      	beq.n	8004fe2 <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004fda:	e005      	b.n	8004fe8 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004fdc:	4b19      	ldr	r3, [pc, #100]	; (8005044 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004fde:	613b      	str	r3, [r7, #16]
    break;
 8004fe0:	e005      	b.n	8004fee <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004fe2:	4b19      	ldr	r3, [pc, #100]	; (8005048 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004fe4:	613b      	str	r3, [r7, #16]
    break;
 8004fe6:	e002      	b.n	8004fee <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	613b      	str	r3, [r7, #16]
    break;
 8004fec:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	091b      	lsrs	r3, r3, #4
 8004ff4:	f003 030f 	and.w	r3, r3, #15
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	0a1b      	lsrs	r3, r3, #8
 8005002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005006:	693a      	ldr	r2, [r7, #16]
 8005008:	fb02 f203 	mul.w	r2, r2, r3
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005014:	4b09      	ldr	r3, [pc, #36]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	0e5b      	lsrs	r3, r3, #25
 800501a:	f003 0303 	and.w	r3, r3, #3
 800501e:	3301      	adds	r3, #1
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800502e:	683b      	ldr	r3, [r7, #0]
}
 8005030:	4618      	mov	r0, r3
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	40021000 	.word	0x40021000
 8005040:	0800b7c4 	.word	0x0800b7c4
 8005044:	00f42400 	.word	0x00f42400
 8005048:	007a1200 	.word	0x007a1200

0800504c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005054:	2300      	movs	r3, #0
 8005056:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005058:	2300      	movs	r3, #0
 800505a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005064:	2b00      	cmp	r3, #0
 8005066:	d040      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800506c:	2b80      	cmp	r3, #128	; 0x80
 800506e:	d02a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005070:	2b80      	cmp	r3, #128	; 0x80
 8005072:	d825      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005074:	2b60      	cmp	r3, #96	; 0x60
 8005076:	d026      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005078:	2b60      	cmp	r3, #96	; 0x60
 800507a:	d821      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800507c:	2b40      	cmp	r3, #64	; 0x40
 800507e:	d006      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005080:	2b40      	cmp	r3, #64	; 0x40
 8005082:	d81d      	bhi.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d009      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d010      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x62>
 800508c:	e018      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800508e:	4b89      	ldr	r3, [pc, #548]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	4a88      	ldr	r2, [pc, #544]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005098:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800509a:	e015      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 fb02 	bl	80056ac <RCCEx_PLLSAI1_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050ac:	e00c      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3320      	adds	r3, #32
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 fbed 	bl	8005894 <RCCEx_PLLSAI2_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050be:	e003      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	74fb      	strb	r3, [r7, #19]
      break;
 80050c4:	e000      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80050c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050c8:	7cfb      	ldrb	r3, [r7, #19]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10b      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050ce:	4b79      	ldr	r3, [pc, #484]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050d4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050dc:	4975      	ldr	r1, [pc, #468]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050e4:	e001      	b.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d047      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050fe:	d030      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005104:	d82a      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005106:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800510a:	d02a      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800510c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005110:	d824      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005112:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800511c:	d81e      	bhi.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x110>
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	d010      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005128:	e018      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800512a:	4b62      	ldr	r3, [pc, #392]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	4a61      	ldr	r2, [pc, #388]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005134:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005136:	e015      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	3304      	adds	r3, #4
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fab4 	bl	80056ac <RCCEx_PLLSAI1_Config>
 8005144:	4603      	mov	r3, r0
 8005146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005148:	e00c      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3320      	adds	r3, #32
 800514e:	2100      	movs	r1, #0
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fb9f 	bl	8005894 <RCCEx_PLLSAI2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800515a:	e003      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	74fb      	strb	r3, [r7, #19]
      break;
 8005160:	e000      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10b      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800516a:	4b52      	ldr	r3, [pc, #328]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005170:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	494e      	ldr	r1, [pc, #312]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800517a:	4313      	orrs	r3, r2
 800517c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005180:	e001      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005182:	7cfb      	ldrb	r3, [r7, #19]
 8005184:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 809f 	beq.w	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005194:	2300      	movs	r3, #0
 8005196:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005198:	4b46      	ldr	r3, [pc, #280]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800519a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800519c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d101      	bne.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80051a4:	2301      	movs	r3, #1
 80051a6:	e000      	b.n	80051aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80051a8:	2300      	movs	r3, #0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00d      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ae:	4b41      	ldr	r3, [pc, #260]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	4a40      	ldr	r2, [pc, #256]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b8:	6593      	str	r3, [r2, #88]	; 0x58
 80051ba:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c2:	60bb      	str	r3, [r7, #8]
 80051c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051c6:	2301      	movs	r3, #1
 80051c8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ca:	4b3b      	ldr	r3, [pc, #236]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a3a      	ldr	r2, [pc, #232]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051d6:	f7fd fe45 	bl	8002e64 <HAL_GetTick>
 80051da:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051dc:	e009      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051de:	f7fd fe41 	bl	8002e64 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d902      	bls.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	74fb      	strb	r3, [r7, #19]
        break;
 80051f0:	e005      	b.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051f2:	4b31      	ldr	r3, [pc, #196]	; (80052b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ef      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80051fe:	7cfb      	ldrb	r3, [r7, #19]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d15b      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005204:	4b2b      	ldr	r3, [pc, #172]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800520e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d01f      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	429a      	cmp	r2, r3
 8005220:	d019      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005222:	4b24      	ldr	r3, [pc, #144]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800522e:	4b21      	ldr	r3, [pc, #132]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005234:	4a1f      	ldr	r2, [pc, #124]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005236:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800523e:	4b1d      	ldr	r3, [pc, #116]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005244:	4a1b      	ldr	r2, [pc, #108]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800524e:	4a19      	ldr	r2, [pc, #100]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d016      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd fe00 	bl	8002e64 <HAL_GetTick>
 8005264:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005266:	e00b      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005268:	f7fd fdfc 	bl	8002e64 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	f241 3288 	movw	r2, #5000	; 0x1388
 8005276:	4293      	cmp	r3, r2
 8005278:	d902      	bls.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	74fb      	strb	r3, [r7, #19]
            break;
 800527e:	e006      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ec      	beq.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800528e:	7cfb      	ldrb	r3, [r7, #19]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10c      	bne.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005294:	4b07      	ldr	r3, [pc, #28]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a4:	4903      	ldr	r1, [pc, #12]	; (80052b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80052a6:	4313      	orrs	r3, r2
 80052a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052ac:	e008      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052ae:	7cfb      	ldrb	r3, [r7, #19]
 80052b0:	74bb      	strb	r3, [r7, #18]
 80052b2:	e005      	b.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052bc:	7cfb      	ldrb	r3, [r7, #19]
 80052be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c0:	7c7b      	ldrb	r3, [r7, #17]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d105      	bne.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052c6:	4ba0      	ldr	r3, [pc, #640]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052ca:	4a9f      	ldr	r2, [pc, #636]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052de:	4b9a      	ldr	r3, [pc, #616]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e4:	f023 0203 	bic.w	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ec:	4996      	ldr	r1, [pc, #600]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005300:	4b91      	ldr	r3, [pc, #580]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	f023 020c 	bic.w	r2, r3, #12
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530e:	498e      	ldr	r1, [pc, #568]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005322:	4b89      	ldr	r3, [pc, #548]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005328:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005330:	4985      	ldr	r1, [pc, #532]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005332:	4313      	orrs	r3, r2
 8005334:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005344:	4b80      	ldr	r3, [pc, #512]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800534a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005352:	497d      	ldr	r1, [pc, #500]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005354:	4313      	orrs	r3, r2
 8005356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0310 	and.w	r3, r3, #16
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005366:	4b78      	ldr	r3, [pc, #480]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005374:	4974      	ldr	r1, [pc, #464]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005388:	4b6f      	ldr	r3, [pc, #444]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005396:	496c      	ldr	r1, [pc, #432]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053aa:	4b67      	ldr	r3, [pc, #412]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053b8:	4963      	ldr	r1, [pc, #396]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d00a      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053cc:	4b5e      	ldr	r3, [pc, #376]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053da:	495b      	ldr	r1, [pc, #364]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ee:	4b56      	ldr	r3, [pc, #344]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	4952      	ldr	r1, [pc, #328]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005410:	4b4d      	ldr	r3, [pc, #308]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	494a      	ldr	r1, [pc, #296]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00a      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005432:	4b45      	ldr	r3, [pc, #276]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005440:	4941      	ldr	r1, [pc, #260]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005442:	4313      	orrs	r3, r2
 8005444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005454:	4b3c      	ldr	r3, [pc, #240]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545a:	f023 0203 	bic.w	r2, r3, #3
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	4939      	ldr	r1, [pc, #228]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d028      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005476:	4b34      	ldr	r3, [pc, #208]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005484:	4930      	ldr	r1, [pc, #192]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005486:	4313      	orrs	r3, r2
 8005488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005494:	d106      	bne.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005496:	4b2c      	ldr	r3, [pc, #176]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	4a2b      	ldr	r2, [pc, #172]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a0:	60d3      	str	r3, [r2, #12]
 80054a2:	e011      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054ac:	d10c      	bne.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	3304      	adds	r3, #4
 80054b2:	2101      	movs	r1, #1
 80054b4:	4618      	mov	r0, r3
 80054b6:	f000 f8f9 	bl	80056ac <RCCEx_PLLSAI1_Config>
 80054ba:	4603      	mov	r3, r0
 80054bc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054be:	7cfb      	ldrb	r3, [r7, #19]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d001      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80054c4:	7cfb      	ldrb	r3, [r7, #19]
 80054c6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d04d      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054dc:	d108      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054de:	4b1a      	ldr	r3, [pc, #104]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e4:	4a18      	ldr	r2, [pc, #96]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054ee:	e012      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80054f0:	4b15      	ldr	r3, [pc, #84]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054f6:	4a14      	ldr	r2, [pc, #80]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005500:	4b11      	ldr	r3, [pc, #68]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005506:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550e:	490e      	ldr	r1, [pc, #56]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005510:	4313      	orrs	r3, r2
 8005512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800551e:	d106      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005520:	4b09      	ldr	r3, [pc, #36]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	4a08      	ldr	r2, [pc, #32]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800552a:	60d3      	str	r3, [r2, #12]
 800552c:	e020      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005532:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005536:	d109      	bne.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005538:	4b03      	ldr	r3, [pc, #12]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	4a02      	ldr	r2, [pc, #8]	; (8005548 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800553e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005542:	60d3      	str	r3, [r2, #12]
 8005544:	e014      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005546:	bf00      	nop
 8005548:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005550:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005554:	d10c      	bne.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	3304      	adds	r3, #4
 800555a:	2101      	movs	r1, #1
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f8a5 	bl	80056ac <RCCEx_PLLSAI1_Config>
 8005562:	4603      	mov	r3, r0
 8005564:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005566:	7cfb      	ldrb	r3, [r7, #19]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800556c:	7cfb      	ldrb	r3, [r7, #19]
 800556e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d028      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800557c:	4b4a      	ldr	r3, [pc, #296]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005582:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558a:	4947      	ldr	r1, [pc, #284]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558c:	4313      	orrs	r3, r2
 800558e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800559a:	d106      	bne.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a41      	ldr	r2, [pc, #260]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055a6:	60d3      	str	r3, [r2, #12]
 80055a8:	e011      	b.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b2:	d10c      	bne.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	3304      	adds	r3, #4
 80055b8:	2101      	movs	r1, #1
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f876 	bl	80056ac <RCCEx_PLLSAI1_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80055ca:	7cfb      	ldrb	r3, [r7, #19]
 80055cc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d01e      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055da:	4b33      	ldr	r3, [pc, #204]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ea:	492f      	ldr	r1, [pc, #188]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055fc:	d10c      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3304      	adds	r3, #4
 8005602:	2102      	movs	r1, #2
 8005604:	4618      	mov	r0, r3
 8005606:	f000 f851 	bl	80056ac <RCCEx_PLLSAI1_Config>
 800560a:	4603      	mov	r3, r0
 800560c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800560e:	7cfb      	ldrb	r3, [r7, #19]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d001      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005614:	7cfb      	ldrb	r3, [r7, #19]
 8005616:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005624:	4b20      	ldr	r3, [pc, #128]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005626:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562a:	f023 0204 	bic.w	r2, r3, #4
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005634:	491c      	ldr	r1, [pc, #112]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00b      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005648:	4b17      	ldr	r3, [pc, #92]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800564e:	f023 0218 	bic.w	r2, r3, #24
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005658:	4913      	ldr	r1, [pc, #76]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d017      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800566c:	4b0e      	ldr	r3, [pc, #56]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800566e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800567c:	490a      	ldr	r1, [pc, #40]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800568a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800568e:	d105      	bne.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005690:	4b05      	ldr	r3, [pc, #20]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4a04      	ldr	r2, [pc, #16]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800569a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800569c:	7cbb      	ldrb	r3, [r7, #18]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40021000 	.word	0x40021000

080056ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056ba:	4b72      	ldr	r3, [pc, #456]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00e      	beq.n	80056e4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80056c6:	4b6f      	ldr	r3, [pc, #444]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f003 0203 	and.w	r2, r3, #3
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d103      	bne.n	80056de <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
       ||
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d142      	bne.n	8005764 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
 80056e2:	e03f      	b.n	8005764 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d018      	beq.n	800571e <RCCEx_PLLSAI1_Config+0x72>
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d825      	bhi.n	800573c <RCCEx_PLLSAI1_Config+0x90>
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d002      	beq.n	80056fa <RCCEx_PLLSAI1_Config+0x4e>
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d009      	beq.n	800570c <RCCEx_PLLSAI1_Config+0x60>
 80056f8:	e020      	b.n	800573c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056fa:	4b62      	ldr	r3, [pc, #392]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d11d      	bne.n	8005742 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800570a:	e01a      	b.n	8005742 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800570c:	4b5d      	ldr	r3, [pc, #372]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005714:	2b00      	cmp	r3, #0
 8005716:	d116      	bne.n	8005746 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800571c:	e013      	b.n	8005746 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800571e:	4b59      	ldr	r3, [pc, #356]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d10f      	bne.n	800574a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800572a:	4b56      	ldr	r3, [pc, #344]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800573a:	e006      	b.n	800574a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800573c:	2301      	movs	r3, #1
 800573e:	73fb      	strb	r3, [r7, #15]
      break;
 8005740:	e004      	b.n	800574c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005742:	bf00      	nop
 8005744:	e002      	b.n	800574c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005746:	bf00      	nop
 8005748:	e000      	b.n	800574c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800574a:	bf00      	nop
    }

    if(status == HAL_OK)
 800574c:	7bfb      	ldrb	r3, [r7, #15]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d108      	bne.n	8005764 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f023 0203 	bic.w	r2, r3, #3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4949      	ldr	r1, [pc, #292]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005760:	4313      	orrs	r3, r2
 8005762:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005764:	7bfb      	ldrb	r3, [r7, #15]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f040 8086 	bne.w	8005878 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800576c:	4b45      	ldr	r3, [pc, #276]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a44      	ldr	r2, [pc, #272]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005776:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005778:	f7fd fb74 	bl	8002e64 <HAL_GetTick>
 800577c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800577e:	e009      	b.n	8005794 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005780:	f7fd fb70 	bl	8002e64 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d902      	bls.n	8005794 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	73fb      	strb	r3, [r7, #15]
        break;
 8005792:	e005      	b.n	80057a0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005794:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1ef      	bne.n	8005780 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d168      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d113      	bne.n	80057d4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057ac:	4b35      	ldr	r3, [pc, #212]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ae:	691a      	ldr	r2, [r3, #16]
 80057b0:	4b35      	ldr	r3, [pc, #212]	; (8005888 <RCCEx_PLLSAI1_Config+0x1dc>)
 80057b2:	4013      	ands	r3, r2
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6892      	ldr	r2, [r2, #8]
 80057b8:	0211      	lsls	r1, r2, #8
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	68d2      	ldr	r2, [r2, #12]
 80057be:	06d2      	lsls	r2, r2, #27
 80057c0:	4311      	orrs	r1, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6852      	ldr	r2, [r2, #4]
 80057c6:	3a01      	subs	r2, #1
 80057c8:	0112      	lsls	r2, r2, #4
 80057ca:	430a      	orrs	r2, r1
 80057cc:	492d      	ldr	r1, [pc, #180]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	610b      	str	r3, [r1, #16]
 80057d2:	e02d      	b.n	8005830 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	2b01      	cmp	r3, #1
 80057d8:	d115      	bne.n	8005806 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80057da:	4b2a      	ldr	r3, [pc, #168]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057dc:	691a      	ldr	r2, [r3, #16]
 80057de:	4b2b      	ldr	r3, [pc, #172]	; (800588c <RCCEx_PLLSAI1_Config+0x1e0>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	6892      	ldr	r2, [r2, #8]
 80057e6:	0211      	lsls	r1, r2, #8
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6912      	ldr	r2, [r2, #16]
 80057ec:	0852      	lsrs	r2, r2, #1
 80057ee:	3a01      	subs	r2, #1
 80057f0:	0552      	lsls	r2, r2, #21
 80057f2:	4311      	orrs	r1, r2
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	3a01      	subs	r2, #1
 80057fa:	0112      	lsls	r2, r2, #4
 80057fc:	430a      	orrs	r2, r1
 80057fe:	4921      	ldr	r1, [pc, #132]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005800:	4313      	orrs	r3, r2
 8005802:	610b      	str	r3, [r1, #16]
 8005804:	e014      	b.n	8005830 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005806:	4b1f      	ldr	r3, [pc, #124]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	4b21      	ldr	r3, [pc, #132]	; (8005890 <RCCEx_PLLSAI1_Config+0x1e4>)
 800580c:	4013      	ands	r3, r2
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	6892      	ldr	r2, [r2, #8]
 8005812:	0211      	lsls	r1, r2, #8
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	6952      	ldr	r2, [r2, #20]
 8005818:	0852      	lsrs	r2, r2, #1
 800581a:	3a01      	subs	r2, #1
 800581c:	0652      	lsls	r2, r2, #25
 800581e:	4311      	orrs	r1, r2
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6852      	ldr	r2, [r2, #4]
 8005824:	3a01      	subs	r2, #1
 8005826:	0112      	lsls	r2, r2, #4
 8005828:	430a      	orrs	r2, r1
 800582a:	4916      	ldr	r1, [pc, #88]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 800582c:	4313      	orrs	r3, r2
 800582e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005830:	4b14      	ldr	r3, [pc, #80]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a13      	ldr	r2, [pc, #76]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005836:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800583a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583c:	f7fd fb12 	bl	8002e64 <HAL_GetTick>
 8005840:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005842:	e009      	b.n	8005858 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005844:	f7fd fb0e 	bl	8002e64 <HAL_GetTick>
 8005848:	4602      	mov	r2, r0
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	2b02      	cmp	r3, #2
 8005850:	d902      	bls.n	8005858 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
          break;
 8005856:	e005      	b.n	8005864 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005858:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0ef      	beq.n	8005844 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800586a:	4b06      	ldr	r3, [pc, #24]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 800586c:	691a      	ldr	r2, [r3, #16]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	4904      	ldr	r1, [pc, #16]	; (8005884 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005874:	4313      	orrs	r3, r2
 8005876:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	40021000 	.word	0x40021000
 8005888:	07ff800f 	.word	0x07ff800f
 800588c:	ff9f800f 	.word	0xff9f800f
 8005890:	f9ff800f 	.word	0xf9ff800f

08005894 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800589e:	2300      	movs	r3, #0
 80058a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80058a2:	4b72      	ldr	r3, [pc, #456]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0303 	and.w	r3, r3, #3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00e      	beq.n	80058cc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80058ae:	4b6f      	ldr	r3, [pc, #444]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	f003 0203 	and.w	r2, r3, #3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	429a      	cmp	r2, r3
 80058bc:	d103      	bne.n	80058c6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
       ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d142      	bne.n	800594c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
 80058ca:	e03f      	b.n	800594c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b03      	cmp	r3, #3
 80058d2:	d018      	beq.n	8005906 <RCCEx_PLLSAI2_Config+0x72>
 80058d4:	2b03      	cmp	r3, #3
 80058d6:	d825      	bhi.n	8005924 <RCCEx_PLLSAI2_Config+0x90>
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d002      	beq.n	80058e2 <RCCEx_PLLSAI2_Config+0x4e>
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d009      	beq.n	80058f4 <RCCEx_PLLSAI2_Config+0x60>
 80058e0:	e020      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058e2:	4b62      	ldr	r3, [pc, #392]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d11d      	bne.n	800592a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058f2:	e01a      	b.n	800592a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058f4:	4b5d      	ldr	r3, [pc, #372]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d116      	bne.n	800592e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005900:	2301      	movs	r3, #1
 8005902:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005904:	e013      	b.n	800592e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005906:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d10f      	bne.n	8005932 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005912:	4b56      	ldr	r3, [pc, #344]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d109      	bne.n	8005932 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005922:	e006      	b.n	8005932 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	73fb      	strb	r3, [r7, #15]
      break;
 8005928:	e004      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800592a:	bf00      	nop
 800592c:	e002      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005932:	bf00      	nop
    }

    if(status == HAL_OK)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d108      	bne.n	800594c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800593a:	4b4c      	ldr	r3, [pc, #304]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f023 0203 	bic.w	r2, r3, #3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4949      	ldr	r1, [pc, #292]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005948:	4313      	orrs	r3, r2
 800594a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800594c:	7bfb      	ldrb	r3, [r7, #15]
 800594e:	2b00      	cmp	r3, #0
 8005950:	f040 8086 	bne.w	8005a60 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005954:	4b45      	ldr	r3, [pc, #276]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a44      	ldr	r2, [pc, #272]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 800595a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800595e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fd fa80 	bl	8002e64 <HAL_GetTick>
 8005964:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005966:	e009      	b.n	800597c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005968:	f7fd fa7c 	bl	8002e64 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b02      	cmp	r3, #2
 8005974:	d902      	bls.n	800597c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	73fb      	strb	r3, [r7, #15]
        break;
 800597a:	e005      	b.n	8005988 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800597c:	4b3b      	ldr	r3, [pc, #236]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1ef      	bne.n	8005968 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d168      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d113      	bne.n	80059bc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005994:	4b35      	ldr	r3, [pc, #212]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005996:	695a      	ldr	r2, [r3, #20]
 8005998:	4b35      	ldr	r3, [pc, #212]	; (8005a70 <RCCEx_PLLSAI2_Config+0x1dc>)
 800599a:	4013      	ands	r3, r2
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	6892      	ldr	r2, [r2, #8]
 80059a0:	0211      	lsls	r1, r2, #8
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68d2      	ldr	r2, [r2, #12]
 80059a6:	06d2      	lsls	r2, r2, #27
 80059a8:	4311      	orrs	r1, r2
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	6852      	ldr	r2, [r2, #4]
 80059ae:	3a01      	subs	r2, #1
 80059b0:	0112      	lsls	r2, r2, #4
 80059b2:	430a      	orrs	r2, r1
 80059b4:	492d      	ldr	r1, [pc, #180]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	614b      	str	r3, [r1, #20]
 80059ba:	e02d      	b.n	8005a18 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d115      	bne.n	80059ee <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c4:	695a      	ldr	r2, [r3, #20]
 80059c6:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <RCCEx_PLLSAI2_Config+0x1e0>)
 80059c8:	4013      	ands	r3, r2
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6892      	ldr	r2, [r2, #8]
 80059ce:	0211      	lsls	r1, r2, #8
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6912      	ldr	r2, [r2, #16]
 80059d4:	0852      	lsrs	r2, r2, #1
 80059d6:	3a01      	subs	r2, #1
 80059d8:	0552      	lsls	r2, r2, #21
 80059da:	4311      	orrs	r1, r2
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	6852      	ldr	r2, [r2, #4]
 80059e0:	3a01      	subs	r2, #1
 80059e2:	0112      	lsls	r2, r2, #4
 80059e4:	430a      	orrs	r2, r1
 80059e6:	4921      	ldr	r1, [pc, #132]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	614b      	str	r3, [r1, #20]
 80059ec:	e014      	b.n	8005a18 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80059ee:	4b1f      	ldr	r3, [pc, #124]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f0:	695a      	ldr	r2, [r3, #20]
 80059f2:	4b21      	ldr	r3, [pc, #132]	; (8005a78 <RCCEx_PLLSAI2_Config+0x1e4>)
 80059f4:	4013      	ands	r3, r2
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6892      	ldr	r2, [r2, #8]
 80059fa:	0211      	lsls	r1, r2, #8
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6952      	ldr	r2, [r2, #20]
 8005a00:	0852      	lsrs	r2, r2, #1
 8005a02:	3a01      	subs	r2, #1
 8005a04:	0652      	lsls	r2, r2, #25
 8005a06:	4311      	orrs	r1, r2
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6852      	ldr	r2, [r2, #4]
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	0112      	lsls	r2, r2, #4
 8005a10:	430a      	orrs	r2, r1
 8005a12:	4916      	ldr	r1, [pc, #88]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005a18:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fd fa1e 	bl	8002e64 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a2a:	e009      	b.n	8005a40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a2c:	f7fd fa1a 	bl	8002e64 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d902      	bls.n	8005a40 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a3e:	e005      	b.n	8005a4c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ef      	beq.n	8005a2c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a54:	695a      	ldr	r2, [r3, #20]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	4904      	ldr	r1, [pc, #16]	; (8005a6c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000
 8005a70:	07ff800f 	.word	0x07ff800f
 8005a74:	ff9f800f 	.word	0xff9f800f
 8005a78:	f9ff800f 	.word	0xf9ff800f

08005a7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e049      	b.n	8005b22 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d106      	bne.n	8005aa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f7fc fe90 	bl	80027c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2202      	movs	r2, #2
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	4619      	mov	r1, r3
 8005aba:	4610      	mov	r0, r2
 8005abc:	f000 fb7a 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}

08005b2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b082      	sub	sp, #8
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d101      	bne.n	8005b3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e049      	b.n	8005bd0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d106      	bne.n	8005b56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f841 	bl	8005bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2202      	movs	r2, #2
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	3304      	adds	r3, #4
 8005b66:	4619      	mov	r1, r3
 8005b68:	4610      	mov	r0, r2
 8005b6a:	f000 fb23 	bl	80061b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2201      	movs	r2, #1
 8005b72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2201      	movs	r2, #1
 8005bc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bce:	2300      	movs	r3, #0
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3708      	adds	r7, #8
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d109      	bne.n	8005c10 <HAL_TIM_PWM_Start+0x24>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	e03c      	b.n	8005c8a <HAL_TIM_PWM_Start+0x9e>
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	2b04      	cmp	r3, #4
 8005c14:	d109      	bne.n	8005c2a <HAL_TIM_PWM_Start+0x3e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	bf14      	ite	ne
 8005c22:	2301      	movne	r3, #1
 8005c24:	2300      	moveq	r3, #0
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	e02f      	b.n	8005c8a <HAL_TIM_PWM_Start+0x9e>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b08      	cmp	r3, #8
 8005c2e:	d109      	bne.n	8005c44 <HAL_TIM_PWM_Start+0x58>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e022      	b.n	8005c8a <HAL_TIM_PWM_Start+0x9e>
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	2b0c      	cmp	r3, #12
 8005c48:	d109      	bne.n	8005c5e <HAL_TIM_PWM_Start+0x72>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	e015      	b.n	8005c8a <HAL_TIM_PWM_Start+0x9e>
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d109      	bne.n	8005c78 <HAL_TIM_PWM_Start+0x8c>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	bf14      	ite	ne
 8005c70:	2301      	movne	r3, #1
 8005c72:	2300      	moveq	r3, #0
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	e008      	b.n	8005c8a <HAL_TIM_PWM_Start+0x9e>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	bf14      	ite	ne
 8005c84:	2301      	movne	r3, #1
 8005c86:	2300      	moveq	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e09c      	b.n	8005dcc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <HAL_TIM_PWM_Start+0xb6>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2202      	movs	r2, #2
 8005c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca0:	e023      	b.n	8005cea <HAL_TIM_PWM_Start+0xfe>
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b04      	cmp	r3, #4
 8005ca6:	d104      	bne.n	8005cb2 <HAL_TIM_PWM_Start+0xc6>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2202      	movs	r2, #2
 8005cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb0:	e01b      	b.n	8005cea <HAL_TIM_PWM_Start+0xfe>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d104      	bne.n	8005cc2 <HAL_TIM_PWM_Start+0xd6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc0:	e013      	b.n	8005cea <HAL_TIM_PWM_Start+0xfe>
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	2b0c      	cmp	r3, #12
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_Start+0xe6>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2202      	movs	r2, #2
 8005ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd0:	e00b      	b.n	8005cea <HAL_TIM_PWM_Start+0xfe>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d104      	bne.n	8005ce2 <HAL_TIM_PWM_Start+0xf6>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2202      	movs	r2, #2
 8005cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce0:	e003      	b.n	8005cea <HAL_TIM_PWM_Start+0xfe>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2202      	movs	r2, #2
 8005ce6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	6839      	ldr	r1, [r7, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fe68 	bl	80069c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a35      	ldr	r2, [pc, #212]	; (8005dd4 <HAL_TIM_PWM_Start+0x1e8>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d013      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x13e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a34      	ldr	r2, [pc, #208]	; (8005dd8 <HAL_TIM_PWM_Start+0x1ec>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00e      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x13e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a32      	ldr	r2, [pc, #200]	; (8005ddc <HAL_TIM_PWM_Start+0x1f0>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d009      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x13e>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a31      	ldr	r2, [pc, #196]	; (8005de0 <HAL_TIM_PWM_Start+0x1f4>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_TIM_PWM_Start+0x13e>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <HAL_TIM_PWM_Start+0x1f8>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_Start+0x142>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <HAL_TIM_PWM_Start+0x144>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d42:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <HAL_TIM_PWM_Start+0x1e8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01d      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x19e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d018      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x19e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <HAL_TIM_PWM_Start+0x1fc>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d013      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x19e>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	; (8005dec <HAL_TIM_PWM_Start+0x200>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d00e      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x19e>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <HAL_TIM_PWM_Start+0x204>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d009      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x19e>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a17      	ldr	r2, [pc, #92]	; (8005dd8 <HAL_TIM_PWM_Start+0x1ec>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d004      	beq.n	8005d8a <HAL_TIM_PWM_Start+0x19e>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a15      	ldr	r2, [pc, #84]	; (8005ddc <HAL_TIM_PWM_Start+0x1f0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d115      	bne.n	8005db6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	4b18      	ldr	r3, [pc, #96]	; (8005df4 <HAL_TIM_PWM_Start+0x208>)
 8005d92:	4013      	ands	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2b06      	cmp	r3, #6
 8005d9a:	d015      	beq.n	8005dc8 <HAL_TIM_PWM_Start+0x1dc>
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005da2:	d011      	beq.n	8005dc8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db4:	e008      	b.n	8005dc8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f042 0201 	orr.w	r2, r2, #1
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	e000      	b.n	8005dca <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	40012c00 	.word	0x40012c00
 8005dd8:	40013400 	.word	0x40013400
 8005ddc:	40014000 	.word	0x40014000
 8005de0:	40014400 	.word	0x40014400
 8005de4:	40014800 	.word	0x40014800
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	00010007 	.word	0x00010007

08005df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e04:	2300      	movs	r3, #0
 8005e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d101      	bne.n	8005e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e12:	2302      	movs	r3, #2
 8005e14:	e0ff      	b.n	8006016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2201      	movs	r2, #1
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b14      	cmp	r3, #20
 8005e22:	f200 80f0 	bhi.w	8006006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e26:	a201      	add	r2, pc, #4	; (adr r2, 8005e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e81 	.word	0x08005e81
 8005e30:	08006007 	.word	0x08006007
 8005e34:	08006007 	.word	0x08006007
 8005e38:	08006007 	.word	0x08006007
 8005e3c:	08005ec1 	.word	0x08005ec1
 8005e40:	08006007 	.word	0x08006007
 8005e44:	08006007 	.word	0x08006007
 8005e48:	08006007 	.word	0x08006007
 8005e4c:	08005f03 	.word	0x08005f03
 8005e50:	08006007 	.word	0x08006007
 8005e54:	08006007 	.word	0x08006007
 8005e58:	08006007 	.word	0x08006007
 8005e5c:	08005f43 	.word	0x08005f43
 8005e60:	08006007 	.word	0x08006007
 8005e64:	08006007 	.word	0x08006007
 8005e68:	08006007 	.word	0x08006007
 8005e6c:	08005f85 	.word	0x08005f85
 8005e70:	08006007 	.word	0x08006007
 8005e74:	08006007 	.word	0x08006007
 8005e78:	08006007 	.word	0x08006007
 8005e7c:	08005fc5 	.word	0x08005fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68b9      	ldr	r1, [r7, #8]
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 fa2e 	bl	80062e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699a      	ldr	r2, [r3, #24]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f042 0208 	orr.w	r2, r2, #8
 8005e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	699a      	ldr	r2, [r3, #24]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 0204 	bic.w	r2, r2, #4
 8005eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6999      	ldr	r1, [r3, #24]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	691a      	ldr	r2, [r3, #16]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	430a      	orrs	r2, r1
 8005ebc:	619a      	str	r2, [r3, #24]
      break;
 8005ebe:	e0a5      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68b9      	ldr	r1, [r7, #8]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fa9e 	bl	8006408 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	699a      	ldr	r2, [r3, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	699a      	ldr	r2, [r3, #24]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6999      	ldr	r1, [r3, #24]
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	021a      	lsls	r2, r3, #8
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	619a      	str	r2, [r3, #24]
      break;
 8005f00:	e084      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68b9      	ldr	r1, [r7, #8]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 fb07 	bl	800651c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	69da      	ldr	r2, [r3, #28]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f042 0208 	orr.w	r2, r2, #8
 8005f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69da      	ldr	r2, [r3, #28]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0204 	bic.w	r2, r2, #4
 8005f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	69d9      	ldr	r1, [r3, #28]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	691a      	ldr	r2, [r3, #16]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	61da      	str	r2, [r3, #28]
      break;
 8005f40:	e064      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f000 fb6f 	bl	800662c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	69da      	ldr	r2, [r3, #28]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	021a      	lsls	r2, r3, #8
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	430a      	orrs	r2, r1
 8005f80:	61da      	str	r2, [r3, #28]
      break;
 8005f82:	e043      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 fbb8 	bl	8006700 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f042 0208 	orr.w	r2, r2, #8
 8005f9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0204 	bic.w	r2, r2, #4
 8005fae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	691a      	ldr	r2, [r3, #16]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fc2:	e023      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68b9      	ldr	r1, [r7, #8]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f000 fbfc 	bl	80067c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006004:	e002      	b.n	800600c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	75fb      	strb	r3, [r7, #23]
      break;
 800600a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006014:	7dfb      	ldrb	r3, [r7, #23]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3718      	adds	r7, #24
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop

08006020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006034:	2b01      	cmp	r3, #1
 8006036:	d101      	bne.n	800603c <HAL_TIM_ConfigClockSource+0x1c>
 8006038:	2302      	movs	r3, #2
 800603a:	e0b6      	b.n	80061aa <HAL_TIM_ConfigClockSource+0x18a>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2202      	movs	r2, #2
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800605a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800605e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006078:	d03e      	beq.n	80060f8 <HAL_TIM_ConfigClockSource+0xd8>
 800607a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800607e:	f200 8087 	bhi.w	8006190 <HAL_TIM_ConfigClockSource+0x170>
 8006082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006086:	f000 8086 	beq.w	8006196 <HAL_TIM_ConfigClockSource+0x176>
 800608a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608e:	d87f      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 8006090:	2b70      	cmp	r3, #112	; 0x70
 8006092:	d01a      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0xaa>
 8006094:	2b70      	cmp	r3, #112	; 0x70
 8006096:	d87b      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 8006098:	2b60      	cmp	r3, #96	; 0x60
 800609a:	d050      	beq.n	800613e <HAL_TIM_ConfigClockSource+0x11e>
 800609c:	2b60      	cmp	r3, #96	; 0x60
 800609e:	d877      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060a0:	2b50      	cmp	r3, #80	; 0x50
 80060a2:	d03c      	beq.n	800611e <HAL_TIM_ConfigClockSource+0xfe>
 80060a4:	2b50      	cmp	r3, #80	; 0x50
 80060a6:	d873      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060a8:	2b40      	cmp	r3, #64	; 0x40
 80060aa:	d058      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x13e>
 80060ac:	2b40      	cmp	r3, #64	; 0x40
 80060ae:	d86f      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060b0:	2b30      	cmp	r3, #48	; 0x30
 80060b2:	d064      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060b4:	2b30      	cmp	r3, #48	; 0x30
 80060b6:	d86b      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d060      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060bc:	2b20      	cmp	r3, #32
 80060be:	d867      	bhi.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d05c      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d05a      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x15e>
 80060c8:	e062      	b.n	8006190 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6899      	ldr	r1, [r3, #8]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f000 fc55 	bl	8006988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	609a      	str	r2, [r3, #8]
      break;
 80060f6:	e04f      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6899      	ldr	r1, [r3, #8]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f000 fc3e 	bl	8006988 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800611a:	609a      	str	r2, [r3, #8]
      break;
 800611c:	e03c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	6859      	ldr	r1, [r3, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	461a      	mov	r2, r3
 800612c:	f000 fbb2 	bl	8006894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2150      	movs	r1, #80	; 0x50
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fc0b 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 800613c:	e02c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6818      	ldr	r0, [r3, #0]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	6859      	ldr	r1, [r3, #4]
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	461a      	mov	r2, r3
 800614c:	f000 fbd1 	bl	80068f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2160      	movs	r1, #96	; 0x60
 8006156:	4618      	mov	r0, r3
 8006158:	f000 fbfb 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 800615c:	e01c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	461a      	mov	r2, r3
 800616c:	f000 fb92 	bl	8006894 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fbeb 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 800617c:	e00c      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f000 fbe2 	bl	8006952 <TIM_ITRx_SetConfig>
      break;
 800618e:	e003      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
      break;
 8006194:	e000      	b.n	8006198 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006196:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	4a40      	ldr	r2, [pc, #256]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d013      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d2:	d00f      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a3d      	ldr	r2, [pc, #244]	; (80062cc <TIM_Base_SetConfig+0x118>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00b      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a3c      	ldr	r2, [pc, #240]	; (80062d0 <TIM_Base_SetConfig+0x11c>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d007      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a3b      	ldr	r2, [pc, #236]	; (80062d4 <TIM_Base_SetConfig+0x120>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_Base_SetConfig+0x40>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a3a      	ldr	r2, [pc, #232]	; (80062d8 <TIM_Base_SetConfig+0x124>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d108      	bne.n	8006206 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a2f      	ldr	r2, [pc, #188]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d01f      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006214:	d01b      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a2c      	ldr	r2, [pc, #176]	; (80062cc <TIM_Base_SetConfig+0x118>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d017      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a2b      	ldr	r2, [pc, #172]	; (80062d0 <TIM_Base_SetConfig+0x11c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d013      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a2a      	ldr	r2, [pc, #168]	; (80062d4 <TIM_Base_SetConfig+0x120>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d00f      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a29      	ldr	r2, [pc, #164]	; (80062d8 <TIM_Base_SetConfig+0x124>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d00b      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a28      	ldr	r2, [pc, #160]	; (80062dc <TIM_Base_SetConfig+0x128>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d007      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a27      	ldr	r2, [pc, #156]	; (80062e0 <TIM_Base_SetConfig+0x12c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d003      	beq.n	800624e <TIM_Base_SetConfig+0x9a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a26      	ldr	r2, [pc, #152]	; (80062e4 <TIM_Base_SetConfig+0x130>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d108      	bne.n	8006260 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	68db      	ldr	r3, [r3, #12]
 800625a:	68fa      	ldr	r2, [r7, #12]
 800625c:	4313      	orrs	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	695b      	ldr	r3, [r3, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	689a      	ldr	r2, [r3, #8]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800627c:	683b      	ldr	r3, [r7, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a10      	ldr	r2, [pc, #64]	; (80062c8 <TIM_Base_SetConfig+0x114>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d00f      	beq.n	80062ac <TIM_Base_SetConfig+0xf8>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a12      	ldr	r2, [pc, #72]	; (80062d8 <TIM_Base_SetConfig+0x124>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_Base_SetConfig+0xf8>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a11      	ldr	r2, [pc, #68]	; (80062dc <TIM_Base_SetConfig+0x128>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_Base_SetConfig+0xf8>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a10      	ldr	r2, [pc, #64]	; (80062e0 <TIM_Base_SetConfig+0x12c>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0xf8>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a0f      	ldr	r2, [pc, #60]	; (80062e4 <TIM_Base_SetConfig+0x130>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d103      	bne.n	80062b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	691a      	ldr	r2, [r3, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	615a      	str	r2, [r3, #20]
}
 80062ba:	bf00      	nop
 80062bc:	3714      	adds	r7, #20
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	40012c00 	.word	0x40012c00
 80062cc:	40000400 	.word	0x40000400
 80062d0:	40000800 	.word	0x40000800
 80062d4:	40000c00 	.word	0x40000c00
 80062d8:	40013400 	.word	0x40013400
 80062dc:	40014000 	.word	0x40014000
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f023 0201 	bic.w	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0303 	bic.w	r3, r3, #3
 8006322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	4313      	orrs	r3, r2
 800632c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f023 0302 	bic.w	r3, r3, #2
 8006334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	4a2c      	ldr	r2, [pc, #176]	; (80063f4 <TIM_OC1_SetConfig+0x10c>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00f      	beq.n	8006368 <TIM_OC1_SetConfig+0x80>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <TIM_OC1_SetConfig+0x110>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d00b      	beq.n	8006368 <TIM_OC1_SetConfig+0x80>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a2a      	ldr	r2, [pc, #168]	; (80063fc <TIM_OC1_SetConfig+0x114>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d007      	beq.n	8006368 <TIM_OC1_SetConfig+0x80>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a29      	ldr	r2, [pc, #164]	; (8006400 <TIM_OC1_SetConfig+0x118>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d003      	beq.n	8006368 <TIM_OC1_SetConfig+0x80>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	4a28      	ldr	r2, [pc, #160]	; (8006404 <TIM_OC1_SetConfig+0x11c>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d10c      	bne.n	8006382 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f023 0308 	bic.w	r3, r3, #8
 800636e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	4313      	orrs	r3, r2
 8006378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 0304 	bic.w	r3, r3, #4
 8006380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a1b      	ldr	r2, [pc, #108]	; (80063f4 <TIM_OC1_SetConfig+0x10c>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00f      	beq.n	80063aa <TIM_OC1_SetConfig+0xc2>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a1a      	ldr	r2, [pc, #104]	; (80063f8 <TIM_OC1_SetConfig+0x110>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d00b      	beq.n	80063aa <TIM_OC1_SetConfig+0xc2>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	4a19      	ldr	r2, [pc, #100]	; (80063fc <TIM_OC1_SetConfig+0x114>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d007      	beq.n	80063aa <TIM_OC1_SetConfig+0xc2>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a18      	ldr	r2, [pc, #96]	; (8006400 <TIM_OC1_SetConfig+0x118>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d003      	beq.n	80063aa <TIM_OC1_SetConfig+0xc2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a17      	ldr	r2, [pc, #92]	; (8006404 <TIM_OC1_SetConfig+0x11c>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d111      	bne.n	80063ce <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	693a      	ldr	r2, [r7, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	621a      	str	r2, [r3, #32]
}
 80063e8:	bf00      	nop
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40012c00 	.word	0x40012c00
 80063f8:	40013400 	.word	0x40013400
 80063fc:	40014000 	.word	0x40014000
 8006400:	40014400 	.word	0x40014400
 8006404:	40014800 	.word	0x40014800

08006408 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f023 0210 	bic.w	r2, r3, #16
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800643a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	68fa      	ldr	r2, [r7, #12]
 800644c:	4313      	orrs	r3, r2
 800644e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f023 0320 	bic.w	r3, r3, #32
 8006456:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a28      	ldr	r2, [pc, #160]	; (8006508 <TIM_OC2_SetConfig+0x100>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d003      	beq.n	8006474 <TIM_OC2_SetConfig+0x6c>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a27      	ldr	r2, [pc, #156]	; (800650c <TIM_OC2_SetConfig+0x104>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d10d      	bne.n	8006490 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800647a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	011b      	lsls	r3, r3, #4
 8006482:	697a      	ldr	r2, [r7, #20]
 8006484:	4313      	orrs	r3, r2
 8006486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800648e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <TIM_OC2_SetConfig+0x100>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00f      	beq.n	80064b8 <TIM_OC2_SetConfig+0xb0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a1c      	ldr	r2, [pc, #112]	; (800650c <TIM_OC2_SetConfig+0x104>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d00b      	beq.n	80064b8 <TIM_OC2_SetConfig+0xb0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a1b      	ldr	r2, [pc, #108]	; (8006510 <TIM_OC2_SetConfig+0x108>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d007      	beq.n	80064b8 <TIM_OC2_SetConfig+0xb0>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a1a      	ldr	r2, [pc, #104]	; (8006514 <TIM_OC2_SetConfig+0x10c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d003      	beq.n	80064b8 <TIM_OC2_SetConfig+0xb0>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a19      	ldr	r2, [pc, #100]	; (8006518 <TIM_OC2_SetConfig+0x110>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d113      	bne.n	80064e0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	693a      	ldr	r2, [r7, #16]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	699b      	ldr	r3, [r3, #24]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4313      	orrs	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	685a      	ldr	r2, [r3, #4]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40012c00 	.word	0x40012c00
 800650c:	40013400 	.word	0x40013400
 8006510:	40014000 	.word	0x40014000
 8006514:	40014400 	.word	0x40014400
 8006518:	40014800 	.word	0x40014800

0800651c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a1b      	ldr	r3, [r3, #32]
 800652a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6a1b      	ldr	r3, [r3, #32]
 8006536:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	69db      	ldr	r3, [r3, #28]
 8006542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800654a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800654e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0303 	bic.w	r3, r3, #3
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006568:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	021b      	lsls	r3, r3, #8
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4a27      	ldr	r2, [pc, #156]	; (8006618 <TIM_OC3_SetConfig+0xfc>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d003      	beq.n	8006586 <TIM_OC3_SetConfig+0x6a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a26      	ldr	r2, [pc, #152]	; (800661c <TIM_OC3_SetConfig+0x100>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d10d      	bne.n	80065a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800658c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	021b      	lsls	r3, r3, #8
 8006594:	697a      	ldr	r2, [r7, #20]
 8006596:	4313      	orrs	r3, r2
 8006598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a1c      	ldr	r2, [pc, #112]	; (8006618 <TIM_OC3_SetConfig+0xfc>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d00f      	beq.n	80065ca <TIM_OC3_SetConfig+0xae>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1b      	ldr	r2, [pc, #108]	; (800661c <TIM_OC3_SetConfig+0x100>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d00b      	beq.n	80065ca <TIM_OC3_SetConfig+0xae>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1a      	ldr	r2, [pc, #104]	; (8006620 <TIM_OC3_SetConfig+0x104>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d007      	beq.n	80065ca <TIM_OC3_SetConfig+0xae>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a19      	ldr	r2, [pc, #100]	; (8006624 <TIM_OC3_SetConfig+0x108>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d003      	beq.n	80065ca <TIM_OC3_SetConfig+0xae>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a18      	ldr	r2, [pc, #96]	; (8006628 <TIM_OC3_SetConfig+0x10c>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d113      	bne.n	80065f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80065d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	011b      	lsls	r3, r3, #4
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	699b      	ldr	r3, [r3, #24]
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	693a      	ldr	r2, [r7, #16]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	693a      	ldr	r2, [r7, #16]
 80065f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685a      	ldr	r2, [r3, #4]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	697a      	ldr	r2, [r7, #20]
 800660a:	621a      	str	r2, [r3, #32]
}
 800660c:	bf00      	nop
 800660e:	371c      	adds	r7, #28
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	40012c00 	.word	0x40012c00
 800661c:	40013400 	.word	0x40013400
 8006620:	40014000 	.word	0x40014000
 8006624:	40014400 	.word	0x40014400
 8006628:	40014800 	.word	0x40014800

0800662c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800662c:	b480      	push	{r7}
 800662e:	b087      	sub	sp, #28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a1b      	ldr	r3, [r3, #32]
 800663a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6a1b      	ldr	r3, [r3, #32]
 8006646:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800665a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006666:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	021b      	lsls	r3, r3, #8
 800666e:	68fa      	ldr	r2, [r7, #12]
 8006670:	4313      	orrs	r3, r2
 8006672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800667a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	4313      	orrs	r3, r2
 8006686:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	4a18      	ldr	r2, [pc, #96]	; (80066ec <TIM_OC4_SetConfig+0xc0>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d00f      	beq.n	80066b0 <TIM_OC4_SetConfig+0x84>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	4a17      	ldr	r2, [pc, #92]	; (80066f0 <TIM_OC4_SetConfig+0xc4>)
 8006694:	4293      	cmp	r3, r2
 8006696:	d00b      	beq.n	80066b0 <TIM_OC4_SetConfig+0x84>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	4a16      	ldr	r2, [pc, #88]	; (80066f4 <TIM_OC4_SetConfig+0xc8>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d007      	beq.n	80066b0 <TIM_OC4_SetConfig+0x84>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4a15      	ldr	r2, [pc, #84]	; (80066f8 <TIM_OC4_SetConfig+0xcc>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <TIM_OC4_SetConfig+0x84>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4a14      	ldr	r2, [pc, #80]	; (80066fc <TIM_OC4_SetConfig+0xd0>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d109      	bne.n	80066c4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	019b      	lsls	r3, r3, #6
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	621a      	str	r2, [r3, #32]
}
 80066de:	bf00      	nop
 80066e0:	371c      	adds	r7, #28
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	40012c00 	.word	0x40012c00
 80066f0:	40013400 	.word	0x40013400
 80066f4:	40014000 	.word	0x40014000
 80066f8:	40014400 	.word	0x40014400
 80066fc:	40014800 	.word	0x40014800

08006700 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006700:	b480      	push	{r7}
 8006702:	b087      	sub	sp, #28
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
 8006708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	4313      	orrs	r3, r2
 800673c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	041b      	lsls	r3, r3, #16
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	4313      	orrs	r3, r2
 8006750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a17      	ldr	r2, [pc, #92]	; (80067b4 <TIM_OC5_SetConfig+0xb4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d00f      	beq.n	800677a <TIM_OC5_SetConfig+0x7a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a16      	ldr	r2, [pc, #88]	; (80067b8 <TIM_OC5_SetConfig+0xb8>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d00b      	beq.n	800677a <TIM_OC5_SetConfig+0x7a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a15      	ldr	r2, [pc, #84]	; (80067bc <TIM_OC5_SetConfig+0xbc>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d007      	beq.n	800677a <TIM_OC5_SetConfig+0x7a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a14      	ldr	r2, [pc, #80]	; (80067c0 <TIM_OC5_SetConfig+0xc0>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC5_SetConfig+0x7a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a13      	ldr	r2, [pc, #76]	; (80067c4 <TIM_OC5_SetConfig+0xc4>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d109      	bne.n	800678e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	40012c00 	.word	0x40012c00
 80067b8:	40013400 	.word	0x40013400
 80067bc:	40014000 	.word	0x40014000
 80067c0:	40014400 	.word	0x40014400
 80067c4:	40014800 	.word	0x40014800

080067c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800680e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	051b      	lsls	r3, r3, #20
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	4313      	orrs	r3, r2
 800681a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a18      	ldr	r2, [pc, #96]	; (8006880 <TIM_OC6_SetConfig+0xb8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00f      	beq.n	8006844 <TIM_OC6_SetConfig+0x7c>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a17      	ldr	r2, [pc, #92]	; (8006884 <TIM_OC6_SetConfig+0xbc>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d00b      	beq.n	8006844 <TIM_OC6_SetConfig+0x7c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a16      	ldr	r2, [pc, #88]	; (8006888 <TIM_OC6_SetConfig+0xc0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d007      	beq.n	8006844 <TIM_OC6_SetConfig+0x7c>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a15      	ldr	r2, [pc, #84]	; (800688c <TIM_OC6_SetConfig+0xc4>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d003      	beq.n	8006844 <TIM_OC6_SetConfig+0x7c>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a14      	ldr	r2, [pc, #80]	; (8006890 <TIM_OC6_SetConfig+0xc8>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d109      	bne.n	8006858 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	695b      	ldr	r3, [r3, #20]
 8006850:	029b      	lsls	r3, r3, #10
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	621a      	str	r2, [r3, #32]
}
 8006872:	bf00      	nop
 8006874:	371c      	adds	r7, #28
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40012c00 	.word	0x40012c00
 8006884:	40013400 	.word	0x40013400
 8006888:	40014000 	.word	0x40014000
 800688c:	40014400 	.word	0x40014400
 8006890:	40014800 	.word	0x40014800

08006894 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068b8:	693b      	ldr	r3, [r7, #16]
 80068ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	693a      	ldr	r2, [r7, #16]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f023 030a 	bic.w	r3, r3, #10
 80068d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	621a      	str	r2, [r3, #32]
}
 80068e6:	bf00      	nop
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068f2:	b480      	push	{r7}
 80068f4:	b087      	sub	sp, #28
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	f023 0210 	bic.w	r2, r3, #16
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800691c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4313      	orrs	r3, r2
 8006926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800692e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	011b      	lsls	r3, r3, #4
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	4313      	orrs	r3, r2
 8006938:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	621a      	str	r2, [r3, #32]
}
 8006946:	bf00      	nop
 8006948:	371c      	adds	r7, #28
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006952:	b480      	push	{r7}
 8006954:	b085      	sub	sp, #20
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
 800695a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006968:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	4313      	orrs	r3, r2
 8006970:	f043 0307 	orr.w	r3, r3, #7
 8006974:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	609a      	str	r2, [r3, #8]
}
 800697c:	bf00      	nop
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006988:	b480      	push	{r7}
 800698a:	b087      	sub	sp, #28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	021a      	lsls	r2, r3, #8
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	431a      	orrs	r2, r3
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	609a      	str	r2, [r3, #8]
}
 80069bc:	bf00      	nop
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b087      	sub	sp, #28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2201      	movs	r2, #1
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a1a      	ldr	r2, [r3, #32]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	43db      	mvns	r3, r3
 80069ea:	401a      	ands	r2, r3
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a1a      	ldr	r2, [r3, #32]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 031f 	and.w	r3, r3, #31
 80069fa:	6879      	ldr	r1, [r7, #4]
 80069fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006a00:	431a      	orrs	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	621a      	str	r2, [r3, #32]
}
 8006a06:	bf00      	nop
 8006a08:	371c      	adds	r7, #28
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
	...

08006a14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b085      	sub	sp, #20
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d101      	bne.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e068      	b.n	8006afe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a2e      	ldr	r2, [pc, #184]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d004      	beq.n	8006a60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a2d      	ldr	r2, [pc, #180]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4313      	orrs	r3, r2
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68fa      	ldr	r2, [r7, #12]
 8006a8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a1e      	ldr	r2, [pc, #120]	; (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d01d      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a9e:	d018      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a1b      	ldr	r2, [pc, #108]	; (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a1a      	ldr	r2, [pc, #104]	; (8006b18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d00e      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a18      	ldr	r2, [pc, #96]	; (8006b1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d009      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d004      	beq.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d10c      	bne.n	8006aec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ad8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2200      	movs	r2, #0
 8006af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr
 8006b0a:	bf00      	nop
 8006b0c:	40012c00 	.word	0x40012c00
 8006b10:	40013400 	.word	0x40013400
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40014000 	.word	0x40014000

08006b24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e065      	b.n	8006c0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	041b      	lsls	r3, r3, #16
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d004      	beq.n	8006bce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a14      	ldr	r2, [pc, #80]	; (8006c1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d115      	bne.n	8006bfa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	051b      	lsls	r3, r3, #20
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40012c00 	.word	0x40012c00
 8006c1c:	40013400 	.word	0x40013400

08006c20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e042      	b.n	8006cb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fb fd11 	bl	800266c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2224      	movs	r2, #36	; 0x24
 8006c4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f022 0201 	bic.w	r2, r2, #1
 8006c60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc52 	bl	800750c <UART_SetConfig>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	d101      	bne.n	8006c72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e022      	b.n	8006cb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 ff0e 	bl	8007a9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	689a      	ldr	r2, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f042 0201 	orr.w	r2, r2, #1
 8006cae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 ff95 	bl	8007be0 <UART_CheckIdleState>
 8006cb6:	4603      	mov	r3, r0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b08a      	sub	sp, #40	; 0x28
 8006cc4:	af02      	add	r7, sp, #8
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	f040 8084 	bne.w	8006de4 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d002      	beq.n	8006ce8 <HAL_UART_Transmit+0x28>
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d101      	bne.n	8006cec <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e07c      	b.n	8006de6 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Transmit+0x3a>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e075      	b.n	8006de6 <HAL_UART_Transmit+0x126>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2221      	movs	r2, #33	; 0x21
 8006d0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d12:	f7fc f8a7 	bl	8002e64 <HAL_GetTick>
 8006d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	88fa      	ldrh	r2, [r7, #6]
 8006d24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d30:	d108      	bne.n	8006d44 <HAL_UART_Transmit+0x84>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d104      	bne.n	8006d44 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e003      	b.n	8006d4c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006d54:	e02d      	b.n	8006db2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	2180      	movs	r1, #128	; 0x80
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 ff88 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e03a      	b.n	8006de6 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10b      	bne.n	8006d8e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	881a      	ldrh	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d82:	b292      	uxth	r2, r2
 8006d84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	3302      	adds	r3, #2
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e008      	b.n	8006da0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	781a      	ldrb	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	b292      	uxth	r2, r2
 8006d98:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006da6:	b29b      	uxth	r3, r3
 8006da8:	3b01      	subs	r3, #1
 8006daa:	b29a      	uxth	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006db8:	b29b      	uxth	r3, r3
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d1cb      	bne.n	8006d56 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2140      	movs	r1, #64	; 0x40
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f000 ff54 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e006      	b.n	8006de6 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006de0:	2300      	movs	r3, #0
 8006de2:	e000      	b.n	8006de6 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006de4:	2302      	movs	r3, #2
  }
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
	...

08006df0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b08a      	sub	sp, #40	; 0x28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	4613      	mov	r3, r2
 8006dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e04:	2b20      	cmp	r3, #32
 8006e06:	d142      	bne.n	8006e8e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d002      	beq.n	8006e14 <HAL_UART_Receive_IT+0x24>
 8006e0e:	88fb      	ldrh	r3, [r7, #6]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d101      	bne.n	8006e18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e03b      	b.n	8006e90 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Receive_IT+0x36>
 8006e22:	2302      	movs	r3, #2
 8006e24:	e034      	b.n	8006e90 <HAL_UART_Receive_IT+0xa0>
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <HAL_UART_Receive_IT+0xa8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d01f      	beq.n	8006e7e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d018      	beq.n	8006e7e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	e853 3f00 	ldrex	r3, [r3]
 8006e58:	613b      	str	r3, [r7, #16]
   return(result);
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e60:	627b      	str	r3, [r7, #36]	; 0x24
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	623b      	str	r3, [r7, #32]
 8006e6c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	69f9      	ldr	r1, [r7, #28]
 8006e70:	6a3a      	ldr	r2, [r7, #32]
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e78:	69bb      	ldr	r3, [r7, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e6      	bne.n	8006e4c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	461a      	mov	r2, r3
 8006e82:	68b9      	ldr	r1, [r7, #8]
 8006e84:	68f8      	ldr	r0, [r7, #12]
 8006e86:	f000 ffbf 	bl	8007e08 <UART_Start_Receive_IT>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	e000      	b.n	8006e90 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e8e:	2302      	movs	r3, #2
  }
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3728      	adds	r7, #40	; 0x28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40008000 	.word	0x40008000

08006e9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b0ba      	sub	sp, #232	; 0xe8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ec2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006ec6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006eca:	4013      	ands	r3, r2
 8006ecc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d11b      	bne.n	8006f10 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f003 0320 	and.w	r3, r3, #32
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d015      	beq.n	8006f10 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d009      	beq.n	8006f10 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	f000 82d6 	beq.w	80074b2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
      }
      return;
 8006f0e:	e2d0      	b.n	80074b2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f000 811f 	beq.w	8007158 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006f1a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006f1e:	4b8b      	ldr	r3, [pc, #556]	; (800714c <HAL_UART_IRQHandler+0x2b0>)
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d106      	bne.n	8006f34 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006f2a:	4b89      	ldr	r3, [pc, #548]	; (8007150 <HAL_UART_IRQHandler+0x2b4>)
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8112 	beq.w	8007158 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d011      	beq.n	8006f64 <HAL_UART_IRQHandler+0xc8>
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d00b      	beq.n	8006f64 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2201      	movs	r2, #1
 8006f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f5a:	f043 0201 	orr.w	r2, r3, #1
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f68:	f003 0302 	and.w	r3, r3, #2
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d011      	beq.n	8006f94 <HAL_UART_IRQHandler+0xf8>
 8006f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00b      	beq.n	8006f94 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2202      	movs	r2, #2
 8006f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f8a:	f043 0204 	orr.w	r2, r3, #4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f98:	f003 0304 	and.w	r3, r3, #4
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d011      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x128>
 8006fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	f043 0202 	orr.w	r2, r3, #2
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d017      	beq.n	8007000 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006fd4:	f003 0320 	and.w	r3, r3, #32
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d105      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006fdc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006fe0:	4b5a      	ldr	r3, [pc, #360]	; (800714c <HAL_UART_IRQHandler+0x2b0>)
 8006fe2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00b      	beq.n	8007000 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2208      	movs	r2, #8
 8006fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ff6:	f043 0208 	orr.w	r2, r3, #8
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007008:	2b00      	cmp	r3, #0
 800700a:	d012      	beq.n	8007032 <HAL_UART_IRQHandler+0x196>
 800700c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00c      	beq.n	8007032 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007028:	f043 0220 	orr.w	r2, r3, #32
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007038:	2b00      	cmp	r3, #0
 800703a:	f000 823c 	beq.w	80074b6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800703e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007042:	f003 0320 	and.w	r3, r3, #32
 8007046:	2b00      	cmp	r3, #0
 8007048:	d013      	beq.n	8007072 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800704a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800704e:	f003 0320 	and.w	r3, r3, #32
 8007052:	2b00      	cmp	r3, #0
 8007054:	d105      	bne.n	8007062 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007056:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800705a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800705e:	2b00      	cmp	r3, #0
 8007060:	d007      	beq.n	8007072 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007066:	2b00      	cmp	r3, #0
 8007068:	d003      	beq.n	8007072 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007078:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d005      	beq.n	8007096 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800708a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800708e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007092:	2b00      	cmp	r3, #0
 8007094:	d04f      	beq.n	8007136 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 ffe0 	bl	800805c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d141      	bne.n	800712e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3308      	adds	r3, #8
 80070b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80070c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80070c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	3308      	adds	r3, #8
 80070d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80070d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80070da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80070e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80070e6:	e841 2300 	strex	r3, r2, [r1]
 80070ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80070ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d1d9      	bne.n	80070aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d013      	beq.n	8007126 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007102:	4a14      	ldr	r2, [pc, #80]	; (8007154 <HAL_UART_IRQHandler+0x2b8>)
 8007104:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800710a:	4618      	mov	r0, r3
 800710c:	f7fc f847 	bl	800319e <HAL_DMA_Abort_IT>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d017      	beq.n	8007146 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007120:	4610      	mov	r0, r2
 8007122:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007124:	e00f      	b.n	8007146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f9da 	bl	80074e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800712c:	e00b      	b.n	8007146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f9d6 	bl	80074e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007134:	e007      	b.n	8007146 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f000 f9d2 	bl	80074e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007144:	e1b7      	b.n	80074b6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007146:	bf00      	nop
    return;
 8007148:	e1b5      	b.n	80074b6 <HAL_UART_IRQHandler+0x61a>
 800714a:	bf00      	nop
 800714c:	10000001 	.word	0x10000001
 8007150:	04000120 	.word	0x04000120
 8007154:	08008129 	.word	0x08008129

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800715c:	2b01      	cmp	r3, #1
 800715e:	f040 814a 	bne.w	80073f6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007166:	f003 0310 	and.w	r3, r3, #16
 800716a:	2b00      	cmp	r3, #0
 800716c:	f000 8143 	beq.w	80073f6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007174:	f003 0310 	and.w	r3, r3, #16
 8007178:	2b00      	cmp	r3, #0
 800717a:	f000 813c 	beq.w	80073f6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2210      	movs	r2, #16
 8007184:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007190:	2b40      	cmp	r3, #64	; 0x40
 8007192:	f040 80b5 	bne.w	8007300 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 8187 	beq.w	80074ba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071b6:	429a      	cmp	r2, r3
 80071b8:	f080 817f 	bcs.w	80074ba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80071c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0320 	and.w	r3, r3, #32
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f040 8086 	bne.w	80072e4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80071ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80071f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007202:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007206:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800720e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800721a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d1da      	bne.n	80071d8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3308      	adds	r3, #8
 8007228:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800722a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007232:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007234:	f023 0301 	bic.w	r3, r3, #1
 8007238:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	3308      	adds	r3, #8
 8007242:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007246:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800724a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800724e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007258:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e1      	bne.n	8007222 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	3308      	adds	r3, #8
 8007264:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007268:	e853 3f00 	ldrex	r3, [r3]
 800726c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800726e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	3308      	adds	r3, #8
 800727e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007282:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007284:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007288:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007290:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e3      	bne.n	800725e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2220      	movs	r2, #32
 800729a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80072b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072b4:	f023 0310 	bic.w	r3, r3, #16
 80072b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80072c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80072cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80072ce:	e841 2300 	strex	r3, r2, [r1]
 80072d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80072d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d1e4      	bne.n	80072a4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072de:	4618      	mov	r0, r3
 80072e0:	f7fb ff01 	bl	80030e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	b29b      	uxth	r3, r3
 80072f6:	4619      	mov	r1, r3
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f8fb 	bl	80074f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072fe:	e0dc      	b.n	80074ba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800730c:	b29b      	uxth	r3, r3
 800730e:	1ad3      	subs	r3, r2, r3
 8007310:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800731a:	b29b      	uxth	r3, r3
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 80ce 	beq.w	80074be <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007326:	2b00      	cmp	r3, #0
 8007328:	f000 80c9 	beq.w	80074be <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007334:	e853 3f00 	ldrex	r3, [r3]
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800733a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800734e:	647b      	str	r3, [r7, #68]	; 0x44
 8007350:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007352:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007354:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007356:	e841 2300 	strex	r3, r2, [r1]
 800735a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800735c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1e4      	bne.n	800732c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	3308      	adds	r3, #8
 8007368:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	e853 3f00 	ldrex	r3, [r3]
 8007370:	623b      	str	r3, [r7, #32]
   return(result);
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	3308      	adds	r3, #8
 8007386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800738a:	633a      	str	r2, [r7, #48]	; 0x30
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007390:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007392:	e841 2300 	strex	r3, r2, [r1]
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d1e1      	bne.n	8007362 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2200      	movs	r2, #0
 80073b0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	e853 3f00 	ldrex	r3, [r3]
 80073be:	60fb      	str	r3, [r7, #12]
   return(result);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0310 	bic.w	r3, r3, #16
 80073c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d8:	69b9      	ldr	r1, [r7, #24]
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	e841 2300 	strex	r3, r2, [r1]
 80073e0:	617b      	str	r3, [r7, #20]
   return(result);
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1e4      	bne.n	80073b2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80073e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80073ec:	4619      	mov	r1, r3
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f880 	bl	80074f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80073f4:	e063      	b.n	80074be <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80073f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00e      	beq.n	8007420 <HAL_UART_IRQHandler+0x584>
 8007402:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007416:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 fb2b 	bl	8008a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800741e:	e051      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007424:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007428:	2b00      	cmp	r3, #0
 800742a:	d014      	beq.n	8007456 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800742c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007434:	2b00      	cmp	r3, #0
 8007436:	d105      	bne.n	8007444 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800743c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007440:	2b00      	cmp	r3, #0
 8007442:	d008      	beq.n	8007456 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007448:	2b00      	cmp	r3, #0
 800744a:	d03a      	beq.n	80074c2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	4798      	blx	r3
    }
    return;
 8007454:	e035      	b.n	80074c2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800745a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800745e:	2b00      	cmp	r3, #0
 8007460:	d009      	beq.n	8007476 <HAL_UART_IRQHandler+0x5da>
 8007462:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d003      	beq.n	8007476 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 fe70 	bl	8008154 <UART_EndTransmit_IT>
    return;
 8007474:	e026      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800747a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d009      	beq.n	8007496 <HAL_UART_IRQHandler+0x5fa>
 8007482:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007486:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f001 fb04 	bl	8008a9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007494:	e016      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d010      	beq.n	80074c4 <HAL_UART_IRQHandler+0x628>
 80074a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	da0c      	bge.n	80074c4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f001 faec 	bl	8008a88 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074b0:	e008      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
      return;
 80074b2:	bf00      	nop
 80074b4:	e006      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
    return;
 80074b6:	bf00      	nop
 80074b8:	e004      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
      return;
 80074ba:	bf00      	nop
 80074bc:	e002      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
      return;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <HAL_UART_IRQHandler+0x628>
    return;
 80074c2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80074c4:	37e8      	adds	r7, #232	; 0xe8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop

080074cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	460b      	mov	r3, r1
 80074fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007500:	bf00      	nop
 8007502:	370c      	adds	r7, #12
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800750c:	b5b0      	push	{r4, r5, r7, lr}
 800750e:	b088      	sub	sp, #32
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	691b      	ldr	r3, [r3, #16]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	431a      	orrs	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	69db      	ldr	r3, [r3, #28]
 800752c:	4313      	orrs	r3, r2
 800752e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	681a      	ldr	r2, [r3, #0]
 8007536:	4bb1      	ldr	r3, [pc, #708]	; (80077fc <UART_SetConfig+0x2f0>)
 8007538:	4013      	ands	r3, r2
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	6812      	ldr	r2, [r2, #0]
 800753e:	69f9      	ldr	r1, [r7, #28]
 8007540:	430b      	orrs	r3, r1
 8007542:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	68da      	ldr	r2, [r3, #12]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4aa6      	ldr	r2, [pc, #664]	; (8007800 <UART_SetConfig+0x2f4>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d004      	beq.n	8007574 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	69fa      	ldr	r2, [r7, #28]
 8007570:	4313      	orrs	r3, r2
 8007572:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800757e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007582:	687a      	ldr	r2, [r7, #4]
 8007584:	6812      	ldr	r2, [r2, #0]
 8007586:	69f9      	ldr	r1, [r7, #28]
 8007588:	430b      	orrs	r3, r1
 800758a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	f023 010f 	bic.w	r1, r3, #15
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4a97      	ldr	r2, [pc, #604]	; (8007804 <UART_SetConfig+0x2f8>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d120      	bne.n	80075ee <UART_SetConfig+0xe2>
 80075ac:	4b96      	ldr	r3, [pc, #600]	; (8007808 <UART_SetConfig+0x2fc>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	2b03      	cmp	r3, #3
 80075b8:	d816      	bhi.n	80075e8 <UART_SetConfig+0xdc>
 80075ba:	a201      	add	r2, pc, #4	; (adr r2, 80075c0 <UART_SetConfig+0xb4>)
 80075bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c0:	080075d1 	.word	0x080075d1
 80075c4:	080075dd 	.word	0x080075dd
 80075c8:	080075d7 	.word	0x080075d7
 80075cc:	080075e3 	.word	0x080075e3
 80075d0:	2301      	movs	r3, #1
 80075d2:	76fb      	strb	r3, [r7, #27]
 80075d4:	e0e7      	b.n	80077a6 <UART_SetConfig+0x29a>
 80075d6:	2302      	movs	r3, #2
 80075d8:	76fb      	strb	r3, [r7, #27]
 80075da:	e0e4      	b.n	80077a6 <UART_SetConfig+0x29a>
 80075dc:	2304      	movs	r3, #4
 80075de:	76fb      	strb	r3, [r7, #27]
 80075e0:	e0e1      	b.n	80077a6 <UART_SetConfig+0x29a>
 80075e2:	2308      	movs	r3, #8
 80075e4:	76fb      	strb	r3, [r7, #27]
 80075e6:	e0de      	b.n	80077a6 <UART_SetConfig+0x29a>
 80075e8:	2310      	movs	r3, #16
 80075ea:	76fb      	strb	r3, [r7, #27]
 80075ec:	e0db      	b.n	80077a6 <UART_SetConfig+0x29a>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a86      	ldr	r2, [pc, #536]	; (800780c <UART_SetConfig+0x300>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d132      	bne.n	800765e <UART_SetConfig+0x152>
 80075f8:	4b83      	ldr	r3, [pc, #524]	; (8007808 <UART_SetConfig+0x2fc>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	f003 030c 	and.w	r3, r3, #12
 8007602:	2b0c      	cmp	r3, #12
 8007604:	d828      	bhi.n	8007658 <UART_SetConfig+0x14c>
 8007606:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x100>)
 8007608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760c:	08007641 	.word	0x08007641
 8007610:	08007659 	.word	0x08007659
 8007614:	08007659 	.word	0x08007659
 8007618:	08007659 	.word	0x08007659
 800761c:	0800764d 	.word	0x0800764d
 8007620:	08007659 	.word	0x08007659
 8007624:	08007659 	.word	0x08007659
 8007628:	08007659 	.word	0x08007659
 800762c:	08007647 	.word	0x08007647
 8007630:	08007659 	.word	0x08007659
 8007634:	08007659 	.word	0x08007659
 8007638:	08007659 	.word	0x08007659
 800763c:	08007653 	.word	0x08007653
 8007640:	2300      	movs	r3, #0
 8007642:	76fb      	strb	r3, [r7, #27]
 8007644:	e0af      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007646:	2302      	movs	r3, #2
 8007648:	76fb      	strb	r3, [r7, #27]
 800764a:	e0ac      	b.n	80077a6 <UART_SetConfig+0x29a>
 800764c:	2304      	movs	r3, #4
 800764e:	76fb      	strb	r3, [r7, #27]
 8007650:	e0a9      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007652:	2308      	movs	r3, #8
 8007654:	76fb      	strb	r3, [r7, #27]
 8007656:	e0a6      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007658:	2310      	movs	r3, #16
 800765a:	76fb      	strb	r3, [r7, #27]
 800765c:	e0a3      	b.n	80077a6 <UART_SetConfig+0x29a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a6b      	ldr	r2, [pc, #428]	; (8007810 <UART_SetConfig+0x304>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d120      	bne.n	80076aa <UART_SetConfig+0x19e>
 8007668:	4b67      	ldr	r3, [pc, #412]	; (8007808 <UART_SetConfig+0x2fc>)
 800766a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007672:	2b30      	cmp	r3, #48	; 0x30
 8007674:	d013      	beq.n	800769e <UART_SetConfig+0x192>
 8007676:	2b30      	cmp	r3, #48	; 0x30
 8007678:	d814      	bhi.n	80076a4 <UART_SetConfig+0x198>
 800767a:	2b20      	cmp	r3, #32
 800767c:	d009      	beq.n	8007692 <UART_SetConfig+0x186>
 800767e:	2b20      	cmp	r3, #32
 8007680:	d810      	bhi.n	80076a4 <UART_SetConfig+0x198>
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <UART_SetConfig+0x180>
 8007686:	2b10      	cmp	r3, #16
 8007688:	d006      	beq.n	8007698 <UART_SetConfig+0x18c>
 800768a:	e00b      	b.n	80076a4 <UART_SetConfig+0x198>
 800768c:	2300      	movs	r3, #0
 800768e:	76fb      	strb	r3, [r7, #27]
 8007690:	e089      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007692:	2302      	movs	r3, #2
 8007694:	76fb      	strb	r3, [r7, #27]
 8007696:	e086      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007698:	2304      	movs	r3, #4
 800769a:	76fb      	strb	r3, [r7, #27]
 800769c:	e083      	b.n	80077a6 <UART_SetConfig+0x29a>
 800769e:	2308      	movs	r3, #8
 80076a0:	76fb      	strb	r3, [r7, #27]
 80076a2:	e080      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076a4:	2310      	movs	r3, #16
 80076a6:	76fb      	strb	r3, [r7, #27]
 80076a8:	e07d      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a59      	ldr	r2, [pc, #356]	; (8007814 <UART_SetConfig+0x308>)
 80076b0:	4293      	cmp	r3, r2
 80076b2:	d120      	bne.n	80076f6 <UART_SetConfig+0x1ea>
 80076b4:	4b54      	ldr	r3, [pc, #336]	; (8007808 <UART_SetConfig+0x2fc>)
 80076b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076be:	2bc0      	cmp	r3, #192	; 0xc0
 80076c0:	d013      	beq.n	80076ea <UART_SetConfig+0x1de>
 80076c2:	2bc0      	cmp	r3, #192	; 0xc0
 80076c4:	d814      	bhi.n	80076f0 <UART_SetConfig+0x1e4>
 80076c6:	2b80      	cmp	r3, #128	; 0x80
 80076c8:	d009      	beq.n	80076de <UART_SetConfig+0x1d2>
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d810      	bhi.n	80076f0 <UART_SetConfig+0x1e4>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <UART_SetConfig+0x1cc>
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d006      	beq.n	80076e4 <UART_SetConfig+0x1d8>
 80076d6:	e00b      	b.n	80076f0 <UART_SetConfig+0x1e4>
 80076d8:	2300      	movs	r3, #0
 80076da:	76fb      	strb	r3, [r7, #27]
 80076dc:	e063      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076de:	2302      	movs	r3, #2
 80076e0:	76fb      	strb	r3, [r7, #27]
 80076e2:	e060      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076e4:	2304      	movs	r3, #4
 80076e6:	76fb      	strb	r3, [r7, #27]
 80076e8:	e05d      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076ea:	2308      	movs	r3, #8
 80076ec:	76fb      	strb	r3, [r7, #27]
 80076ee:	e05a      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076f0:	2310      	movs	r3, #16
 80076f2:	76fb      	strb	r3, [r7, #27]
 80076f4:	e057      	b.n	80077a6 <UART_SetConfig+0x29a>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a47      	ldr	r2, [pc, #284]	; (8007818 <UART_SetConfig+0x30c>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d125      	bne.n	800774c <UART_SetConfig+0x240>
 8007700:	4b41      	ldr	r3, [pc, #260]	; (8007808 <UART_SetConfig+0x2fc>)
 8007702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800770a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770e:	d017      	beq.n	8007740 <UART_SetConfig+0x234>
 8007710:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007714:	d817      	bhi.n	8007746 <UART_SetConfig+0x23a>
 8007716:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800771a:	d00b      	beq.n	8007734 <UART_SetConfig+0x228>
 800771c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007720:	d811      	bhi.n	8007746 <UART_SetConfig+0x23a>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <UART_SetConfig+0x222>
 8007726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800772a:	d006      	beq.n	800773a <UART_SetConfig+0x22e>
 800772c:	e00b      	b.n	8007746 <UART_SetConfig+0x23a>
 800772e:	2300      	movs	r3, #0
 8007730:	76fb      	strb	r3, [r7, #27]
 8007732:	e038      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007734:	2302      	movs	r3, #2
 8007736:	76fb      	strb	r3, [r7, #27]
 8007738:	e035      	b.n	80077a6 <UART_SetConfig+0x29a>
 800773a:	2304      	movs	r3, #4
 800773c:	76fb      	strb	r3, [r7, #27]
 800773e:	e032      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007740:	2308      	movs	r3, #8
 8007742:	76fb      	strb	r3, [r7, #27]
 8007744:	e02f      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007746:	2310      	movs	r3, #16
 8007748:	76fb      	strb	r3, [r7, #27]
 800774a:	e02c      	b.n	80077a6 <UART_SetConfig+0x29a>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2b      	ldr	r2, [pc, #172]	; (8007800 <UART_SetConfig+0x2f4>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d125      	bne.n	80077a2 <UART_SetConfig+0x296>
 8007756:	4b2c      	ldr	r3, [pc, #176]	; (8007808 <UART_SetConfig+0x2fc>)
 8007758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800775c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007760:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007764:	d017      	beq.n	8007796 <UART_SetConfig+0x28a>
 8007766:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800776a:	d817      	bhi.n	800779c <UART_SetConfig+0x290>
 800776c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007770:	d00b      	beq.n	800778a <UART_SetConfig+0x27e>
 8007772:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007776:	d811      	bhi.n	800779c <UART_SetConfig+0x290>
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <UART_SetConfig+0x278>
 800777c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007780:	d006      	beq.n	8007790 <UART_SetConfig+0x284>
 8007782:	e00b      	b.n	800779c <UART_SetConfig+0x290>
 8007784:	2300      	movs	r3, #0
 8007786:	76fb      	strb	r3, [r7, #27]
 8007788:	e00d      	b.n	80077a6 <UART_SetConfig+0x29a>
 800778a:	2302      	movs	r3, #2
 800778c:	76fb      	strb	r3, [r7, #27]
 800778e:	e00a      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007790:	2304      	movs	r3, #4
 8007792:	76fb      	strb	r3, [r7, #27]
 8007794:	e007      	b.n	80077a6 <UART_SetConfig+0x29a>
 8007796:	2308      	movs	r3, #8
 8007798:	76fb      	strb	r3, [r7, #27]
 800779a:	e004      	b.n	80077a6 <UART_SetConfig+0x29a>
 800779c:	2310      	movs	r3, #16
 800779e:	76fb      	strb	r3, [r7, #27]
 80077a0:	e001      	b.n	80077a6 <UART_SetConfig+0x29a>
 80077a2:	2310      	movs	r3, #16
 80077a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a15      	ldr	r2, [pc, #84]	; (8007800 <UART_SetConfig+0x2f4>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	f040 809f 	bne.w	80078f0 <UART_SetConfig+0x3e4>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80077b2:	7efb      	ldrb	r3, [r7, #27]
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d837      	bhi.n	8007828 <UART_SetConfig+0x31c>
 80077b8:	a201      	add	r2, pc, #4	; (adr r2, 80077c0 <UART_SetConfig+0x2b4>)
 80077ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077be:	bf00      	nop
 80077c0:	080077e5 	.word	0x080077e5
 80077c4:	08007829 	.word	0x08007829
 80077c8:	080077ed 	.word	0x080077ed
 80077cc:	08007829 	.word	0x08007829
 80077d0:	080077f3 	.word	0x080077f3
 80077d4:	08007829 	.word	0x08007829
 80077d8:	08007829 	.word	0x08007829
 80077dc:	08007829 	.word	0x08007829
 80077e0:	08007821 	.word	0x08007821
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077e4:	f7fd fb44 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 80077e8:	6178      	str	r0, [r7, #20]
        break;
 80077ea:	e022      	b.n	8007832 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077ec:	4b0b      	ldr	r3, [pc, #44]	; (800781c <UART_SetConfig+0x310>)
 80077ee:	617b      	str	r3, [r7, #20]
        break;
 80077f0:	e01f      	b.n	8007832 <UART_SetConfig+0x326>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077f2:	f7fd faa5 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 80077f6:	6178      	str	r0, [r7, #20]
        break;
 80077f8:	e01b      	b.n	8007832 <UART_SetConfig+0x326>
 80077fa:	bf00      	nop
 80077fc:	cfff69f3 	.word	0xcfff69f3
 8007800:	40008000 	.word	0x40008000
 8007804:	40013800 	.word	0x40013800
 8007808:	40021000 	.word	0x40021000
 800780c:	40004400 	.word	0x40004400
 8007810:	40004800 	.word	0x40004800
 8007814:	40004c00 	.word	0x40004c00
 8007818:	40005000 	.word	0x40005000
 800781c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007820:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007824:	617b      	str	r3, [r7, #20]
        break;
 8007826:	e004      	b.n	8007832 <UART_SetConfig+0x326>
      default:
        pclk = 0U;
 8007828:	2300      	movs	r3, #0
 800782a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	76bb      	strb	r3, [r7, #26]
        break;
 8007830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8119 	beq.w	8007a6c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783e:	4a95      	ldr	r2, [pc, #596]	; (8007a94 <UART_SetConfig+0x588>)
 8007840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007844:	461a      	mov	r2, r3
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	fbb3 f3f2 	udiv	r3, r3, r2
 800784c:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	4613      	mov	r3, r2
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4413      	add	r3, r2
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	429a      	cmp	r2, r3
 800785c:	d305      	bcc.n	800786a <UART_SetConfig+0x35e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	429a      	cmp	r2, r3
 8007868:	d902      	bls.n	8007870 <UART_SetConfig+0x364>
      {
        ret = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	76bb      	strb	r3, [r7, #26]
 800786e:	e0fd      	b.n	8007a6c <UART_SetConfig+0x560>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4618      	mov	r0, r3
 8007874:	f04f 0100 	mov.w	r1, #0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	4a85      	ldr	r2, [pc, #532]	; (8007a94 <UART_SetConfig+0x588>)
 800787e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007882:	b29a      	uxth	r2, r3
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	f7f9 f9f6 	bl	8000c78 <__aeabi_uldivmod>
 800788c:	4602      	mov	r2, r0
 800788e:	460b      	mov	r3, r1
 8007890:	4610      	mov	r0, r2
 8007892:	4619      	mov	r1, r3
 8007894:	f04f 0200 	mov.w	r2, #0
 8007898:	f04f 0300 	mov.w	r3, #0
 800789c:	020b      	lsls	r3, r1, #8
 800789e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80078a2:	0202      	lsls	r2, r0, #8
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	6849      	ldr	r1, [r1, #4]
 80078a8:	0849      	lsrs	r1, r1, #1
 80078aa:	4608      	mov	r0, r1
 80078ac:	f04f 0100 	mov.w	r1, #0
 80078b0:	1814      	adds	r4, r2, r0
 80078b2:	eb43 0501 	adc.w	r5, r3, r1
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f04f 0300 	mov.w	r3, #0
 80078c0:	4620      	mov	r0, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	f7f9 f9d8 	bl	8000c78 <__aeabi_uldivmod>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4613      	mov	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d6:	d308      	bcc.n	80078ea <UART_SetConfig+0x3de>
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078de:	d204      	bcs.n	80078ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	60da      	str	r2, [r3, #12]
 80078e8:	e0c0      	b.n	8007a6c <UART_SetConfig+0x560>
        }
        else
        {
          ret = HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	76bb      	strb	r3, [r7, #26]
 80078ee:	e0bd      	b.n	8007a6c <UART_SetConfig+0x560>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	69db      	ldr	r3, [r3, #28]
 80078f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078f8:	d164      	bne.n	80079c4 <UART_SetConfig+0x4b8>
  {
    switch (clocksource)
 80078fa:	7efb      	ldrb	r3, [r7, #27]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d828      	bhi.n	8007952 <UART_SetConfig+0x446>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <UART_SetConfig+0x3fc>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800792d 	.word	0x0800792d
 800790c:	08007935 	.word	0x08007935
 8007910:	0800793d 	.word	0x0800793d
 8007914:	08007953 	.word	0x08007953
 8007918:	08007943 	.word	0x08007943
 800791c:	08007953 	.word	0x08007953
 8007920:	08007953 	.word	0x08007953
 8007924:	08007953 	.word	0x08007953
 8007928:	0800794b 	.word	0x0800794b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800792c:	f7fd faa0 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 8007930:	6178      	str	r0, [r7, #20]
        break;
 8007932:	e013      	b.n	800795c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007934:	f7fd fab2 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 8007938:	6178      	str	r0, [r7, #20]
        break;
 800793a:	e00f      	b.n	800795c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800793c:	4b56      	ldr	r3, [pc, #344]	; (8007a98 <UART_SetConfig+0x58c>)
 800793e:	617b      	str	r3, [r7, #20]
        break;
 8007940:	e00c      	b.n	800795c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007942:	f7fd f9fd 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8007946:	6178      	str	r0, [r7, #20]
        break;
 8007948:	e008      	b.n	800795c <UART_SetConfig+0x450>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800794a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794e:	617b      	str	r3, [r7, #20]
        break;
 8007950:	e004      	b.n	800795c <UART_SetConfig+0x450>
      default:
        pclk = 0U;
 8007952:	2300      	movs	r3, #0
 8007954:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	76bb      	strb	r3, [r7, #26]
        break;
 800795a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	2b00      	cmp	r3, #0
 8007960:	f000 8084 	beq.w	8007a6c <UART_SetConfig+0x560>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007968:	4a4a      	ldr	r2, [pc, #296]	; (8007a94 <UART_SetConfig+0x588>)
 800796a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800796e:	461a      	mov	r2, r3
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	fbb3 f3f2 	udiv	r3, r3, r2
 8007976:	005a      	lsls	r2, r3, #1
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	085b      	lsrs	r3, r3, #1
 800797e:	441a      	add	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685b      	ldr	r3, [r3, #4]
 8007984:	fbb2 f3f3 	udiv	r3, r2, r3
 8007988:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	2b0f      	cmp	r3, #15
 800798e:	d916      	bls.n	80079be <UART_SetConfig+0x4b2>
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007996:	d212      	bcs.n	80079be <UART_SetConfig+0x4b2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	b29b      	uxth	r3, r3
 800799c:	f023 030f 	bic.w	r3, r3, #15
 80079a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	085b      	lsrs	r3, r3, #1
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	89fb      	ldrh	r3, [r7, #14]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	89fa      	ldrh	r2, [r7, #14]
 80079ba:	60da      	str	r2, [r3, #12]
 80079bc:	e056      	b.n	8007a6c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	76bb      	strb	r3, [r7, #26]
 80079c2:	e053      	b.n	8007a6c <UART_SetConfig+0x560>
      }
    }
  }
  else
  {
    switch (clocksource)
 80079c4:	7efb      	ldrb	r3, [r7, #27]
 80079c6:	2b08      	cmp	r3, #8
 80079c8:	d827      	bhi.n	8007a1a <UART_SetConfig+0x50e>
 80079ca:	a201      	add	r2, pc, #4	; (adr r2, 80079d0 <UART_SetConfig+0x4c4>)
 80079cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d0:	080079f5 	.word	0x080079f5
 80079d4:	080079fd 	.word	0x080079fd
 80079d8:	08007a05 	.word	0x08007a05
 80079dc:	08007a1b 	.word	0x08007a1b
 80079e0:	08007a0b 	.word	0x08007a0b
 80079e4:	08007a1b 	.word	0x08007a1b
 80079e8:	08007a1b 	.word	0x08007a1b
 80079ec:	08007a1b 	.word	0x08007a1b
 80079f0:	08007a13 	.word	0x08007a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079f4:	f7fd fa3c 	bl	8004e70 <HAL_RCC_GetPCLK1Freq>
 80079f8:	6178      	str	r0, [r7, #20]
        break;
 80079fa:	e013      	b.n	8007a24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079fc:	f7fd fa4e 	bl	8004e9c <HAL_RCC_GetPCLK2Freq>
 8007a00:	6178      	str	r0, [r7, #20]
        break;
 8007a02:	e00f      	b.n	8007a24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a04:	4b24      	ldr	r3, [pc, #144]	; (8007a98 <UART_SetConfig+0x58c>)
 8007a06:	617b      	str	r3, [r7, #20]
        break;
 8007a08:	e00c      	b.n	8007a24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a0a:	f7fd f999 	bl	8004d40 <HAL_RCC_GetSysClockFreq>
 8007a0e:	6178      	str	r0, [r7, #20]
        break;
 8007a10:	e008      	b.n	8007a24 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a16:	617b      	str	r3, [r7, #20]
        break;
 8007a18:	e004      	b.n	8007a24 <UART_SetConfig+0x518>
      default:
        pclk = 0U;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	76bb      	strb	r3, [r7, #26]
        break;
 8007a22:	bf00      	nop
    }

    if (pclk != 0U)
 8007a24:	697b      	ldr	r3, [r7, #20]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d020      	beq.n	8007a6c <UART_SetConfig+0x560>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2e:	4a19      	ldr	r2, [pc, #100]	; (8007a94 <UART_SetConfig+0x588>)
 8007a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a34:	461a      	mov	r2, r3
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	fbb3 f2f2 	udiv	r2, r3, r2
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	085b      	lsrs	r3, r3, #1
 8007a42:	441a      	add	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4c:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	2b0f      	cmp	r3, #15
 8007a52:	d909      	bls.n	8007a68 <UART_SetConfig+0x55c>
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a5a:	d205      	bcs.n	8007a68 <UART_SetConfig+0x55c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	60da      	str	r2, [r3, #12]
 8007a66:	e001      	b.n	8007a6c <UART_SetConfig+0x560>
      }
      else
      {
        ret = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007a88:	7ebb      	ldrb	r3, [r7, #26]
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3720      	adds	r7, #32
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bdb0      	pop	{r4, r5, r7, pc}
 8007a92:	bf00      	nop
 8007a94:	0800b7f4 	.word	0x0800b7f4
 8007a98:	00f42400 	.word	0x00f42400

08007a9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	430a      	orrs	r2, r1
 8007ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aca:	f003 0302 	and.w	r3, r3, #2
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d00a      	beq.n	8007ae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	430a      	orrs	r2, r1
 8007ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f003 0304 	and.w	r3, r3, #4
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00a      	beq.n	8007b0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b0e:	f003 0308 	and.w	r3, r3, #8
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00a      	beq.n	8007b2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b30:	f003 0310 	and.w	r3, r3, #16
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	430a      	orrs	r2, r1
 8007b4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	689b      	ldr	r3, [r3, #8]
 8007b60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01a      	beq.n	8007bb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b9a:	d10a      	bne.n	8007bb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00a      	beq.n	8007bd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	605a      	str	r2, [r3, #4]
  }
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007bf0:	f7fb f938 	bl	8002e64 <HAL_GetTick>
 8007bf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b08      	cmp	r3, #8
 8007c02:	d10e      	bne.n	8007c22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c08:	9300      	str	r3, [sp, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f82f 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c1e:	2303      	movs	r3, #3
 8007c20:	e025      	b.n	8007c6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f003 0304 	and.w	r3, r3, #4
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	d10e      	bne.n	8007c4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 f819 	bl	8007c76 <UART_WaitOnFlagUntilTimeout>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c4a:	2303      	movs	r3, #3
 8007c4c:	e00f      	b.n	8007c6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2220      	movs	r2, #32
 8007c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2200      	movs	r2, #0
 8007c62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2200      	movs	r2, #0
 8007c68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c6c:	2300      	movs	r3, #0
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3710      	adds	r7, #16
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}

08007c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007c76:	b580      	push	{r7, lr}
 8007c78:	b09c      	sub	sp, #112	; 0x70
 8007c7a:	af00      	add	r7, sp, #0
 8007c7c:	60f8      	str	r0, [r7, #12]
 8007c7e:	60b9      	str	r1, [r7, #8]
 8007c80:	603b      	str	r3, [r7, #0]
 8007c82:	4613      	mov	r3, r2
 8007c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c86:	e0a9      	b.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8e:	f000 80a5 	beq.w	8007ddc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c92:	f7fb f8e7 	bl	8002e64 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d302      	bcc.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8007ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d140      	bne.n	8007d2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	3308      	adds	r3, #8
 8007ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce4:	e853 3f00 	ldrex	r3, [r3]
 8007ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	3308      	adds	r3, #8
 8007cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8007cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d02:	e841 2300 	strex	r3, r2, [r1]
 8007d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d1e5      	bne.n	8007cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2220      	movs	r2, #32
 8007d12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007d26:	2303      	movs	r3, #3
 8007d28:	e069      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d051      	beq.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	69db      	ldr	r3, [r3, #28]
 8007d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d46:	d149      	bne.n	8007ddc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	e853 3f00 	ldrex	r3, [r3]
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
 8007d72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d78:	e841 2300 	strex	r3, r2, [r1]
 8007d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d1e6      	bne.n	8007d52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	3308      	adds	r3, #8
 8007d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	613b      	str	r3, [r7, #16]
   return(result);
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	f023 0301 	bic.w	r3, r3, #1
 8007d9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	3308      	adds	r3, #8
 8007da2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007da4:	623a      	str	r2, [r7, #32]
 8007da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da8:	69f9      	ldr	r1, [r7, #28]
 8007daa:	6a3a      	ldr	r2, [r7, #32]
 8007dac:	e841 2300 	strex	r3, r2, [r1]
 8007db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d1e5      	bne.n	8007d84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2220      	movs	r2, #32
 8007dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	e010      	b.n	8007dfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	69da      	ldr	r2, [r3, #28]
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	4013      	ands	r3, r2
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	429a      	cmp	r2, r3
 8007dea:	bf0c      	ite	eq
 8007dec:	2301      	moveq	r3, #1
 8007dee:	2300      	movne	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	461a      	mov	r2, r3
 8007df4:	79fb      	ldrb	r3, [r7, #7]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	f43f af46 	beq.w	8007c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3770      	adds	r7, #112	; 0x70
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b0a3      	sub	sp, #140	; 0x8c
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	4613      	mov	r3, r2
 8007e14:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	88fa      	ldrh	r2, [r7, #6]
 8007e20:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	88fa      	ldrh	r2, [r7, #6]
 8007e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3a:	d10e      	bne.n	8007e5a <UART_Start_Receive_IT+0x52>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d105      	bne.n	8007e50 <UART_Start_Receive_IT+0x48>
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007e4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e4e:	e02d      	b.n	8007eac <UART_Start_Receive_IT+0xa4>
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	22ff      	movs	r2, #255	; 0xff
 8007e54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e58:	e028      	b.n	8007eac <UART_Start_Receive_IT+0xa4>
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d10d      	bne.n	8007e7e <UART_Start_Receive_IT+0x76>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d104      	bne.n	8007e74 <UART_Start_Receive_IT+0x6c>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	22ff      	movs	r2, #255	; 0xff
 8007e6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e72:	e01b      	b.n	8007eac <UART_Start_Receive_IT+0xa4>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	227f      	movs	r2, #127	; 0x7f
 8007e78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e7c:	e016      	b.n	8007eac <UART_Start_Receive_IT+0xa4>
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e86:	d10d      	bne.n	8007ea4 <UART_Start_Receive_IT+0x9c>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	691b      	ldr	r3, [r3, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d104      	bne.n	8007e9a <UART_Start_Receive_IT+0x92>
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	227f      	movs	r2, #127	; 0x7f
 8007e94:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007e98:	e008      	b.n	8007eac <UART_Start_Receive_IT+0xa4>
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	223f      	movs	r2, #63	; 0x3f
 8007e9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007ea2:	e003      	b.n	8007eac <UART_Start_Receive_IT+0xa4>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2222      	movs	r2, #34	; 0x22
 8007eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec6:	e853 3f00 	ldrex	r3, [r3]
 8007eca:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007ecc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ece:	f043 0301 	orr.w	r3, r3, #1
 8007ed2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3308      	adds	r3, #8
 8007edc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007ee0:	673a      	str	r2, [r7, #112]	; 0x70
 8007ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ee6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007eee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e3      	bne.n	8007ebc <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007efc:	d153      	bne.n	8007fa6 <UART_Start_Receive_IT+0x19e>
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f04:	88fa      	ldrh	r2, [r7, #6]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d34d      	bcc.n	8007fa6 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f12:	d107      	bne.n	8007f24 <UART_Start_Receive_IT+0x11c>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	4a4b      	ldr	r2, [pc, #300]	; (800804c <UART_Start_Receive_IT+0x244>)
 8007f20:	671a      	str	r2, [r3, #112]	; 0x70
 8007f22:	e002      	b.n	8007f2a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	4a4a      	ldr	r2, [pc, #296]	; (8008050 <UART_Start_Receive_IT+0x248>)
 8007f28:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d01a      	beq.n	8007f70 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f42:	e853 3f00 	ldrex	r3, [r3]
 8007f46:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	461a      	mov	r2, r3
 8007f58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f5e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f60:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f64:	e841 2300 	strex	r3, r2, [r1]
 8007f68:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d1e4      	bne.n	8007f3a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	3308      	adds	r3, #8
 8007f76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007f90:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e5      	bne.n	8007f70 <UART_Start_Receive_IT+0x168>
 8007fa4:	e04a      	b.n	800803c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fae:	d107      	bne.n	8007fc0 <UART_Start_Receive_IT+0x1b8>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	691b      	ldr	r3, [r3, #16]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d103      	bne.n	8007fc0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4a26      	ldr	r2, [pc, #152]	; (8008054 <UART_Start_Receive_IT+0x24c>)
 8007fbc:	671a      	str	r2, [r3, #112]	; 0x70
 8007fbe:	e002      	b.n	8007fc6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4a25      	ldr	r2, [pc, #148]	; (8008058 <UART_Start_Receive_IT+0x250>)
 8007fc4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d019      	beq.n	800800a <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fde:	e853 3f00 	ldrex	r3, [r3]
 8007fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fea:	677b      	str	r3, [r7, #116]	; 0x74
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ff6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ff8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ffc:	e841 2300 	strex	r3, r2, [r1]
 8008000:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d1e6      	bne.n	8007fd6 <UART_Start_Receive_IT+0x1ce>
 8008008:	e018      	b.n	800803c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	e853 3f00 	ldrex	r3, [r3]
 8008016:	613b      	str	r3, [r7, #16]
   return(result);
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	f043 0320 	orr.w	r3, r3, #32
 800801e:	67bb      	str	r3, [r7, #120]	; 0x78
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	461a      	mov	r2, r3
 8008026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008028:	623b      	str	r3, [r7, #32]
 800802a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802c:	69f9      	ldr	r1, [r7, #28]
 800802e:	6a3a      	ldr	r2, [r7, #32]
 8008030:	e841 2300 	strex	r3, r2, [r1]
 8008034:	61bb      	str	r3, [r7, #24]
   return(result);
 8008036:	69bb      	ldr	r3, [r7, #24]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d1e6      	bne.n	800800a <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	378c      	adds	r7, #140	; 0x8c
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	08008771 	.word	0x08008771
 8008050:	08008475 	.word	0x08008475
 8008054:	0800830f 	.word	0x0800830f
 8008058:	080081ab 	.word	0x080081ab

0800805c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800805c:	b480      	push	{r7}
 800805e:	b095      	sub	sp, #84	; 0x54
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800806a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800806c:	e853 3f00 	ldrex	r3, [r3]
 8008070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	461a      	mov	r2, r3
 8008080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008082:	643b      	str	r3, [r7, #64]	; 0x40
 8008084:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800808a:	e841 2300 	strex	r3, r2, [r1]
 800808e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1e6      	bne.n	8008064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3308      	adds	r3, #8
 800809c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080ac:	f023 0301 	bic.w	r3, r3, #1
 80080b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3308      	adds	r3, #8
 80080b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c2:	e841 2300 	strex	r3, r2, [r1]
 80080c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1e3      	bne.n	8008096 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d118      	bne.n	8008108 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	e853 3f00 	ldrex	r3, [r3]
 80080e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	f023 0310 	bic.w	r3, r3, #16
 80080ea:	647b      	str	r3, [r7, #68]	; 0x44
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080f4:	61bb      	str	r3, [r7, #24]
 80080f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f8:	6979      	ldr	r1, [r7, #20]
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	e841 2300 	strex	r3, r2, [r1]
 8008100:	613b      	str	r3, [r7, #16]
   return(result);
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d1e6      	bne.n	80080d6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2220      	movs	r2, #32
 800810c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2200      	movs	r2, #0
 8008114:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800811c:	bf00      	nop
 800811e:	3754      	adds	r7, #84	; 0x54
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f7ff f9ca 	bl	80074e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800814c:	bf00      	nop
 800814e:	3710      	adds	r7, #16
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b088      	sub	sp, #32
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	60bb      	str	r3, [r7, #8]
   return(result);
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008170:	61fb      	str	r3, [r7, #28]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6979      	ldr	r1, [r7, #20]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	613b      	str	r3, [r7, #16]
   return(result);
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e6      	bne.n	800815c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2220      	movs	r2, #32
 8008192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f7ff f995 	bl	80074cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80081a2:	bf00      	nop
 80081a4:	3720      	adds	r7, #32
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}

080081aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	b096      	sub	sp, #88	; 0x58
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80081b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081c2:	2b22      	cmp	r3, #34	; 0x22
 80081c4:	f040 8095 	bne.w	80082f2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80081d2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80081d6:	b2d9      	uxtb	r1, r3
 80081d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081e2:	400a      	ands	r2, r1
 80081e4:	b2d2      	uxtb	r2, r2
 80081e6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	b29a      	uxth	r2, r3
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800820a:	b29b      	uxth	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d17a      	bne.n	8008306 <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008218:	e853 3f00 	ldrex	r3, [r3]
 800821c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008224:	653b      	str	r3, [r7, #80]	; 0x50
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800822e:	647b      	str	r3, [r7, #68]	; 0x44
 8008230:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008232:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008236:	e841 2300 	strex	r3, r2, [r1]
 800823a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800823c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d1e6      	bne.n	8008210 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3308      	adds	r3, #8
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	e853 3f00 	ldrex	r3, [r3]
 8008250:	623b      	str	r3, [r7, #32]
   return(result);
 8008252:	6a3b      	ldr	r3, [r7, #32]
 8008254:	f023 0301 	bic.w	r3, r3, #1
 8008258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008262:	633a      	str	r2, [r7, #48]	; 0x30
 8008264:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008266:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800826a:	e841 2300 	strex	r3, r2, [r1]
 800826e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1e5      	bne.n	8008242 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2220      	movs	r2, #32
 800827a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008288:	2b01      	cmp	r3, #1
 800828a:	d12e      	bne.n	80082ea <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	e853 3f00 	ldrex	r3, [r3]
 800829e:	60fb      	str	r3, [r7, #12]
   return(result);
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0310 	bic.w	r3, r3, #16
 80082a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	69b9      	ldr	r1, [r7, #24]
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	617b      	str	r3, [r7, #20]
   return(result);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e6      	bne.n	8008292 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	69db      	ldr	r3, [r3, #28]
 80082ca:	f003 0310 	and.w	r3, r3, #16
 80082ce:	2b10      	cmp	r3, #16
 80082d0:	d103      	bne.n	80082da <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2210      	movs	r2, #16
 80082d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80082e0:	4619      	mov	r1, r3
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7ff f906 	bl	80074f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082e8:	e00d      	b.n	8008306 <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fa f90a 	bl	8002504 <HAL_UART_RxCpltCallback>
}
 80082f0:	e009      	b.n	8008306 <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	8b1b      	ldrh	r3, [r3, #24]
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0208 	orr.w	r2, r2, #8
 8008302:	b292      	uxth	r2, r2
 8008304:	831a      	strh	r2, [r3, #24]
}
 8008306:	bf00      	nop
 8008308:	3758      	adds	r7, #88	; 0x58
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800830e:	b580      	push	{r7, lr}
 8008310:	b096      	sub	sp, #88	; 0x58
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800831c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008326:	2b22      	cmp	r3, #34	; 0x22
 8008328:	f040 8095 	bne.w	8008456 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008332:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800833a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800833c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008340:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008344:	4013      	ands	r3, r2
 8008346:	b29a      	uxth	r2, r3
 8008348:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800834a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008350:	1c9a      	adds	r2, r3, #2
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800835c:	b29b      	uxth	r3, r3
 800835e:	3b01      	subs	r3, #1
 8008360:	b29a      	uxth	r2, r3
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800836e:	b29b      	uxth	r3, r3
 8008370:	2b00      	cmp	r3, #0
 8008372:	d17a      	bne.n	800846a <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800837a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800837c:	e853 3f00 	ldrex	r3, [r3]
 8008380:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008384:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008388:	64fb      	str	r3, [r7, #76]	; 0x4c
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008392:	643b      	str	r3, [r7, #64]	; 0x40
 8008394:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008396:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008398:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800839a:	e841 2300 	strex	r3, r2, [r1]
 800839e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80083a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1e6      	bne.n	8008374 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3308      	adds	r3, #8
 80083ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ae:	6a3b      	ldr	r3, [r7, #32]
 80083b0:	e853 3f00 	ldrex	r3, [r3]
 80083b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	f023 0301 	bic.w	r3, r3, #1
 80083bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	3308      	adds	r3, #8
 80083c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083ce:	e841 2300 	strex	r3, r2, [r1]
 80083d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d1e5      	bne.n	80083a6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2220      	movs	r2, #32
 80083de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d12e      	bne.n	800844e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2200      	movs	r2, #0
 80083f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	60bb      	str	r3, [r7, #8]
   return(result);
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	f023 0310 	bic.w	r3, r3, #16
 800840a:	647b      	str	r3, [r7, #68]	; 0x44
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	461a      	mov	r2, r3
 8008412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008414:	61bb      	str	r3, [r7, #24]
 8008416:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008418:	6979      	ldr	r1, [r7, #20]
 800841a:	69ba      	ldr	r2, [r7, #24]
 800841c:	e841 2300 	strex	r3, r2, [r1]
 8008420:	613b      	str	r3, [r7, #16]
   return(result);
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d1e6      	bne.n	80083f6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	2b10      	cmp	r3, #16
 8008434:	d103      	bne.n	800843e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	2210      	movs	r2, #16
 800843c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008444:	4619      	mov	r1, r3
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff f854 	bl	80074f4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800844c:	e00d      	b.n	800846a <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f7fa f858 	bl	8002504 <HAL_UART_RxCpltCallback>
}
 8008454:	e009      	b.n	800846a <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	8b1b      	ldrh	r3, [r3, #24]
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0208 	orr.w	r2, r2, #8
 8008466:	b292      	uxth	r2, r2
 8008468:	831a      	strh	r2, [r3, #24]
}
 800846a:	bf00      	nop
 800846c:	3758      	adds	r7, #88	; 0x58
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b0a6      	sub	sp, #152	; 0x98
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008482:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	69db      	ldr	r3, [r3, #28]
 800848c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084aa:	2b22      	cmp	r3, #34	; 0x22
 80084ac:	f040 814f 	bne.w	800874e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80084b6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80084ba:	e0f6      	b.n	80086aa <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80084c2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80084c6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80084ca:	b2d9      	uxtb	r1, r3
 80084cc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d6:	400a      	ands	r2, r1
 80084d8:	b2d2      	uxtb	r2, r2
 80084da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	3b01      	subs	r3, #1
 80084f0:	b29a      	uxth	r2, r3
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	69db      	ldr	r3, [r3, #28]
 80084fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008502:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008506:	f003 0307 	and.w	r3, r3, #7
 800850a:	2b00      	cmp	r3, #0
 800850c:	d053      	beq.n	80085b6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800850e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008512:	f003 0301 	and.w	r3, r3, #1
 8008516:	2b00      	cmp	r3, #0
 8008518:	d011      	beq.n	800853e <UART_RxISR_8BIT_FIFOEN+0xca>
 800851a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800851e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2201      	movs	r2, #1
 800852c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008534:	f043 0201 	orr.w	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800853e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d011      	beq.n	800856e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800854a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00b      	beq.n	800856e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2202      	movs	r2, #2
 800855c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008564:	f043 0204 	orr.w	r2, r3, #4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800856e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d011      	beq.n	800859e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800857a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d00b      	beq.n	800859e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2204      	movs	r2, #4
 800858c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008594:	f043 0202 	orr.w	r2, r3, #2
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f7fe ff99 	bl	80074e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2200      	movs	r2, #0
 80085b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d173      	bne.n	80086aa <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ca:	e853 3f00 	ldrex	r3, [r3]
 80085ce:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80085d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	461a      	mov	r2, r3
 80085e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80085e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80085e6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80085ea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085ec:	e841 2300 	strex	r3, r2, [r1]
 80085f0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80085f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d1e4      	bne.n	80085c2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3308      	adds	r3, #8
 80085fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008600:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008602:	e853 3f00 	ldrex	r3, [r3]
 8008606:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800860a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800861c:	657a      	str	r2, [r7, #84]	; 0x54
 800861e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008622:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e3      	bne.n	80085f8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2220      	movs	r2, #32
 8008634:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008642:	2b01      	cmp	r3, #1
 8008644:	d12e      	bne.n	80086a4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008654:	e853 3f00 	ldrex	r3, [r3]
 8008658:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800865a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800865c:	f023 0310 	bic.w	r3, r3, #16
 8008660:	67bb      	str	r3, [r7, #120]	; 0x78
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	461a      	mov	r2, r3
 8008668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800866a:	643b      	str	r3, [r7, #64]	; 0x40
 800866c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800866e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008672:	e841 2300 	strex	r3, r2, [r1]
 8008676:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	2b00      	cmp	r3, #0
 800867c:	d1e6      	bne.n	800864c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f003 0310 	and.w	r3, r3, #16
 8008688:	2b10      	cmp	r3, #16
 800868a:	d103      	bne.n	8008694 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	2210      	movs	r2, #16
 8008692:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800869a:	4619      	mov	r1, r3
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7fe ff29 	bl	80074f4 <HAL_UARTEx_RxEventCallback>
 80086a2:	e002      	b.n	80086aa <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7f9 ff2d 	bl	8002504 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80086aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d006      	beq.n	80086c0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80086b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80086b6:	f003 0320 	and.w	r3, r3, #32
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	f47f aefe 	bne.w	80084bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80086c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80086ca:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d047      	beq.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086d8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086dc:	429a      	cmp	r2, r3
 80086de:	d240      	bcs.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3308      	adds	r3, #8
 80086e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	6a3b      	ldr	r3, [r7, #32]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f6:	673b      	str	r3, [r7, #112]	; 0x70
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008708:	e841 2300 	strex	r3, r2, [r1]
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800870e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1e5      	bne.n	80086e0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8008718:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	e853 3f00 	ldrex	r3, [r3]
 8008726:	60bb      	str	r3, [r7, #8]
   return(result);
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	f043 0320 	orr.w	r3, r3, #32
 800872e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	461a      	mov	r2, r3
 8008736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008738:	61bb      	str	r3, [r7, #24]
 800873a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873c:	6979      	ldr	r1, [r7, #20]
 800873e:	69ba      	ldr	r2, [r7, #24]
 8008740:	e841 2300 	strex	r3, r2, [r1]
 8008744:	613b      	str	r3, [r7, #16]
   return(result);
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d1e6      	bne.n	800871a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800874c:	e009      	b.n	8008762 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	8b1b      	ldrh	r3, [r3, #24]
 8008754:	b29a      	uxth	r2, r3
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f042 0208 	orr.w	r2, r2, #8
 800875e:	b292      	uxth	r2, r2
 8008760:	831a      	strh	r2, [r3, #24]
}
 8008762:	bf00      	nop
 8008764:	3798      	adds	r7, #152	; 0x98
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	080081ab 	.word	0x080081ab

08008770 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b0a8      	sub	sp, #160	; 0xa0
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800877e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	69db      	ldr	r3, [r3, #28]
 8008788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	689b      	ldr	r3, [r3, #8]
 800879c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a6:	2b22      	cmp	r3, #34	; 0x22
 80087a8:	f040 8153 	bne.w	8008a52 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80087b2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80087b6:	e0fa      	b.n	80089ae <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80087be:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80087ca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80087ce:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80087d2:	4013      	ands	r3, r2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80087da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087e0:	1c9a      	adds	r2, r3, #2
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	3b01      	subs	r3, #1
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b00      	cmp	r3, #0
 800880c:	d053      	beq.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800880e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008812:	f003 0301 	and.w	r3, r3, #1
 8008816:	2b00      	cmp	r3, #0
 8008818:	d011      	beq.n	800883e <UART_RxISR_16BIT_FIFOEN+0xce>
 800881a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800881e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00b      	beq.n	800883e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2201      	movs	r2, #1
 800882c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008834:	f043 0201 	orr.w	r2, r3, #1
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800883e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008842:	f003 0302 	and.w	r3, r3, #2
 8008846:	2b00      	cmp	r3, #0
 8008848:	d011      	beq.n	800886e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800884a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800884e:	f003 0301 	and.w	r3, r3, #1
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2202      	movs	r2, #2
 800885c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008864:	f043 0204 	orr.w	r2, r3, #4
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800886e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008872:	f003 0304 	and.w	r3, r3, #4
 8008876:	2b00      	cmp	r3, #0
 8008878:	d011      	beq.n	800889e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800887a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800887e:	f003 0301 	and.w	r3, r3, #1
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00b      	beq.n	800889e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2204      	movs	r2, #4
 800888c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008894:	f043 0202 	orr.w	r2, r3, #2
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d006      	beq.n	80088b6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f7fe fe19 	bl	80074e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80088bc:	b29b      	uxth	r3, r3
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d175      	bne.n	80089ae <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80088e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088e6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80088ea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80088ec:	e841 2300 	strex	r3, r2, [r1]
 80088f0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80088f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d1e4      	bne.n	80088c2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3308      	adds	r3, #8
 80088fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008902:	e853 3f00 	ldrex	r3, [r3]
 8008906:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800890a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800890e:	f023 0301 	bic.w	r3, r3, #1
 8008912:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	3308      	adds	r3, #8
 800891c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008920:	65ba      	str	r2, [r7, #88]	; 0x58
 8008922:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008926:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800892e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e1      	bne.n	80088f8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2220      	movs	r2, #32
 8008938:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2200      	movs	r2, #0
 8008940:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008946:	2b01      	cmp	r3, #1
 8008948:	d12e      	bne.n	80089a8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2200      	movs	r2, #0
 800894e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800895e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008960:	f023 0310 	bic.w	r3, r3, #16
 8008964:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800896e:	647b      	str	r3, [r7, #68]	; 0x44
 8008970:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008974:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800897c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	69db      	ldr	r3, [r3, #28]
 8008988:	f003 0310 	and.w	r3, r3, #16
 800898c:	2b10      	cmp	r3, #16
 800898e:	d103      	bne.n	8008998 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	2210      	movs	r2, #16
 8008996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800899e:	4619      	mov	r1, r3
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f7fe fda7 	bl	80074f4 <HAL_UARTEx_RxEventCallback>
 80089a6:	e002      	b.n	80089ae <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f7f9 fdab 	bl	8002504 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80089ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d006      	beq.n	80089c4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80089b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089ba:	f003 0320 	and.w	r3, r3, #32
 80089be:	2b00      	cmp	r3, #0
 80089c0:	f47f aefa 	bne.w	80087b8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80089ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d047      	beq.n	8008a66 <UART_RxISR_16BIT_FIFOEN+0x2f6>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80089dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d240      	bcs.n	8008a66 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	623b      	str	r3, [r7, #32]
   return(result);
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089fa:	677b      	str	r3, [r7, #116]	; 0x74
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3308      	adds	r3, #8
 8008a02:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008a04:	633a      	str	r2, [r7, #48]	; 0x30
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e5      	bne.n	80089e4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	4a15      	ldr	r2, [pc, #84]	; (8008a70 <UART_RxISR_16BIT_FIFOEN+0x300>)
 8008a1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	e853 3f00 	ldrex	r3, [r3]
 8008a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f043 0320 	orr.w	r3, r3, #32
 8008a32:	673b      	str	r3, [r7, #112]	; 0x70
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	461a      	mov	r2, r3
 8008a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a3c:	61fb      	str	r3, [r7, #28]
 8008a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a40:	69b9      	ldr	r1, [r7, #24]
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	e841 2300 	strex	r3, r2, [r1]
 8008a48:	617b      	str	r3, [r7, #20]
   return(result);
 8008a4a:	697b      	ldr	r3, [r7, #20]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d1e6      	bne.n	8008a1e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a50:	e009      	b.n	8008a66 <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	8b1b      	ldrh	r3, [r3, #24]
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f042 0208 	orr.w	r2, r2, #8
 8008a62:	b292      	uxth	r2, r2
 8008a64:	831a      	strh	r2, [r3, #24]
}
 8008a66:	bf00      	nop
 8008a68:	37a0      	adds	r7, #160	; 0xa0
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}
 8008a6e:	bf00      	nop
 8008a70:	0800830f 	.word	0x0800830f

08008a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <HAL_UARTEx_EnableFifoMode+0x16>
 8008ac2:	2302      	movs	r3, #2
 8008ac4:	e02b      	b.n	8008b1e <HAL_UARTEx_EnableFifoMode+0x6e>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2224      	movs	r2, #36	; 0x24
 8008ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f022 0201 	bic.w	r2, r2, #1
 8008aec:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008af4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8008afc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 f8c2 	bl	8008c90 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2200      	movs	r2, #0
 8008b18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b1c:	2300      	movs	r3, #0
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <HAL_UARTEx_DisableFifoMode+0x16>
 8008b38:	2302      	movs	r3, #2
 8008b3a:	e027      	b.n	8008b8c <HAL_UARTEx_DisableFifoMode+0x66>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2224      	movs	r2, #36	; 0x24
 8008b48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	681a      	ldr	r2, [r3, #0]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f022 0201 	bic.w	r2, r2, #1
 8008b62:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b6a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2200      	movs	r2, #0
 8008b86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e02d      	b.n	8008c0c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2224      	movs	r2, #36	; 0x24
 8008bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0201 	bic.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	689b      	ldr	r3, [r3, #8]
 8008bde:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	683a      	ldr	r2, [r7, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 f84f 	bl	8008c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e02d      	b.n	8008c88 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2224      	movs	r2, #36	; 0x24
 8008c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0201 	bic.w	r2, r2, #1
 8008c52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	689b      	ldr	r3, [r3, #8]
 8008c5a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f000 f811 	bl	8008c90 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68fa      	ldr	r2, [r7, #12]
 8008c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b085      	sub	sp, #20
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d108      	bne.n	8008cb2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008cb0:	e031      	b.n	8008d16 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008cb6:	2308      	movs	r3, #8
 8008cb8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	0e5b      	lsrs	r3, r3, #25
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 0307 	and.w	r3, r3, #7
 8008cc8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	0f5b      	lsrs	r3, r3, #29
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	f003 0307 	and.w	r3, r3, #7
 8008cd8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cda:	7bbb      	ldrb	r3, [r7, #14]
 8008cdc:	7b3a      	ldrb	r2, [r7, #12]
 8008cde:	4911      	ldr	r1, [pc, #68]	; (8008d24 <UARTEx_SetNbDataToProcess+0x94>)
 8008ce0:	5c8a      	ldrb	r2, [r1, r2]
 8008ce2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ce6:	7b3a      	ldrb	r2, [r7, #12]
 8008ce8:	490f      	ldr	r1, [pc, #60]	; (8008d28 <UARTEx_SetNbDataToProcess+0x98>)
 8008cea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008cec:	fb93 f3f2 	sdiv	r3, r3, r2
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
 8008cfa:	7b7a      	ldrb	r2, [r7, #13]
 8008cfc:	4909      	ldr	r1, [pc, #36]	; (8008d24 <UARTEx_SetNbDataToProcess+0x94>)
 8008cfe:	5c8a      	ldrb	r2, [r1, r2]
 8008d00:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d04:	7b7a      	ldrb	r2, [r7, #13]
 8008d06:	4908      	ldr	r1, [pc, #32]	; (8008d28 <UARTEx_SetNbDataToProcess+0x98>)
 8008d08:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d0e:	b29a      	uxth	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d16:	bf00      	nop
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	0800b80c 	.word	0x0800b80c
 8008d28:	0800b814 	.word	0x0800b814

08008d2c <__errno>:
 8008d2c:	4b01      	ldr	r3, [pc, #4]	; (8008d34 <__errno+0x8>)
 8008d2e:	6818      	ldr	r0, [r3, #0]
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	2000000c 	.word	0x2000000c

08008d38 <__libc_init_array>:
 8008d38:	b570      	push	{r4, r5, r6, lr}
 8008d3a:	4d0d      	ldr	r5, [pc, #52]	; (8008d70 <__libc_init_array+0x38>)
 8008d3c:	4c0d      	ldr	r4, [pc, #52]	; (8008d74 <__libc_init_array+0x3c>)
 8008d3e:	1b64      	subs	r4, r4, r5
 8008d40:	10a4      	asrs	r4, r4, #2
 8008d42:	2600      	movs	r6, #0
 8008d44:	42a6      	cmp	r6, r4
 8008d46:	d109      	bne.n	8008d5c <__libc_init_array+0x24>
 8008d48:	4d0b      	ldr	r5, [pc, #44]	; (8008d78 <__libc_init_array+0x40>)
 8008d4a:	4c0c      	ldr	r4, [pc, #48]	; (8008d7c <__libc_init_array+0x44>)
 8008d4c:	f002 fd0a 	bl	800b764 <_init>
 8008d50:	1b64      	subs	r4, r4, r5
 8008d52:	10a4      	asrs	r4, r4, #2
 8008d54:	2600      	movs	r6, #0
 8008d56:	42a6      	cmp	r6, r4
 8008d58:	d105      	bne.n	8008d66 <__libc_init_array+0x2e>
 8008d5a:	bd70      	pop	{r4, r5, r6, pc}
 8008d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d60:	4798      	blx	r3
 8008d62:	3601      	adds	r6, #1
 8008d64:	e7ee      	b.n	8008d44 <__libc_init_array+0xc>
 8008d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d6a:	4798      	blx	r3
 8008d6c:	3601      	adds	r6, #1
 8008d6e:	e7f2      	b.n	8008d56 <__libc_init_array+0x1e>
 8008d70:	0800bc04 	.word	0x0800bc04
 8008d74:	0800bc04 	.word	0x0800bc04
 8008d78:	0800bc04 	.word	0x0800bc04
 8008d7c:	0800bc08 	.word	0x0800bc08

08008d80 <memset>:
 8008d80:	4402      	add	r2, r0
 8008d82:	4603      	mov	r3, r0
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d100      	bne.n	8008d8a <memset+0xa>
 8008d88:	4770      	bx	lr
 8008d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d8e:	e7f9      	b.n	8008d84 <memset+0x4>

08008d90 <__cvt>:
 8008d90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d94:	ec55 4b10 	vmov	r4, r5, d0
 8008d98:	2d00      	cmp	r5, #0
 8008d9a:	460e      	mov	r6, r1
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	462b      	mov	r3, r5
 8008da0:	bfbb      	ittet	lt
 8008da2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008da6:	461d      	movlt	r5, r3
 8008da8:	2300      	movge	r3, #0
 8008daa:	232d      	movlt	r3, #45	; 0x2d
 8008dac:	700b      	strb	r3, [r1, #0]
 8008dae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008db0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008db4:	4691      	mov	r9, r2
 8008db6:	f023 0820 	bic.w	r8, r3, #32
 8008dba:	bfbc      	itt	lt
 8008dbc:	4622      	movlt	r2, r4
 8008dbe:	4614      	movlt	r4, r2
 8008dc0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dc4:	d005      	beq.n	8008dd2 <__cvt+0x42>
 8008dc6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008dca:	d100      	bne.n	8008dce <__cvt+0x3e>
 8008dcc:	3601      	adds	r6, #1
 8008dce:	2102      	movs	r1, #2
 8008dd0:	e000      	b.n	8008dd4 <__cvt+0x44>
 8008dd2:	2103      	movs	r1, #3
 8008dd4:	ab03      	add	r3, sp, #12
 8008dd6:	9301      	str	r3, [sp, #4]
 8008dd8:	ab02      	add	r3, sp, #8
 8008dda:	9300      	str	r3, [sp, #0]
 8008ddc:	ec45 4b10 	vmov	d0, r4, r5
 8008de0:	4653      	mov	r3, sl
 8008de2:	4632      	mov	r2, r6
 8008de4:	f000 fce4 	bl	80097b0 <_dtoa_r>
 8008de8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008dec:	4607      	mov	r7, r0
 8008dee:	d102      	bne.n	8008df6 <__cvt+0x66>
 8008df0:	f019 0f01 	tst.w	r9, #1
 8008df4:	d022      	beq.n	8008e3c <__cvt+0xac>
 8008df6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008dfa:	eb07 0906 	add.w	r9, r7, r6
 8008dfe:	d110      	bne.n	8008e22 <__cvt+0x92>
 8008e00:	783b      	ldrb	r3, [r7, #0]
 8008e02:	2b30      	cmp	r3, #48	; 0x30
 8008e04:	d10a      	bne.n	8008e1c <__cvt+0x8c>
 8008e06:	2200      	movs	r2, #0
 8008e08:	2300      	movs	r3, #0
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fe73 	bl	8000af8 <__aeabi_dcmpeq>
 8008e12:	b918      	cbnz	r0, 8008e1c <__cvt+0x8c>
 8008e14:	f1c6 0601 	rsb	r6, r6, #1
 8008e18:	f8ca 6000 	str.w	r6, [sl]
 8008e1c:	f8da 3000 	ldr.w	r3, [sl]
 8008e20:	4499      	add	r9, r3
 8008e22:	2200      	movs	r2, #0
 8008e24:	2300      	movs	r3, #0
 8008e26:	4620      	mov	r0, r4
 8008e28:	4629      	mov	r1, r5
 8008e2a:	f7f7 fe65 	bl	8000af8 <__aeabi_dcmpeq>
 8008e2e:	b108      	cbz	r0, 8008e34 <__cvt+0xa4>
 8008e30:	f8cd 900c 	str.w	r9, [sp, #12]
 8008e34:	2230      	movs	r2, #48	; 0x30
 8008e36:	9b03      	ldr	r3, [sp, #12]
 8008e38:	454b      	cmp	r3, r9
 8008e3a:	d307      	bcc.n	8008e4c <__cvt+0xbc>
 8008e3c:	9b03      	ldr	r3, [sp, #12]
 8008e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e40:	1bdb      	subs	r3, r3, r7
 8008e42:	4638      	mov	r0, r7
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	b004      	add	sp, #16
 8008e48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4c:	1c59      	adds	r1, r3, #1
 8008e4e:	9103      	str	r1, [sp, #12]
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e7f0      	b.n	8008e36 <__cvt+0xa6>

08008e54 <__exponent>:
 8008e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e56:	4603      	mov	r3, r0
 8008e58:	2900      	cmp	r1, #0
 8008e5a:	bfb8      	it	lt
 8008e5c:	4249      	neglt	r1, r1
 8008e5e:	f803 2b02 	strb.w	r2, [r3], #2
 8008e62:	bfb4      	ite	lt
 8008e64:	222d      	movlt	r2, #45	; 0x2d
 8008e66:	222b      	movge	r2, #43	; 0x2b
 8008e68:	2909      	cmp	r1, #9
 8008e6a:	7042      	strb	r2, [r0, #1]
 8008e6c:	dd2a      	ble.n	8008ec4 <__exponent+0x70>
 8008e6e:	f10d 0407 	add.w	r4, sp, #7
 8008e72:	46a4      	mov	ip, r4
 8008e74:	270a      	movs	r7, #10
 8008e76:	46a6      	mov	lr, r4
 8008e78:	460a      	mov	r2, r1
 8008e7a:	fb91 f6f7 	sdiv	r6, r1, r7
 8008e7e:	fb07 1516 	mls	r5, r7, r6, r1
 8008e82:	3530      	adds	r5, #48	; 0x30
 8008e84:	2a63      	cmp	r2, #99	; 0x63
 8008e86:	f104 34ff 	add.w	r4, r4, #4294967295
 8008e8a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008e8e:	4631      	mov	r1, r6
 8008e90:	dcf1      	bgt.n	8008e76 <__exponent+0x22>
 8008e92:	3130      	adds	r1, #48	; 0x30
 8008e94:	f1ae 0502 	sub.w	r5, lr, #2
 8008e98:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008e9c:	1c44      	adds	r4, r0, #1
 8008e9e:	4629      	mov	r1, r5
 8008ea0:	4561      	cmp	r1, ip
 8008ea2:	d30a      	bcc.n	8008eba <__exponent+0x66>
 8008ea4:	f10d 0209 	add.w	r2, sp, #9
 8008ea8:	eba2 020e 	sub.w	r2, r2, lr
 8008eac:	4565      	cmp	r5, ip
 8008eae:	bf88      	it	hi
 8008eb0:	2200      	movhi	r2, #0
 8008eb2:	4413      	add	r3, r2
 8008eb4:	1a18      	subs	r0, r3, r0
 8008eb6:	b003      	add	sp, #12
 8008eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ebe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008ec2:	e7ed      	b.n	8008ea0 <__exponent+0x4c>
 8008ec4:	2330      	movs	r3, #48	; 0x30
 8008ec6:	3130      	adds	r1, #48	; 0x30
 8008ec8:	7083      	strb	r3, [r0, #2]
 8008eca:	70c1      	strb	r1, [r0, #3]
 8008ecc:	1d03      	adds	r3, r0, #4
 8008ece:	e7f1      	b.n	8008eb4 <__exponent+0x60>

08008ed0 <_printf_float>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	ed2d 8b02 	vpush	{d8}
 8008ed8:	b08d      	sub	sp, #52	; 0x34
 8008eda:	460c      	mov	r4, r1
 8008edc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008ee0:	4616      	mov	r6, r2
 8008ee2:	461f      	mov	r7, r3
 8008ee4:	4605      	mov	r5, r0
 8008ee6:	f001 fb45 	bl	800a574 <_localeconv_r>
 8008eea:	f8d0 a000 	ldr.w	sl, [r0]
 8008eee:	4650      	mov	r0, sl
 8008ef0:	f7f7 f986 	bl	8000200 <strlen>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	930a      	str	r3, [sp, #40]	; 0x28
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	9305      	str	r3, [sp, #20]
 8008efc:	f8d8 3000 	ldr.w	r3, [r8]
 8008f00:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008f04:	3307      	adds	r3, #7
 8008f06:	f023 0307 	bic.w	r3, r3, #7
 8008f0a:	f103 0208 	add.w	r2, r3, #8
 8008f0e:	f8c8 2000 	str.w	r2, [r8]
 8008f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f16:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008f1a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008f1e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008f22:	9307      	str	r3, [sp, #28]
 8008f24:	f8cd 8018 	str.w	r8, [sp, #24]
 8008f28:	ee08 0a10 	vmov	s16, r0
 8008f2c:	4b9f      	ldr	r3, [pc, #636]	; (80091ac <_printf_float+0x2dc>)
 8008f2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f32:	f04f 32ff 	mov.w	r2, #4294967295
 8008f36:	f7f7 fe11 	bl	8000b5c <__aeabi_dcmpun>
 8008f3a:	bb88      	cbnz	r0, 8008fa0 <_printf_float+0xd0>
 8008f3c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f40:	4b9a      	ldr	r3, [pc, #616]	; (80091ac <_printf_float+0x2dc>)
 8008f42:	f04f 32ff 	mov.w	r2, #4294967295
 8008f46:	f7f7 fdeb 	bl	8000b20 <__aeabi_dcmple>
 8008f4a:	bb48      	cbnz	r0, 8008fa0 <_printf_float+0xd0>
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	2300      	movs	r3, #0
 8008f50:	4640      	mov	r0, r8
 8008f52:	4649      	mov	r1, r9
 8008f54:	f7f7 fdda 	bl	8000b0c <__aeabi_dcmplt>
 8008f58:	b110      	cbz	r0, 8008f60 <_printf_float+0x90>
 8008f5a:	232d      	movs	r3, #45	; 0x2d
 8008f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f60:	4b93      	ldr	r3, [pc, #588]	; (80091b0 <_printf_float+0x2e0>)
 8008f62:	4894      	ldr	r0, [pc, #592]	; (80091b4 <_printf_float+0x2e4>)
 8008f64:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008f68:	bf94      	ite	ls
 8008f6a:	4698      	movls	r8, r3
 8008f6c:	4680      	movhi	r8, r0
 8008f6e:	2303      	movs	r3, #3
 8008f70:	6123      	str	r3, [r4, #16]
 8008f72:	9b05      	ldr	r3, [sp, #20]
 8008f74:	f023 0204 	bic.w	r2, r3, #4
 8008f78:	6022      	str	r2, [r4, #0]
 8008f7a:	f04f 0900 	mov.w	r9, #0
 8008f7e:	9700      	str	r7, [sp, #0]
 8008f80:	4633      	mov	r3, r6
 8008f82:	aa0b      	add	r2, sp, #44	; 0x2c
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f9d8 	bl	800933c <_printf_common>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	f040 8090 	bne.w	80090b2 <_printf_float+0x1e2>
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295
 8008f96:	b00d      	add	sp, #52	; 0x34
 8008f98:	ecbd 8b02 	vpop	{d8}
 8008f9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	4640      	mov	r0, r8
 8008fa6:	4649      	mov	r1, r9
 8008fa8:	f7f7 fdd8 	bl	8000b5c <__aeabi_dcmpun>
 8008fac:	b140      	cbz	r0, 8008fc0 <_printf_float+0xf0>
 8008fae:	464b      	mov	r3, r9
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	bfbc      	itt	lt
 8008fb4:	232d      	movlt	r3, #45	; 0x2d
 8008fb6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008fba:	487f      	ldr	r0, [pc, #508]	; (80091b8 <_printf_float+0x2e8>)
 8008fbc:	4b7f      	ldr	r3, [pc, #508]	; (80091bc <_printf_float+0x2ec>)
 8008fbe:	e7d1      	b.n	8008f64 <_printf_float+0x94>
 8008fc0:	6863      	ldr	r3, [r4, #4]
 8008fc2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008fc6:	9206      	str	r2, [sp, #24]
 8008fc8:	1c5a      	adds	r2, r3, #1
 8008fca:	d13f      	bne.n	800904c <_printf_float+0x17c>
 8008fcc:	2306      	movs	r3, #6
 8008fce:	6063      	str	r3, [r4, #4]
 8008fd0:	9b05      	ldr	r3, [sp, #20]
 8008fd2:	6861      	ldr	r1, [r4, #4]
 8008fd4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008fd8:	2300      	movs	r3, #0
 8008fda:	9303      	str	r3, [sp, #12]
 8008fdc:	ab0a      	add	r3, sp, #40	; 0x28
 8008fde:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008fe2:	ab09      	add	r3, sp, #36	; 0x24
 8008fe4:	ec49 8b10 	vmov	d0, r8, r9
 8008fe8:	9300      	str	r3, [sp, #0]
 8008fea:	6022      	str	r2, [r4, #0]
 8008fec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	f7ff fecd 	bl	8008d90 <__cvt>
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ffa:	2b47      	cmp	r3, #71	; 0x47
 8008ffc:	4680      	mov	r8, r0
 8008ffe:	d108      	bne.n	8009012 <_printf_float+0x142>
 8009000:	1cc8      	adds	r0, r1, #3
 8009002:	db02      	blt.n	800900a <_printf_float+0x13a>
 8009004:	6863      	ldr	r3, [r4, #4]
 8009006:	4299      	cmp	r1, r3
 8009008:	dd41      	ble.n	800908e <_printf_float+0x1be>
 800900a:	f1ab 0b02 	sub.w	fp, fp, #2
 800900e:	fa5f fb8b 	uxtb.w	fp, fp
 8009012:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009016:	d820      	bhi.n	800905a <_printf_float+0x18a>
 8009018:	3901      	subs	r1, #1
 800901a:	465a      	mov	r2, fp
 800901c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009020:	9109      	str	r1, [sp, #36]	; 0x24
 8009022:	f7ff ff17 	bl	8008e54 <__exponent>
 8009026:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009028:	1813      	adds	r3, r2, r0
 800902a:	2a01      	cmp	r2, #1
 800902c:	4681      	mov	r9, r0
 800902e:	6123      	str	r3, [r4, #16]
 8009030:	dc02      	bgt.n	8009038 <_printf_float+0x168>
 8009032:	6822      	ldr	r2, [r4, #0]
 8009034:	07d2      	lsls	r2, r2, #31
 8009036:	d501      	bpl.n	800903c <_printf_float+0x16c>
 8009038:	3301      	adds	r3, #1
 800903a:	6123      	str	r3, [r4, #16]
 800903c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009040:	2b00      	cmp	r3, #0
 8009042:	d09c      	beq.n	8008f7e <_printf_float+0xae>
 8009044:	232d      	movs	r3, #45	; 0x2d
 8009046:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800904a:	e798      	b.n	8008f7e <_printf_float+0xae>
 800904c:	9a06      	ldr	r2, [sp, #24]
 800904e:	2a47      	cmp	r2, #71	; 0x47
 8009050:	d1be      	bne.n	8008fd0 <_printf_float+0x100>
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1bc      	bne.n	8008fd0 <_printf_float+0x100>
 8009056:	2301      	movs	r3, #1
 8009058:	e7b9      	b.n	8008fce <_printf_float+0xfe>
 800905a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800905e:	d118      	bne.n	8009092 <_printf_float+0x1c2>
 8009060:	2900      	cmp	r1, #0
 8009062:	6863      	ldr	r3, [r4, #4]
 8009064:	dd0b      	ble.n	800907e <_printf_float+0x1ae>
 8009066:	6121      	str	r1, [r4, #16]
 8009068:	b913      	cbnz	r3, 8009070 <_printf_float+0x1a0>
 800906a:	6822      	ldr	r2, [r4, #0]
 800906c:	07d0      	lsls	r0, r2, #31
 800906e:	d502      	bpl.n	8009076 <_printf_float+0x1a6>
 8009070:	3301      	adds	r3, #1
 8009072:	440b      	add	r3, r1
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	65a1      	str	r1, [r4, #88]	; 0x58
 8009078:	f04f 0900 	mov.w	r9, #0
 800907c:	e7de      	b.n	800903c <_printf_float+0x16c>
 800907e:	b913      	cbnz	r3, 8009086 <_printf_float+0x1b6>
 8009080:	6822      	ldr	r2, [r4, #0]
 8009082:	07d2      	lsls	r2, r2, #31
 8009084:	d501      	bpl.n	800908a <_printf_float+0x1ba>
 8009086:	3302      	adds	r3, #2
 8009088:	e7f4      	b.n	8009074 <_printf_float+0x1a4>
 800908a:	2301      	movs	r3, #1
 800908c:	e7f2      	b.n	8009074 <_printf_float+0x1a4>
 800908e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009092:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009094:	4299      	cmp	r1, r3
 8009096:	db05      	blt.n	80090a4 <_printf_float+0x1d4>
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	6121      	str	r1, [r4, #16]
 800909c:	07d8      	lsls	r0, r3, #31
 800909e:	d5ea      	bpl.n	8009076 <_printf_float+0x1a6>
 80090a0:	1c4b      	adds	r3, r1, #1
 80090a2:	e7e7      	b.n	8009074 <_printf_float+0x1a4>
 80090a4:	2900      	cmp	r1, #0
 80090a6:	bfd4      	ite	le
 80090a8:	f1c1 0202 	rsble	r2, r1, #2
 80090ac:	2201      	movgt	r2, #1
 80090ae:	4413      	add	r3, r2
 80090b0:	e7e0      	b.n	8009074 <_printf_float+0x1a4>
 80090b2:	6823      	ldr	r3, [r4, #0]
 80090b4:	055a      	lsls	r2, r3, #21
 80090b6:	d407      	bmi.n	80090c8 <_printf_float+0x1f8>
 80090b8:	6923      	ldr	r3, [r4, #16]
 80090ba:	4642      	mov	r2, r8
 80090bc:	4631      	mov	r1, r6
 80090be:	4628      	mov	r0, r5
 80090c0:	47b8      	blx	r7
 80090c2:	3001      	adds	r0, #1
 80090c4:	d12c      	bne.n	8009120 <_printf_float+0x250>
 80090c6:	e764      	b.n	8008f92 <_printf_float+0xc2>
 80090c8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80090cc:	f240 80e0 	bls.w	8009290 <_printf_float+0x3c0>
 80090d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80090d4:	2200      	movs	r2, #0
 80090d6:	2300      	movs	r3, #0
 80090d8:	f7f7 fd0e 	bl	8000af8 <__aeabi_dcmpeq>
 80090dc:	2800      	cmp	r0, #0
 80090de:	d034      	beq.n	800914a <_printf_float+0x27a>
 80090e0:	4a37      	ldr	r2, [pc, #220]	; (80091c0 <_printf_float+0x2f0>)
 80090e2:	2301      	movs	r3, #1
 80090e4:	4631      	mov	r1, r6
 80090e6:	4628      	mov	r0, r5
 80090e8:	47b8      	blx	r7
 80090ea:	3001      	adds	r0, #1
 80090ec:	f43f af51 	beq.w	8008f92 <_printf_float+0xc2>
 80090f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80090f4:	429a      	cmp	r2, r3
 80090f6:	db02      	blt.n	80090fe <_printf_float+0x22e>
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	07d8      	lsls	r0, r3, #31
 80090fc:	d510      	bpl.n	8009120 <_printf_float+0x250>
 80090fe:	ee18 3a10 	vmov	r3, s16
 8009102:	4652      	mov	r2, sl
 8009104:	4631      	mov	r1, r6
 8009106:	4628      	mov	r0, r5
 8009108:	47b8      	blx	r7
 800910a:	3001      	adds	r0, #1
 800910c:	f43f af41 	beq.w	8008f92 <_printf_float+0xc2>
 8009110:	f04f 0800 	mov.w	r8, #0
 8009114:	f104 091a 	add.w	r9, r4, #26
 8009118:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800911a:	3b01      	subs	r3, #1
 800911c:	4543      	cmp	r3, r8
 800911e:	dc09      	bgt.n	8009134 <_printf_float+0x264>
 8009120:	6823      	ldr	r3, [r4, #0]
 8009122:	079b      	lsls	r3, r3, #30
 8009124:	f100 8105 	bmi.w	8009332 <_printf_float+0x462>
 8009128:	68e0      	ldr	r0, [r4, #12]
 800912a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800912c:	4298      	cmp	r0, r3
 800912e:	bfb8      	it	lt
 8009130:	4618      	movlt	r0, r3
 8009132:	e730      	b.n	8008f96 <_printf_float+0xc6>
 8009134:	2301      	movs	r3, #1
 8009136:	464a      	mov	r2, r9
 8009138:	4631      	mov	r1, r6
 800913a:	4628      	mov	r0, r5
 800913c:	47b8      	blx	r7
 800913e:	3001      	adds	r0, #1
 8009140:	f43f af27 	beq.w	8008f92 <_printf_float+0xc2>
 8009144:	f108 0801 	add.w	r8, r8, #1
 8009148:	e7e6      	b.n	8009118 <_printf_float+0x248>
 800914a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800914c:	2b00      	cmp	r3, #0
 800914e:	dc39      	bgt.n	80091c4 <_printf_float+0x2f4>
 8009150:	4a1b      	ldr	r2, [pc, #108]	; (80091c0 <_printf_float+0x2f0>)
 8009152:	2301      	movs	r3, #1
 8009154:	4631      	mov	r1, r6
 8009156:	4628      	mov	r0, r5
 8009158:	47b8      	blx	r7
 800915a:	3001      	adds	r0, #1
 800915c:	f43f af19 	beq.w	8008f92 <_printf_float+0xc2>
 8009160:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009164:	4313      	orrs	r3, r2
 8009166:	d102      	bne.n	800916e <_printf_float+0x29e>
 8009168:	6823      	ldr	r3, [r4, #0]
 800916a:	07d9      	lsls	r1, r3, #31
 800916c:	d5d8      	bpl.n	8009120 <_printf_float+0x250>
 800916e:	ee18 3a10 	vmov	r3, s16
 8009172:	4652      	mov	r2, sl
 8009174:	4631      	mov	r1, r6
 8009176:	4628      	mov	r0, r5
 8009178:	47b8      	blx	r7
 800917a:	3001      	adds	r0, #1
 800917c:	f43f af09 	beq.w	8008f92 <_printf_float+0xc2>
 8009180:	f04f 0900 	mov.w	r9, #0
 8009184:	f104 0a1a 	add.w	sl, r4, #26
 8009188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800918a:	425b      	negs	r3, r3
 800918c:	454b      	cmp	r3, r9
 800918e:	dc01      	bgt.n	8009194 <_printf_float+0x2c4>
 8009190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009192:	e792      	b.n	80090ba <_printf_float+0x1ea>
 8009194:	2301      	movs	r3, #1
 8009196:	4652      	mov	r2, sl
 8009198:	4631      	mov	r1, r6
 800919a:	4628      	mov	r0, r5
 800919c:	47b8      	blx	r7
 800919e:	3001      	adds	r0, #1
 80091a0:	f43f aef7 	beq.w	8008f92 <_printf_float+0xc2>
 80091a4:	f109 0901 	add.w	r9, r9, #1
 80091a8:	e7ee      	b.n	8009188 <_printf_float+0x2b8>
 80091aa:	bf00      	nop
 80091ac:	7fefffff 	.word	0x7fefffff
 80091b0:	0800b820 	.word	0x0800b820
 80091b4:	0800b824 	.word	0x0800b824
 80091b8:	0800b82c 	.word	0x0800b82c
 80091bc:	0800b828 	.word	0x0800b828
 80091c0:	0800b830 	.word	0x0800b830
 80091c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091c8:	429a      	cmp	r2, r3
 80091ca:	bfa8      	it	ge
 80091cc:	461a      	movge	r2, r3
 80091ce:	2a00      	cmp	r2, #0
 80091d0:	4691      	mov	r9, r2
 80091d2:	dc37      	bgt.n	8009244 <_printf_float+0x374>
 80091d4:	f04f 0b00 	mov.w	fp, #0
 80091d8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80091dc:	f104 021a 	add.w	r2, r4, #26
 80091e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80091e2:	9305      	str	r3, [sp, #20]
 80091e4:	eba3 0309 	sub.w	r3, r3, r9
 80091e8:	455b      	cmp	r3, fp
 80091ea:	dc33      	bgt.n	8009254 <_printf_float+0x384>
 80091ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f0:	429a      	cmp	r2, r3
 80091f2:	db3b      	blt.n	800926c <_printf_float+0x39c>
 80091f4:	6823      	ldr	r3, [r4, #0]
 80091f6:	07da      	lsls	r2, r3, #31
 80091f8:	d438      	bmi.n	800926c <_printf_float+0x39c>
 80091fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091fc:	9b05      	ldr	r3, [sp, #20]
 80091fe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	eba2 0901 	sub.w	r9, r2, r1
 8009206:	4599      	cmp	r9, r3
 8009208:	bfa8      	it	ge
 800920a:	4699      	movge	r9, r3
 800920c:	f1b9 0f00 	cmp.w	r9, #0
 8009210:	dc35      	bgt.n	800927e <_printf_float+0x3ae>
 8009212:	f04f 0800 	mov.w	r8, #0
 8009216:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800921a:	f104 0a1a 	add.w	sl, r4, #26
 800921e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	eba3 0309 	sub.w	r3, r3, r9
 8009228:	4543      	cmp	r3, r8
 800922a:	f77f af79 	ble.w	8009120 <_printf_float+0x250>
 800922e:	2301      	movs	r3, #1
 8009230:	4652      	mov	r2, sl
 8009232:	4631      	mov	r1, r6
 8009234:	4628      	mov	r0, r5
 8009236:	47b8      	blx	r7
 8009238:	3001      	adds	r0, #1
 800923a:	f43f aeaa 	beq.w	8008f92 <_printf_float+0xc2>
 800923e:	f108 0801 	add.w	r8, r8, #1
 8009242:	e7ec      	b.n	800921e <_printf_float+0x34e>
 8009244:	4613      	mov	r3, r2
 8009246:	4631      	mov	r1, r6
 8009248:	4642      	mov	r2, r8
 800924a:	4628      	mov	r0, r5
 800924c:	47b8      	blx	r7
 800924e:	3001      	adds	r0, #1
 8009250:	d1c0      	bne.n	80091d4 <_printf_float+0x304>
 8009252:	e69e      	b.n	8008f92 <_printf_float+0xc2>
 8009254:	2301      	movs	r3, #1
 8009256:	4631      	mov	r1, r6
 8009258:	4628      	mov	r0, r5
 800925a:	9205      	str	r2, [sp, #20]
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f ae97 	beq.w	8008f92 <_printf_float+0xc2>
 8009264:	9a05      	ldr	r2, [sp, #20]
 8009266:	f10b 0b01 	add.w	fp, fp, #1
 800926a:	e7b9      	b.n	80091e0 <_printf_float+0x310>
 800926c:	ee18 3a10 	vmov	r3, s16
 8009270:	4652      	mov	r2, sl
 8009272:	4631      	mov	r1, r6
 8009274:	4628      	mov	r0, r5
 8009276:	47b8      	blx	r7
 8009278:	3001      	adds	r0, #1
 800927a:	d1be      	bne.n	80091fa <_printf_float+0x32a>
 800927c:	e689      	b.n	8008f92 <_printf_float+0xc2>
 800927e:	9a05      	ldr	r2, [sp, #20]
 8009280:	464b      	mov	r3, r9
 8009282:	4442      	add	r2, r8
 8009284:	4631      	mov	r1, r6
 8009286:	4628      	mov	r0, r5
 8009288:	47b8      	blx	r7
 800928a:	3001      	adds	r0, #1
 800928c:	d1c1      	bne.n	8009212 <_printf_float+0x342>
 800928e:	e680      	b.n	8008f92 <_printf_float+0xc2>
 8009290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009292:	2a01      	cmp	r2, #1
 8009294:	dc01      	bgt.n	800929a <_printf_float+0x3ca>
 8009296:	07db      	lsls	r3, r3, #31
 8009298:	d538      	bpl.n	800930c <_printf_float+0x43c>
 800929a:	2301      	movs	r3, #1
 800929c:	4642      	mov	r2, r8
 800929e:	4631      	mov	r1, r6
 80092a0:	4628      	mov	r0, r5
 80092a2:	47b8      	blx	r7
 80092a4:	3001      	adds	r0, #1
 80092a6:	f43f ae74 	beq.w	8008f92 <_printf_float+0xc2>
 80092aa:	ee18 3a10 	vmov	r3, s16
 80092ae:	4652      	mov	r2, sl
 80092b0:	4631      	mov	r1, r6
 80092b2:	4628      	mov	r0, r5
 80092b4:	47b8      	blx	r7
 80092b6:	3001      	adds	r0, #1
 80092b8:	f43f ae6b 	beq.w	8008f92 <_printf_float+0xc2>
 80092bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80092c0:	2200      	movs	r2, #0
 80092c2:	2300      	movs	r3, #0
 80092c4:	f7f7 fc18 	bl	8000af8 <__aeabi_dcmpeq>
 80092c8:	b9d8      	cbnz	r0, 8009302 <_printf_float+0x432>
 80092ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092cc:	f108 0201 	add.w	r2, r8, #1
 80092d0:	3b01      	subs	r3, #1
 80092d2:	4631      	mov	r1, r6
 80092d4:	4628      	mov	r0, r5
 80092d6:	47b8      	blx	r7
 80092d8:	3001      	adds	r0, #1
 80092da:	d10e      	bne.n	80092fa <_printf_float+0x42a>
 80092dc:	e659      	b.n	8008f92 <_printf_float+0xc2>
 80092de:	2301      	movs	r3, #1
 80092e0:	4652      	mov	r2, sl
 80092e2:	4631      	mov	r1, r6
 80092e4:	4628      	mov	r0, r5
 80092e6:	47b8      	blx	r7
 80092e8:	3001      	adds	r0, #1
 80092ea:	f43f ae52 	beq.w	8008f92 <_printf_float+0xc2>
 80092ee:	f108 0801 	add.w	r8, r8, #1
 80092f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f4:	3b01      	subs	r3, #1
 80092f6:	4543      	cmp	r3, r8
 80092f8:	dcf1      	bgt.n	80092de <_printf_float+0x40e>
 80092fa:	464b      	mov	r3, r9
 80092fc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009300:	e6dc      	b.n	80090bc <_printf_float+0x1ec>
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	f104 0a1a 	add.w	sl, r4, #26
 800930a:	e7f2      	b.n	80092f2 <_printf_float+0x422>
 800930c:	2301      	movs	r3, #1
 800930e:	4642      	mov	r2, r8
 8009310:	e7df      	b.n	80092d2 <_printf_float+0x402>
 8009312:	2301      	movs	r3, #1
 8009314:	464a      	mov	r2, r9
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	f43f ae38 	beq.w	8008f92 <_printf_float+0xc2>
 8009322:	f108 0801 	add.w	r8, r8, #1
 8009326:	68e3      	ldr	r3, [r4, #12]
 8009328:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800932a:	1a5b      	subs	r3, r3, r1
 800932c:	4543      	cmp	r3, r8
 800932e:	dcf0      	bgt.n	8009312 <_printf_float+0x442>
 8009330:	e6fa      	b.n	8009128 <_printf_float+0x258>
 8009332:	f04f 0800 	mov.w	r8, #0
 8009336:	f104 0919 	add.w	r9, r4, #25
 800933a:	e7f4      	b.n	8009326 <_printf_float+0x456>

0800933c <_printf_common>:
 800933c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009340:	4616      	mov	r6, r2
 8009342:	4699      	mov	r9, r3
 8009344:	688a      	ldr	r2, [r1, #8]
 8009346:	690b      	ldr	r3, [r1, #16]
 8009348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800934c:	4293      	cmp	r3, r2
 800934e:	bfb8      	it	lt
 8009350:	4613      	movlt	r3, r2
 8009352:	6033      	str	r3, [r6, #0]
 8009354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009358:	4607      	mov	r7, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b10a      	cbz	r2, 8009362 <_printf_common+0x26>
 800935e:	3301      	adds	r3, #1
 8009360:	6033      	str	r3, [r6, #0]
 8009362:	6823      	ldr	r3, [r4, #0]
 8009364:	0699      	lsls	r1, r3, #26
 8009366:	bf42      	ittt	mi
 8009368:	6833      	ldrmi	r3, [r6, #0]
 800936a:	3302      	addmi	r3, #2
 800936c:	6033      	strmi	r3, [r6, #0]
 800936e:	6825      	ldr	r5, [r4, #0]
 8009370:	f015 0506 	ands.w	r5, r5, #6
 8009374:	d106      	bne.n	8009384 <_printf_common+0x48>
 8009376:	f104 0a19 	add.w	sl, r4, #25
 800937a:	68e3      	ldr	r3, [r4, #12]
 800937c:	6832      	ldr	r2, [r6, #0]
 800937e:	1a9b      	subs	r3, r3, r2
 8009380:	42ab      	cmp	r3, r5
 8009382:	dc26      	bgt.n	80093d2 <_printf_common+0x96>
 8009384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009388:	1e13      	subs	r3, r2, #0
 800938a:	6822      	ldr	r2, [r4, #0]
 800938c:	bf18      	it	ne
 800938e:	2301      	movne	r3, #1
 8009390:	0692      	lsls	r2, r2, #26
 8009392:	d42b      	bmi.n	80093ec <_printf_common+0xb0>
 8009394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009398:	4649      	mov	r1, r9
 800939a:	4638      	mov	r0, r7
 800939c:	47c0      	blx	r8
 800939e:	3001      	adds	r0, #1
 80093a0:	d01e      	beq.n	80093e0 <_printf_common+0xa4>
 80093a2:	6823      	ldr	r3, [r4, #0]
 80093a4:	68e5      	ldr	r5, [r4, #12]
 80093a6:	6832      	ldr	r2, [r6, #0]
 80093a8:	f003 0306 	and.w	r3, r3, #6
 80093ac:	2b04      	cmp	r3, #4
 80093ae:	bf08      	it	eq
 80093b0:	1aad      	subeq	r5, r5, r2
 80093b2:	68a3      	ldr	r3, [r4, #8]
 80093b4:	6922      	ldr	r2, [r4, #16]
 80093b6:	bf0c      	ite	eq
 80093b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80093bc:	2500      	movne	r5, #0
 80093be:	4293      	cmp	r3, r2
 80093c0:	bfc4      	itt	gt
 80093c2:	1a9b      	subgt	r3, r3, r2
 80093c4:	18ed      	addgt	r5, r5, r3
 80093c6:	2600      	movs	r6, #0
 80093c8:	341a      	adds	r4, #26
 80093ca:	42b5      	cmp	r5, r6
 80093cc:	d11a      	bne.n	8009404 <_printf_common+0xc8>
 80093ce:	2000      	movs	r0, #0
 80093d0:	e008      	b.n	80093e4 <_printf_common+0xa8>
 80093d2:	2301      	movs	r3, #1
 80093d4:	4652      	mov	r2, sl
 80093d6:	4649      	mov	r1, r9
 80093d8:	4638      	mov	r0, r7
 80093da:	47c0      	blx	r8
 80093dc:	3001      	adds	r0, #1
 80093de:	d103      	bne.n	80093e8 <_printf_common+0xac>
 80093e0:	f04f 30ff 	mov.w	r0, #4294967295
 80093e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093e8:	3501      	adds	r5, #1
 80093ea:	e7c6      	b.n	800937a <_printf_common+0x3e>
 80093ec:	18e1      	adds	r1, r4, r3
 80093ee:	1c5a      	adds	r2, r3, #1
 80093f0:	2030      	movs	r0, #48	; 0x30
 80093f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093f6:	4422      	add	r2, r4
 80093f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009400:	3302      	adds	r3, #2
 8009402:	e7c7      	b.n	8009394 <_printf_common+0x58>
 8009404:	2301      	movs	r3, #1
 8009406:	4622      	mov	r2, r4
 8009408:	4649      	mov	r1, r9
 800940a:	4638      	mov	r0, r7
 800940c:	47c0      	blx	r8
 800940e:	3001      	adds	r0, #1
 8009410:	d0e6      	beq.n	80093e0 <_printf_common+0xa4>
 8009412:	3601      	adds	r6, #1
 8009414:	e7d9      	b.n	80093ca <_printf_common+0x8e>
	...

08009418 <_printf_i>:
 8009418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800941c:	460c      	mov	r4, r1
 800941e:	4691      	mov	r9, r2
 8009420:	7e27      	ldrb	r7, [r4, #24]
 8009422:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009424:	2f78      	cmp	r7, #120	; 0x78
 8009426:	4680      	mov	r8, r0
 8009428:	469a      	mov	sl, r3
 800942a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800942e:	d807      	bhi.n	8009440 <_printf_i+0x28>
 8009430:	2f62      	cmp	r7, #98	; 0x62
 8009432:	d80a      	bhi.n	800944a <_printf_i+0x32>
 8009434:	2f00      	cmp	r7, #0
 8009436:	f000 80d8 	beq.w	80095ea <_printf_i+0x1d2>
 800943a:	2f58      	cmp	r7, #88	; 0x58
 800943c:	f000 80a3 	beq.w	8009586 <_printf_i+0x16e>
 8009440:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009448:	e03a      	b.n	80094c0 <_printf_i+0xa8>
 800944a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800944e:	2b15      	cmp	r3, #21
 8009450:	d8f6      	bhi.n	8009440 <_printf_i+0x28>
 8009452:	a001      	add	r0, pc, #4	; (adr r0, 8009458 <_printf_i+0x40>)
 8009454:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009458:	080094b1 	.word	0x080094b1
 800945c:	080094c5 	.word	0x080094c5
 8009460:	08009441 	.word	0x08009441
 8009464:	08009441 	.word	0x08009441
 8009468:	08009441 	.word	0x08009441
 800946c:	08009441 	.word	0x08009441
 8009470:	080094c5 	.word	0x080094c5
 8009474:	08009441 	.word	0x08009441
 8009478:	08009441 	.word	0x08009441
 800947c:	08009441 	.word	0x08009441
 8009480:	08009441 	.word	0x08009441
 8009484:	080095d1 	.word	0x080095d1
 8009488:	080094f5 	.word	0x080094f5
 800948c:	080095b3 	.word	0x080095b3
 8009490:	08009441 	.word	0x08009441
 8009494:	08009441 	.word	0x08009441
 8009498:	080095f3 	.word	0x080095f3
 800949c:	08009441 	.word	0x08009441
 80094a0:	080094f5 	.word	0x080094f5
 80094a4:	08009441 	.word	0x08009441
 80094a8:	08009441 	.word	0x08009441
 80094ac:	080095bb 	.word	0x080095bb
 80094b0:	680b      	ldr	r3, [r1, #0]
 80094b2:	1d1a      	adds	r2, r3, #4
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	600a      	str	r2, [r1, #0]
 80094b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80094bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80094c0:	2301      	movs	r3, #1
 80094c2:	e0a3      	b.n	800960c <_printf_i+0x1f4>
 80094c4:	6825      	ldr	r5, [r4, #0]
 80094c6:	6808      	ldr	r0, [r1, #0]
 80094c8:	062e      	lsls	r6, r5, #24
 80094ca:	f100 0304 	add.w	r3, r0, #4
 80094ce:	d50a      	bpl.n	80094e6 <_printf_i+0xce>
 80094d0:	6805      	ldr	r5, [r0, #0]
 80094d2:	600b      	str	r3, [r1, #0]
 80094d4:	2d00      	cmp	r5, #0
 80094d6:	da03      	bge.n	80094e0 <_printf_i+0xc8>
 80094d8:	232d      	movs	r3, #45	; 0x2d
 80094da:	426d      	negs	r5, r5
 80094dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e0:	485e      	ldr	r0, [pc, #376]	; (800965c <_printf_i+0x244>)
 80094e2:	230a      	movs	r3, #10
 80094e4:	e019      	b.n	800951a <_printf_i+0x102>
 80094e6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094ea:	6805      	ldr	r5, [r0, #0]
 80094ec:	600b      	str	r3, [r1, #0]
 80094ee:	bf18      	it	ne
 80094f0:	b22d      	sxthne	r5, r5
 80094f2:	e7ef      	b.n	80094d4 <_printf_i+0xbc>
 80094f4:	680b      	ldr	r3, [r1, #0]
 80094f6:	6825      	ldr	r5, [r4, #0]
 80094f8:	1d18      	adds	r0, r3, #4
 80094fa:	6008      	str	r0, [r1, #0]
 80094fc:	0628      	lsls	r0, r5, #24
 80094fe:	d501      	bpl.n	8009504 <_printf_i+0xec>
 8009500:	681d      	ldr	r5, [r3, #0]
 8009502:	e002      	b.n	800950a <_printf_i+0xf2>
 8009504:	0669      	lsls	r1, r5, #25
 8009506:	d5fb      	bpl.n	8009500 <_printf_i+0xe8>
 8009508:	881d      	ldrh	r5, [r3, #0]
 800950a:	4854      	ldr	r0, [pc, #336]	; (800965c <_printf_i+0x244>)
 800950c:	2f6f      	cmp	r7, #111	; 0x6f
 800950e:	bf0c      	ite	eq
 8009510:	2308      	moveq	r3, #8
 8009512:	230a      	movne	r3, #10
 8009514:	2100      	movs	r1, #0
 8009516:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800951a:	6866      	ldr	r6, [r4, #4]
 800951c:	60a6      	str	r6, [r4, #8]
 800951e:	2e00      	cmp	r6, #0
 8009520:	bfa2      	ittt	ge
 8009522:	6821      	ldrge	r1, [r4, #0]
 8009524:	f021 0104 	bicge.w	r1, r1, #4
 8009528:	6021      	strge	r1, [r4, #0]
 800952a:	b90d      	cbnz	r5, 8009530 <_printf_i+0x118>
 800952c:	2e00      	cmp	r6, #0
 800952e:	d04d      	beq.n	80095cc <_printf_i+0x1b4>
 8009530:	4616      	mov	r6, r2
 8009532:	fbb5 f1f3 	udiv	r1, r5, r3
 8009536:	fb03 5711 	mls	r7, r3, r1, r5
 800953a:	5dc7      	ldrb	r7, [r0, r7]
 800953c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009540:	462f      	mov	r7, r5
 8009542:	42bb      	cmp	r3, r7
 8009544:	460d      	mov	r5, r1
 8009546:	d9f4      	bls.n	8009532 <_printf_i+0x11a>
 8009548:	2b08      	cmp	r3, #8
 800954a:	d10b      	bne.n	8009564 <_printf_i+0x14c>
 800954c:	6823      	ldr	r3, [r4, #0]
 800954e:	07df      	lsls	r7, r3, #31
 8009550:	d508      	bpl.n	8009564 <_printf_i+0x14c>
 8009552:	6923      	ldr	r3, [r4, #16]
 8009554:	6861      	ldr	r1, [r4, #4]
 8009556:	4299      	cmp	r1, r3
 8009558:	bfde      	ittt	le
 800955a:	2330      	movle	r3, #48	; 0x30
 800955c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009560:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009564:	1b92      	subs	r2, r2, r6
 8009566:	6122      	str	r2, [r4, #16]
 8009568:	f8cd a000 	str.w	sl, [sp]
 800956c:	464b      	mov	r3, r9
 800956e:	aa03      	add	r2, sp, #12
 8009570:	4621      	mov	r1, r4
 8009572:	4640      	mov	r0, r8
 8009574:	f7ff fee2 	bl	800933c <_printf_common>
 8009578:	3001      	adds	r0, #1
 800957a:	d14c      	bne.n	8009616 <_printf_i+0x1fe>
 800957c:	f04f 30ff 	mov.w	r0, #4294967295
 8009580:	b004      	add	sp, #16
 8009582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009586:	4835      	ldr	r0, [pc, #212]	; (800965c <_printf_i+0x244>)
 8009588:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800958c:	6823      	ldr	r3, [r4, #0]
 800958e:	680e      	ldr	r6, [r1, #0]
 8009590:	061f      	lsls	r7, r3, #24
 8009592:	f856 5b04 	ldr.w	r5, [r6], #4
 8009596:	600e      	str	r6, [r1, #0]
 8009598:	d514      	bpl.n	80095c4 <_printf_i+0x1ac>
 800959a:	07d9      	lsls	r1, r3, #31
 800959c:	bf44      	itt	mi
 800959e:	f043 0320 	orrmi.w	r3, r3, #32
 80095a2:	6023      	strmi	r3, [r4, #0]
 80095a4:	b91d      	cbnz	r5, 80095ae <_printf_i+0x196>
 80095a6:	6823      	ldr	r3, [r4, #0]
 80095a8:	f023 0320 	bic.w	r3, r3, #32
 80095ac:	6023      	str	r3, [r4, #0]
 80095ae:	2310      	movs	r3, #16
 80095b0:	e7b0      	b.n	8009514 <_printf_i+0xfc>
 80095b2:	6823      	ldr	r3, [r4, #0]
 80095b4:	f043 0320 	orr.w	r3, r3, #32
 80095b8:	6023      	str	r3, [r4, #0]
 80095ba:	2378      	movs	r3, #120	; 0x78
 80095bc:	4828      	ldr	r0, [pc, #160]	; (8009660 <_printf_i+0x248>)
 80095be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80095c2:	e7e3      	b.n	800958c <_printf_i+0x174>
 80095c4:	065e      	lsls	r6, r3, #25
 80095c6:	bf48      	it	mi
 80095c8:	b2ad      	uxthmi	r5, r5
 80095ca:	e7e6      	b.n	800959a <_printf_i+0x182>
 80095cc:	4616      	mov	r6, r2
 80095ce:	e7bb      	b.n	8009548 <_printf_i+0x130>
 80095d0:	680b      	ldr	r3, [r1, #0]
 80095d2:	6826      	ldr	r6, [r4, #0]
 80095d4:	6960      	ldr	r0, [r4, #20]
 80095d6:	1d1d      	adds	r5, r3, #4
 80095d8:	600d      	str	r5, [r1, #0]
 80095da:	0635      	lsls	r5, r6, #24
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	d501      	bpl.n	80095e4 <_printf_i+0x1cc>
 80095e0:	6018      	str	r0, [r3, #0]
 80095e2:	e002      	b.n	80095ea <_printf_i+0x1d2>
 80095e4:	0671      	lsls	r1, r6, #25
 80095e6:	d5fb      	bpl.n	80095e0 <_printf_i+0x1c8>
 80095e8:	8018      	strh	r0, [r3, #0]
 80095ea:	2300      	movs	r3, #0
 80095ec:	6123      	str	r3, [r4, #16]
 80095ee:	4616      	mov	r6, r2
 80095f0:	e7ba      	b.n	8009568 <_printf_i+0x150>
 80095f2:	680b      	ldr	r3, [r1, #0]
 80095f4:	1d1a      	adds	r2, r3, #4
 80095f6:	600a      	str	r2, [r1, #0]
 80095f8:	681e      	ldr	r6, [r3, #0]
 80095fa:	6862      	ldr	r2, [r4, #4]
 80095fc:	2100      	movs	r1, #0
 80095fe:	4630      	mov	r0, r6
 8009600:	f7f6 fe06 	bl	8000210 <memchr>
 8009604:	b108      	cbz	r0, 800960a <_printf_i+0x1f2>
 8009606:	1b80      	subs	r0, r0, r6
 8009608:	6060      	str	r0, [r4, #4]
 800960a:	6863      	ldr	r3, [r4, #4]
 800960c:	6123      	str	r3, [r4, #16]
 800960e:	2300      	movs	r3, #0
 8009610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009614:	e7a8      	b.n	8009568 <_printf_i+0x150>
 8009616:	6923      	ldr	r3, [r4, #16]
 8009618:	4632      	mov	r2, r6
 800961a:	4649      	mov	r1, r9
 800961c:	4640      	mov	r0, r8
 800961e:	47d0      	blx	sl
 8009620:	3001      	adds	r0, #1
 8009622:	d0ab      	beq.n	800957c <_printf_i+0x164>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	079b      	lsls	r3, r3, #30
 8009628:	d413      	bmi.n	8009652 <_printf_i+0x23a>
 800962a:	68e0      	ldr	r0, [r4, #12]
 800962c:	9b03      	ldr	r3, [sp, #12]
 800962e:	4298      	cmp	r0, r3
 8009630:	bfb8      	it	lt
 8009632:	4618      	movlt	r0, r3
 8009634:	e7a4      	b.n	8009580 <_printf_i+0x168>
 8009636:	2301      	movs	r3, #1
 8009638:	4632      	mov	r2, r6
 800963a:	4649      	mov	r1, r9
 800963c:	4640      	mov	r0, r8
 800963e:	47d0      	blx	sl
 8009640:	3001      	adds	r0, #1
 8009642:	d09b      	beq.n	800957c <_printf_i+0x164>
 8009644:	3501      	adds	r5, #1
 8009646:	68e3      	ldr	r3, [r4, #12]
 8009648:	9903      	ldr	r1, [sp, #12]
 800964a:	1a5b      	subs	r3, r3, r1
 800964c:	42ab      	cmp	r3, r5
 800964e:	dcf2      	bgt.n	8009636 <_printf_i+0x21e>
 8009650:	e7eb      	b.n	800962a <_printf_i+0x212>
 8009652:	2500      	movs	r5, #0
 8009654:	f104 0619 	add.w	r6, r4, #25
 8009658:	e7f5      	b.n	8009646 <_printf_i+0x22e>
 800965a:	bf00      	nop
 800965c:	0800b832 	.word	0x0800b832
 8009660:	0800b843 	.word	0x0800b843

08009664 <iprintf>:
 8009664:	b40f      	push	{r0, r1, r2, r3}
 8009666:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <iprintf+0x2c>)
 8009668:	b513      	push	{r0, r1, r4, lr}
 800966a:	681c      	ldr	r4, [r3, #0]
 800966c:	b124      	cbz	r4, 8009678 <iprintf+0x14>
 800966e:	69a3      	ldr	r3, [r4, #24]
 8009670:	b913      	cbnz	r3, 8009678 <iprintf+0x14>
 8009672:	4620      	mov	r0, r4
 8009674:	f000 fee0 	bl	800a438 <__sinit>
 8009678:	ab05      	add	r3, sp, #20
 800967a:	9a04      	ldr	r2, [sp, #16]
 800967c:	68a1      	ldr	r1, [r4, #8]
 800967e:	9301      	str	r3, [sp, #4]
 8009680:	4620      	mov	r0, r4
 8009682:	f001 fbf7 	bl	800ae74 <_vfiprintf_r>
 8009686:	b002      	add	sp, #8
 8009688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800968c:	b004      	add	sp, #16
 800968e:	4770      	bx	lr
 8009690:	2000000c 	.word	0x2000000c

08009694 <quorem>:
 8009694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	6903      	ldr	r3, [r0, #16]
 800969a:	690c      	ldr	r4, [r1, #16]
 800969c:	42a3      	cmp	r3, r4
 800969e:	4607      	mov	r7, r0
 80096a0:	f2c0 8081 	blt.w	80097a6 <quorem+0x112>
 80096a4:	3c01      	subs	r4, #1
 80096a6:	f101 0814 	add.w	r8, r1, #20
 80096aa:	f100 0514 	add.w	r5, r0, #20
 80096ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096b2:	9301      	str	r3, [sp, #4]
 80096b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096bc:	3301      	adds	r3, #1
 80096be:	429a      	cmp	r2, r3
 80096c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80096cc:	d331      	bcc.n	8009732 <quorem+0x9e>
 80096ce:	f04f 0e00 	mov.w	lr, #0
 80096d2:	4640      	mov	r0, r8
 80096d4:	46ac      	mov	ip, r5
 80096d6:	46f2      	mov	sl, lr
 80096d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80096dc:	b293      	uxth	r3, r2
 80096de:	fb06 e303 	mla	r3, r6, r3, lr
 80096e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	ebaa 0303 	sub.w	r3, sl, r3
 80096ec:	0c12      	lsrs	r2, r2, #16
 80096ee:	f8dc a000 	ldr.w	sl, [ip]
 80096f2:	fb06 e202 	mla	r2, r6, r2, lr
 80096f6:	fa13 f38a 	uxtah	r3, r3, sl
 80096fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096fe:	fa1f fa82 	uxth.w	sl, r2
 8009702:	f8dc 2000 	ldr.w	r2, [ip]
 8009706:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800970a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800970e:	b29b      	uxth	r3, r3
 8009710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009714:	4581      	cmp	r9, r0
 8009716:	f84c 3b04 	str.w	r3, [ip], #4
 800971a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800971e:	d2db      	bcs.n	80096d8 <quorem+0x44>
 8009720:	f855 300b 	ldr.w	r3, [r5, fp]
 8009724:	b92b      	cbnz	r3, 8009732 <quorem+0x9e>
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	3b04      	subs	r3, #4
 800972a:	429d      	cmp	r5, r3
 800972c:	461a      	mov	r2, r3
 800972e:	d32e      	bcc.n	800978e <quorem+0xfa>
 8009730:	613c      	str	r4, [r7, #16]
 8009732:	4638      	mov	r0, r7
 8009734:	f001 f9ba 	bl	800aaac <__mcmp>
 8009738:	2800      	cmp	r0, #0
 800973a:	db24      	blt.n	8009786 <quorem+0xf2>
 800973c:	3601      	adds	r6, #1
 800973e:	4628      	mov	r0, r5
 8009740:	f04f 0c00 	mov.w	ip, #0
 8009744:	f858 2b04 	ldr.w	r2, [r8], #4
 8009748:	f8d0 e000 	ldr.w	lr, [r0]
 800974c:	b293      	uxth	r3, r2
 800974e:	ebac 0303 	sub.w	r3, ip, r3
 8009752:	0c12      	lsrs	r2, r2, #16
 8009754:	fa13 f38e 	uxtah	r3, r3, lr
 8009758:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800975c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009760:	b29b      	uxth	r3, r3
 8009762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009766:	45c1      	cmp	r9, r8
 8009768:	f840 3b04 	str.w	r3, [r0], #4
 800976c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009770:	d2e8      	bcs.n	8009744 <quorem+0xb0>
 8009772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009776:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800977a:	b922      	cbnz	r2, 8009786 <quorem+0xf2>
 800977c:	3b04      	subs	r3, #4
 800977e:	429d      	cmp	r5, r3
 8009780:	461a      	mov	r2, r3
 8009782:	d30a      	bcc.n	800979a <quorem+0x106>
 8009784:	613c      	str	r4, [r7, #16]
 8009786:	4630      	mov	r0, r6
 8009788:	b003      	add	sp, #12
 800978a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800978e:	6812      	ldr	r2, [r2, #0]
 8009790:	3b04      	subs	r3, #4
 8009792:	2a00      	cmp	r2, #0
 8009794:	d1cc      	bne.n	8009730 <quorem+0x9c>
 8009796:	3c01      	subs	r4, #1
 8009798:	e7c7      	b.n	800972a <quorem+0x96>
 800979a:	6812      	ldr	r2, [r2, #0]
 800979c:	3b04      	subs	r3, #4
 800979e:	2a00      	cmp	r2, #0
 80097a0:	d1f0      	bne.n	8009784 <quorem+0xf0>
 80097a2:	3c01      	subs	r4, #1
 80097a4:	e7eb      	b.n	800977e <quorem+0xea>
 80097a6:	2000      	movs	r0, #0
 80097a8:	e7ee      	b.n	8009788 <quorem+0xf4>
 80097aa:	0000      	movs	r0, r0
 80097ac:	0000      	movs	r0, r0
	...

080097b0 <_dtoa_r>:
 80097b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097b4:	ed2d 8b02 	vpush	{d8}
 80097b8:	ec57 6b10 	vmov	r6, r7, d0
 80097bc:	b095      	sub	sp, #84	; 0x54
 80097be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097c4:	9105      	str	r1, [sp, #20]
 80097c6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80097ca:	4604      	mov	r4, r0
 80097cc:	9209      	str	r2, [sp, #36]	; 0x24
 80097ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80097d0:	b975      	cbnz	r5, 80097f0 <_dtoa_r+0x40>
 80097d2:	2010      	movs	r0, #16
 80097d4:	f000 fed6 	bl	800a584 <malloc>
 80097d8:	4602      	mov	r2, r0
 80097da:	6260      	str	r0, [r4, #36]	; 0x24
 80097dc:	b920      	cbnz	r0, 80097e8 <_dtoa_r+0x38>
 80097de:	4bb2      	ldr	r3, [pc, #712]	; (8009aa8 <_dtoa_r+0x2f8>)
 80097e0:	21ea      	movs	r1, #234	; 0xea
 80097e2:	48b2      	ldr	r0, [pc, #712]	; (8009aac <_dtoa_r+0x2fc>)
 80097e4:	f001 fd9c 	bl	800b320 <__assert_func>
 80097e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097ec:	6005      	str	r5, [r0, #0]
 80097ee:	60c5      	str	r5, [r0, #12]
 80097f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097f2:	6819      	ldr	r1, [r3, #0]
 80097f4:	b151      	cbz	r1, 800980c <_dtoa_r+0x5c>
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	604a      	str	r2, [r1, #4]
 80097fa:	2301      	movs	r3, #1
 80097fc:	4093      	lsls	r3, r2
 80097fe:	608b      	str	r3, [r1, #8]
 8009800:	4620      	mov	r0, r4
 8009802:	f000 ff15 	bl	800a630 <_Bfree>
 8009806:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	1e3b      	subs	r3, r7, #0
 800980e:	bfb9      	ittee	lt
 8009810:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009814:	9303      	strlt	r3, [sp, #12]
 8009816:	2300      	movge	r3, #0
 8009818:	f8c8 3000 	strge.w	r3, [r8]
 800981c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009820:	4ba3      	ldr	r3, [pc, #652]	; (8009ab0 <_dtoa_r+0x300>)
 8009822:	bfbc      	itt	lt
 8009824:	2201      	movlt	r2, #1
 8009826:	f8c8 2000 	strlt.w	r2, [r8]
 800982a:	ea33 0309 	bics.w	r3, r3, r9
 800982e:	d11b      	bne.n	8009868 <_dtoa_r+0xb8>
 8009830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009832:	f242 730f 	movw	r3, #9999	; 0x270f
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800983c:	4333      	orrs	r3, r6
 800983e:	f000 857a 	beq.w	800a336 <_dtoa_r+0xb86>
 8009842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009844:	b963      	cbnz	r3, 8009860 <_dtoa_r+0xb0>
 8009846:	4b9b      	ldr	r3, [pc, #620]	; (8009ab4 <_dtoa_r+0x304>)
 8009848:	e024      	b.n	8009894 <_dtoa_r+0xe4>
 800984a:	4b9b      	ldr	r3, [pc, #620]	; (8009ab8 <_dtoa_r+0x308>)
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	3308      	adds	r3, #8
 8009850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009852:	6013      	str	r3, [r2, #0]
 8009854:	9800      	ldr	r0, [sp, #0]
 8009856:	b015      	add	sp, #84	; 0x54
 8009858:	ecbd 8b02 	vpop	{d8}
 800985c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009860:	4b94      	ldr	r3, [pc, #592]	; (8009ab4 <_dtoa_r+0x304>)
 8009862:	9300      	str	r3, [sp, #0]
 8009864:	3303      	adds	r3, #3
 8009866:	e7f3      	b.n	8009850 <_dtoa_r+0xa0>
 8009868:	ed9d 7b02 	vldr	d7, [sp, #8]
 800986c:	2200      	movs	r2, #0
 800986e:	ec51 0b17 	vmov	r0, r1, d7
 8009872:	2300      	movs	r3, #0
 8009874:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009878:	f7f7 f93e 	bl	8000af8 <__aeabi_dcmpeq>
 800987c:	4680      	mov	r8, r0
 800987e:	b158      	cbz	r0, 8009898 <_dtoa_r+0xe8>
 8009880:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009882:	2301      	movs	r3, #1
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009888:	2b00      	cmp	r3, #0
 800988a:	f000 8551 	beq.w	800a330 <_dtoa_r+0xb80>
 800988e:	488b      	ldr	r0, [pc, #556]	; (8009abc <_dtoa_r+0x30c>)
 8009890:	6018      	str	r0, [r3, #0]
 8009892:	1e43      	subs	r3, r0, #1
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	e7dd      	b.n	8009854 <_dtoa_r+0xa4>
 8009898:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800989c:	aa12      	add	r2, sp, #72	; 0x48
 800989e:	a913      	add	r1, sp, #76	; 0x4c
 80098a0:	4620      	mov	r0, r4
 80098a2:	f001 f9a7 	bl	800abf4 <__d2b>
 80098a6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098aa:	4683      	mov	fp, r0
 80098ac:	2d00      	cmp	r5, #0
 80098ae:	d07c      	beq.n	80099aa <_dtoa_r+0x1fa>
 80098b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80098b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098ba:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80098be:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098ca:	4b7d      	ldr	r3, [pc, #500]	; (8009ac0 <_dtoa_r+0x310>)
 80098cc:	2200      	movs	r2, #0
 80098ce:	4630      	mov	r0, r6
 80098d0:	4639      	mov	r1, r7
 80098d2:	f7f6 fcf1 	bl	80002b8 <__aeabi_dsub>
 80098d6:	a36e      	add	r3, pc, #440	; (adr r3, 8009a90 <_dtoa_r+0x2e0>)
 80098d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098dc:	f7f6 fea4 	bl	8000628 <__aeabi_dmul>
 80098e0:	a36d      	add	r3, pc, #436	; (adr r3, 8009a98 <_dtoa_r+0x2e8>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	f7f6 fce9 	bl	80002bc <__adddf3>
 80098ea:	4606      	mov	r6, r0
 80098ec:	4628      	mov	r0, r5
 80098ee:	460f      	mov	r7, r1
 80098f0:	f7f6 fe30 	bl	8000554 <__aeabi_i2d>
 80098f4:	a36a      	add	r3, pc, #424	; (adr r3, 8009aa0 <_dtoa_r+0x2f0>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 fe95 	bl	8000628 <__aeabi_dmul>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4630      	mov	r0, r6
 8009904:	4639      	mov	r1, r7
 8009906:	f7f6 fcd9 	bl	80002bc <__adddf3>
 800990a:	4606      	mov	r6, r0
 800990c:	460f      	mov	r7, r1
 800990e:	f7f7 f93b 	bl	8000b88 <__aeabi_d2iz>
 8009912:	2200      	movs	r2, #0
 8009914:	4682      	mov	sl, r0
 8009916:	2300      	movs	r3, #0
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f7 f8f6 	bl	8000b0c <__aeabi_dcmplt>
 8009920:	b148      	cbz	r0, 8009936 <_dtoa_r+0x186>
 8009922:	4650      	mov	r0, sl
 8009924:	f7f6 fe16 	bl	8000554 <__aeabi_i2d>
 8009928:	4632      	mov	r2, r6
 800992a:	463b      	mov	r3, r7
 800992c:	f7f7 f8e4 	bl	8000af8 <__aeabi_dcmpeq>
 8009930:	b908      	cbnz	r0, 8009936 <_dtoa_r+0x186>
 8009932:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009936:	f1ba 0f16 	cmp.w	sl, #22
 800993a:	d854      	bhi.n	80099e6 <_dtoa_r+0x236>
 800993c:	4b61      	ldr	r3, [pc, #388]	; (8009ac4 <_dtoa_r+0x314>)
 800993e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800994a:	f7f7 f8df 	bl	8000b0c <__aeabi_dcmplt>
 800994e:	2800      	cmp	r0, #0
 8009950:	d04b      	beq.n	80099ea <_dtoa_r+0x23a>
 8009952:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009956:	2300      	movs	r3, #0
 8009958:	930e      	str	r3, [sp, #56]	; 0x38
 800995a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800995c:	1b5d      	subs	r5, r3, r5
 800995e:	1e6b      	subs	r3, r5, #1
 8009960:	9304      	str	r3, [sp, #16]
 8009962:	bf43      	ittte	mi
 8009964:	2300      	movmi	r3, #0
 8009966:	f1c5 0801 	rsbmi	r8, r5, #1
 800996a:	9304      	strmi	r3, [sp, #16]
 800996c:	f04f 0800 	movpl.w	r8, #0
 8009970:	f1ba 0f00 	cmp.w	sl, #0
 8009974:	db3b      	blt.n	80099ee <_dtoa_r+0x23e>
 8009976:	9b04      	ldr	r3, [sp, #16]
 8009978:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800997c:	4453      	add	r3, sl
 800997e:	9304      	str	r3, [sp, #16]
 8009980:	2300      	movs	r3, #0
 8009982:	9306      	str	r3, [sp, #24]
 8009984:	9b05      	ldr	r3, [sp, #20]
 8009986:	2b09      	cmp	r3, #9
 8009988:	d869      	bhi.n	8009a5e <_dtoa_r+0x2ae>
 800998a:	2b05      	cmp	r3, #5
 800998c:	bfc4      	itt	gt
 800998e:	3b04      	subgt	r3, #4
 8009990:	9305      	strgt	r3, [sp, #20]
 8009992:	9b05      	ldr	r3, [sp, #20]
 8009994:	f1a3 0302 	sub.w	r3, r3, #2
 8009998:	bfcc      	ite	gt
 800999a:	2500      	movgt	r5, #0
 800999c:	2501      	movle	r5, #1
 800999e:	2b03      	cmp	r3, #3
 80099a0:	d869      	bhi.n	8009a76 <_dtoa_r+0x2c6>
 80099a2:	e8df f003 	tbb	[pc, r3]
 80099a6:	4e2c      	.short	0x4e2c
 80099a8:	5a4c      	.short	0x5a4c
 80099aa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80099ae:	441d      	add	r5, r3
 80099b0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099b4:	2b20      	cmp	r3, #32
 80099b6:	bfc1      	itttt	gt
 80099b8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099bc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099c0:	fa09 f303 	lslgt.w	r3, r9, r3
 80099c4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099c8:	bfda      	itte	le
 80099ca:	f1c3 0320 	rsble	r3, r3, #32
 80099ce:	fa06 f003 	lslle.w	r0, r6, r3
 80099d2:	4318      	orrgt	r0, r3
 80099d4:	f7f6 fdae 	bl	8000534 <__aeabi_ui2d>
 80099d8:	2301      	movs	r3, #1
 80099da:	4606      	mov	r6, r0
 80099dc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80099e0:	3d01      	subs	r5, #1
 80099e2:	9310      	str	r3, [sp, #64]	; 0x40
 80099e4:	e771      	b.n	80098ca <_dtoa_r+0x11a>
 80099e6:	2301      	movs	r3, #1
 80099e8:	e7b6      	b.n	8009958 <_dtoa_r+0x1a8>
 80099ea:	900e      	str	r0, [sp, #56]	; 0x38
 80099ec:	e7b5      	b.n	800995a <_dtoa_r+0x1aa>
 80099ee:	f1ca 0300 	rsb	r3, sl, #0
 80099f2:	9306      	str	r3, [sp, #24]
 80099f4:	2300      	movs	r3, #0
 80099f6:	eba8 080a 	sub.w	r8, r8, sl
 80099fa:	930d      	str	r3, [sp, #52]	; 0x34
 80099fc:	e7c2      	b.n	8009984 <_dtoa_r+0x1d4>
 80099fe:	2300      	movs	r3, #0
 8009a00:	9308      	str	r3, [sp, #32]
 8009a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	dc39      	bgt.n	8009a7c <_dtoa_r+0x2cc>
 8009a08:	f04f 0901 	mov.w	r9, #1
 8009a0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a10:	464b      	mov	r3, r9
 8009a12:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009a16:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a18:	2200      	movs	r2, #0
 8009a1a:	6042      	str	r2, [r0, #4]
 8009a1c:	2204      	movs	r2, #4
 8009a1e:	f102 0614 	add.w	r6, r2, #20
 8009a22:	429e      	cmp	r6, r3
 8009a24:	6841      	ldr	r1, [r0, #4]
 8009a26:	d92f      	bls.n	8009a88 <_dtoa_r+0x2d8>
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 fdc1 	bl	800a5b0 <_Balloc>
 8009a2e:	9000      	str	r0, [sp, #0]
 8009a30:	2800      	cmp	r0, #0
 8009a32:	d14b      	bne.n	8009acc <_dtoa_r+0x31c>
 8009a34:	4b24      	ldr	r3, [pc, #144]	; (8009ac8 <_dtoa_r+0x318>)
 8009a36:	4602      	mov	r2, r0
 8009a38:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a3c:	e6d1      	b.n	80097e2 <_dtoa_r+0x32>
 8009a3e:	2301      	movs	r3, #1
 8009a40:	e7de      	b.n	8009a00 <_dtoa_r+0x250>
 8009a42:	2300      	movs	r3, #0
 8009a44:	9308      	str	r3, [sp, #32]
 8009a46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a48:	eb0a 0903 	add.w	r9, sl, r3
 8009a4c:	f109 0301 	add.w	r3, r9, #1
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	9301      	str	r3, [sp, #4]
 8009a54:	bfb8      	it	lt
 8009a56:	2301      	movlt	r3, #1
 8009a58:	e7dd      	b.n	8009a16 <_dtoa_r+0x266>
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e7f2      	b.n	8009a44 <_dtoa_r+0x294>
 8009a5e:	2501      	movs	r5, #1
 8009a60:	2300      	movs	r3, #0
 8009a62:	9305      	str	r3, [sp, #20]
 8009a64:	9508      	str	r5, [sp, #32]
 8009a66:	f04f 39ff 	mov.w	r9, #4294967295
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a70:	2312      	movs	r3, #18
 8009a72:	9209      	str	r2, [sp, #36]	; 0x24
 8009a74:	e7cf      	b.n	8009a16 <_dtoa_r+0x266>
 8009a76:	2301      	movs	r3, #1
 8009a78:	9308      	str	r3, [sp, #32]
 8009a7a:	e7f4      	b.n	8009a66 <_dtoa_r+0x2b6>
 8009a7c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009a80:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a84:	464b      	mov	r3, r9
 8009a86:	e7c6      	b.n	8009a16 <_dtoa_r+0x266>
 8009a88:	3101      	adds	r1, #1
 8009a8a:	6041      	str	r1, [r0, #4]
 8009a8c:	0052      	lsls	r2, r2, #1
 8009a8e:	e7c6      	b.n	8009a1e <_dtoa_r+0x26e>
 8009a90:	636f4361 	.word	0x636f4361
 8009a94:	3fd287a7 	.word	0x3fd287a7
 8009a98:	8b60c8b3 	.word	0x8b60c8b3
 8009a9c:	3fc68a28 	.word	0x3fc68a28
 8009aa0:	509f79fb 	.word	0x509f79fb
 8009aa4:	3fd34413 	.word	0x3fd34413
 8009aa8:	0800b861 	.word	0x0800b861
 8009aac:	0800b878 	.word	0x0800b878
 8009ab0:	7ff00000 	.word	0x7ff00000
 8009ab4:	0800b85d 	.word	0x0800b85d
 8009ab8:	0800b854 	.word	0x0800b854
 8009abc:	0800b831 	.word	0x0800b831
 8009ac0:	3ff80000 	.word	0x3ff80000
 8009ac4:	0800b9d0 	.word	0x0800b9d0
 8009ac8:	0800b8d7 	.word	0x0800b8d7
 8009acc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ace:	9a00      	ldr	r2, [sp, #0]
 8009ad0:	601a      	str	r2, [r3, #0]
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	2b0e      	cmp	r3, #14
 8009ad6:	f200 80ad 	bhi.w	8009c34 <_dtoa_r+0x484>
 8009ada:	2d00      	cmp	r5, #0
 8009adc:	f000 80aa 	beq.w	8009c34 <_dtoa_r+0x484>
 8009ae0:	f1ba 0f00 	cmp.w	sl, #0
 8009ae4:	dd36      	ble.n	8009b54 <_dtoa_r+0x3a4>
 8009ae6:	4ac3      	ldr	r2, [pc, #780]	; (8009df4 <_dtoa_r+0x644>)
 8009ae8:	f00a 030f 	and.w	r3, sl, #15
 8009aec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009af0:	ed93 7b00 	vldr	d7, [r3]
 8009af4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009af8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009afc:	eeb0 8a47 	vmov.f32	s16, s14
 8009b00:	eef0 8a67 	vmov.f32	s17, s15
 8009b04:	d016      	beq.n	8009b34 <_dtoa_r+0x384>
 8009b06:	4bbc      	ldr	r3, [pc, #752]	; (8009df8 <_dtoa_r+0x648>)
 8009b08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b10:	f7f6 feb4 	bl	800087c <__aeabi_ddiv>
 8009b14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b18:	f007 070f 	and.w	r7, r7, #15
 8009b1c:	2503      	movs	r5, #3
 8009b1e:	4eb6      	ldr	r6, [pc, #728]	; (8009df8 <_dtoa_r+0x648>)
 8009b20:	b957      	cbnz	r7, 8009b38 <_dtoa_r+0x388>
 8009b22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b26:	ec53 2b18 	vmov	r2, r3, d8
 8009b2a:	f7f6 fea7 	bl	800087c <__aeabi_ddiv>
 8009b2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b32:	e029      	b.n	8009b88 <_dtoa_r+0x3d8>
 8009b34:	2502      	movs	r5, #2
 8009b36:	e7f2      	b.n	8009b1e <_dtoa_r+0x36e>
 8009b38:	07f9      	lsls	r1, r7, #31
 8009b3a:	d508      	bpl.n	8009b4e <_dtoa_r+0x39e>
 8009b3c:	ec51 0b18 	vmov	r0, r1, d8
 8009b40:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b44:	f7f6 fd70 	bl	8000628 <__aeabi_dmul>
 8009b48:	ec41 0b18 	vmov	d8, r0, r1
 8009b4c:	3501      	adds	r5, #1
 8009b4e:	107f      	asrs	r7, r7, #1
 8009b50:	3608      	adds	r6, #8
 8009b52:	e7e5      	b.n	8009b20 <_dtoa_r+0x370>
 8009b54:	f000 80a6 	beq.w	8009ca4 <_dtoa_r+0x4f4>
 8009b58:	f1ca 0600 	rsb	r6, sl, #0
 8009b5c:	4ba5      	ldr	r3, [pc, #660]	; (8009df4 <_dtoa_r+0x644>)
 8009b5e:	4fa6      	ldr	r7, [pc, #664]	; (8009df8 <_dtoa_r+0x648>)
 8009b60:	f006 020f 	and.w	r2, r6, #15
 8009b64:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009b70:	f7f6 fd5a 	bl	8000628 <__aeabi_dmul>
 8009b74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b78:	1136      	asrs	r6, r6, #4
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2502      	movs	r5, #2
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	f040 8085 	bne.w	8009c8e <_dtoa_r+0x4de>
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d1d2      	bne.n	8009b2e <_dtoa_r+0x37e>
 8009b88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	f000 808c 	beq.w	8009ca8 <_dtoa_r+0x4f8>
 8009b90:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b94:	4b99      	ldr	r3, [pc, #612]	; (8009dfc <_dtoa_r+0x64c>)
 8009b96:	2200      	movs	r2, #0
 8009b98:	4630      	mov	r0, r6
 8009b9a:	4639      	mov	r1, r7
 8009b9c:	f7f6 ffb6 	bl	8000b0c <__aeabi_dcmplt>
 8009ba0:	2800      	cmp	r0, #0
 8009ba2:	f000 8081 	beq.w	8009ca8 <_dtoa_r+0x4f8>
 8009ba6:	9b01      	ldr	r3, [sp, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d07d      	beq.n	8009ca8 <_dtoa_r+0x4f8>
 8009bac:	f1b9 0f00 	cmp.w	r9, #0
 8009bb0:	dd3c      	ble.n	8009c2c <_dtoa_r+0x47c>
 8009bb2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009bb6:	9307      	str	r3, [sp, #28]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	4b91      	ldr	r3, [pc, #580]	; (8009e00 <_dtoa_r+0x650>)
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	4639      	mov	r1, r7
 8009bc0:	f7f6 fd32 	bl	8000628 <__aeabi_dmul>
 8009bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bc8:	3501      	adds	r5, #1
 8009bca:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009bce:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009bd2:	4628      	mov	r0, r5
 8009bd4:	f7f6 fcbe 	bl	8000554 <__aeabi_i2d>
 8009bd8:	4632      	mov	r2, r6
 8009bda:	463b      	mov	r3, r7
 8009bdc:	f7f6 fd24 	bl	8000628 <__aeabi_dmul>
 8009be0:	4b88      	ldr	r3, [pc, #544]	; (8009e04 <_dtoa_r+0x654>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	f7f6 fb6a 	bl	80002bc <__adddf3>
 8009be8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009bec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bf0:	9303      	str	r3, [sp, #12]
 8009bf2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d15c      	bne.n	8009cb2 <_dtoa_r+0x502>
 8009bf8:	4b83      	ldr	r3, [pc, #524]	; (8009e08 <_dtoa_r+0x658>)
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	4639      	mov	r1, r7
 8009c00:	f7f6 fb5a 	bl	80002b8 <__aeabi_dsub>
 8009c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	f7f6 ff9c 	bl	8000b48 <__aeabi_dcmpgt>
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f040 8296 	bne.w	800a142 <_dtoa_r+0x992>
 8009c16:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c20:	4639      	mov	r1, r7
 8009c22:	f7f6 ff73 	bl	8000b0c <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f040 8288 	bne.w	800a13c <_dtoa_r+0x98c>
 8009c2c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009c30:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f2c0 8158 	blt.w	8009eec <_dtoa_r+0x73c>
 8009c3c:	f1ba 0f0e 	cmp.w	sl, #14
 8009c40:	f300 8154 	bgt.w	8009eec <_dtoa_r+0x73c>
 8009c44:	4b6b      	ldr	r3, [pc, #428]	; (8009df4 <_dtoa_r+0x644>)
 8009c46:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009c4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f280 80e3 	bge.w	8009e1c <_dtoa_r+0x66c>
 8009c56:	9b01      	ldr	r3, [sp, #4]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f300 80df 	bgt.w	8009e1c <_dtoa_r+0x66c>
 8009c5e:	f040 826d 	bne.w	800a13c <_dtoa_r+0x98c>
 8009c62:	4b69      	ldr	r3, [pc, #420]	; (8009e08 <_dtoa_r+0x658>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	4640      	mov	r0, r8
 8009c68:	4649      	mov	r1, r9
 8009c6a:	f7f6 fcdd 	bl	8000628 <__aeabi_dmul>
 8009c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c72:	f7f6 ff5f 	bl	8000b34 <__aeabi_dcmpge>
 8009c76:	9e01      	ldr	r6, [sp, #4]
 8009c78:	4637      	mov	r7, r6
 8009c7a:	2800      	cmp	r0, #0
 8009c7c:	f040 8243 	bne.w	800a106 <_dtoa_r+0x956>
 8009c80:	9d00      	ldr	r5, [sp, #0]
 8009c82:	2331      	movs	r3, #49	; 0x31
 8009c84:	f805 3b01 	strb.w	r3, [r5], #1
 8009c88:	f10a 0a01 	add.w	sl, sl, #1
 8009c8c:	e23f      	b.n	800a10e <_dtoa_r+0x95e>
 8009c8e:	07f2      	lsls	r2, r6, #31
 8009c90:	d505      	bpl.n	8009c9e <_dtoa_r+0x4ee>
 8009c92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c96:	f7f6 fcc7 	bl	8000628 <__aeabi_dmul>
 8009c9a:	3501      	adds	r5, #1
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	1076      	asrs	r6, r6, #1
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	e76c      	b.n	8009b7e <_dtoa_r+0x3ce>
 8009ca4:	2502      	movs	r5, #2
 8009ca6:	e76f      	b.n	8009b88 <_dtoa_r+0x3d8>
 8009ca8:	9b01      	ldr	r3, [sp, #4]
 8009caa:	f8cd a01c 	str.w	sl, [sp, #28]
 8009cae:	930c      	str	r3, [sp, #48]	; 0x30
 8009cb0:	e78d      	b.n	8009bce <_dtoa_r+0x41e>
 8009cb2:	9900      	ldr	r1, [sp, #0]
 8009cb4:	980c      	ldr	r0, [sp, #48]	; 0x30
 8009cb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cb8:	4b4e      	ldr	r3, [pc, #312]	; (8009df4 <_dtoa_r+0x644>)
 8009cba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009cbe:	4401      	add	r1, r0
 8009cc0:	9102      	str	r1, [sp, #8]
 8009cc2:	9908      	ldr	r1, [sp, #32]
 8009cc4:	eeb0 8a47 	vmov.f32	s16, s14
 8009cc8:	eef0 8a67 	vmov.f32	s17, s15
 8009ccc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	d045      	beq.n	8009d64 <_dtoa_r+0x5b4>
 8009cd8:	494c      	ldr	r1, [pc, #304]	; (8009e0c <_dtoa_r+0x65c>)
 8009cda:	2000      	movs	r0, #0
 8009cdc:	f7f6 fdce 	bl	800087c <__aeabi_ddiv>
 8009ce0:	ec53 2b18 	vmov	r2, r3, d8
 8009ce4:	f7f6 fae8 	bl	80002b8 <__aeabi_dsub>
 8009ce8:	9d00      	ldr	r5, [sp, #0]
 8009cea:	ec41 0b18 	vmov	d8, r0, r1
 8009cee:	4639      	mov	r1, r7
 8009cf0:	4630      	mov	r0, r6
 8009cf2:	f7f6 ff49 	bl	8000b88 <__aeabi_d2iz>
 8009cf6:	900c      	str	r0, [sp, #48]	; 0x30
 8009cf8:	f7f6 fc2c 	bl	8000554 <__aeabi_i2d>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fad8 	bl	80002b8 <__aeabi_dsub>
 8009d08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d0a:	3330      	adds	r3, #48	; 0x30
 8009d0c:	f805 3b01 	strb.w	r3, [r5], #1
 8009d10:	ec53 2b18 	vmov	r2, r3, d8
 8009d14:	4606      	mov	r6, r0
 8009d16:	460f      	mov	r7, r1
 8009d18:	f7f6 fef8 	bl	8000b0c <__aeabi_dcmplt>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d165      	bne.n	8009dec <_dtoa_r+0x63c>
 8009d20:	4632      	mov	r2, r6
 8009d22:	463b      	mov	r3, r7
 8009d24:	4935      	ldr	r1, [pc, #212]	; (8009dfc <_dtoa_r+0x64c>)
 8009d26:	2000      	movs	r0, #0
 8009d28:	f7f6 fac6 	bl	80002b8 <__aeabi_dsub>
 8009d2c:	ec53 2b18 	vmov	r2, r3, d8
 8009d30:	f7f6 feec 	bl	8000b0c <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 80b9 	bne.w	8009eac <_dtoa_r+0x6fc>
 8009d3a:	9b02      	ldr	r3, [sp, #8]
 8009d3c:	429d      	cmp	r5, r3
 8009d3e:	f43f af75 	beq.w	8009c2c <_dtoa_r+0x47c>
 8009d42:	4b2f      	ldr	r3, [pc, #188]	; (8009e00 <_dtoa_r+0x650>)
 8009d44:	ec51 0b18 	vmov	r0, r1, d8
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f7f6 fc6d 	bl	8000628 <__aeabi_dmul>
 8009d4e:	4b2c      	ldr	r3, [pc, #176]	; (8009e00 <_dtoa_r+0x650>)
 8009d50:	ec41 0b18 	vmov	d8, r0, r1
 8009d54:	2200      	movs	r2, #0
 8009d56:	4630      	mov	r0, r6
 8009d58:	4639      	mov	r1, r7
 8009d5a:	f7f6 fc65 	bl	8000628 <__aeabi_dmul>
 8009d5e:	4606      	mov	r6, r0
 8009d60:	460f      	mov	r7, r1
 8009d62:	e7c4      	b.n	8009cee <_dtoa_r+0x53e>
 8009d64:	ec51 0b17 	vmov	r0, r1, d7
 8009d68:	f7f6 fc5e 	bl	8000628 <__aeabi_dmul>
 8009d6c:	9b02      	ldr	r3, [sp, #8]
 8009d6e:	9d00      	ldr	r5, [sp, #0]
 8009d70:	930c      	str	r3, [sp, #48]	; 0x30
 8009d72:	ec41 0b18 	vmov	d8, r0, r1
 8009d76:	4639      	mov	r1, r7
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f7f6 ff05 	bl	8000b88 <__aeabi_d2iz>
 8009d7e:	9011      	str	r0, [sp, #68]	; 0x44
 8009d80:	f7f6 fbe8 	bl	8000554 <__aeabi_i2d>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 fa94 	bl	80002b8 <__aeabi_dsub>
 8009d90:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d92:	3330      	adds	r3, #48	; 0x30
 8009d94:	f805 3b01 	strb.w	r3, [r5], #1
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	429d      	cmp	r5, r3
 8009d9c:	4606      	mov	r6, r0
 8009d9e:	460f      	mov	r7, r1
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	d134      	bne.n	8009e10 <_dtoa_r+0x660>
 8009da6:	4b19      	ldr	r3, [pc, #100]	; (8009e0c <_dtoa_r+0x65c>)
 8009da8:	ec51 0b18 	vmov	r0, r1, d8
 8009dac:	f7f6 fa86 	bl	80002bc <__adddf3>
 8009db0:	4602      	mov	r2, r0
 8009db2:	460b      	mov	r3, r1
 8009db4:	4630      	mov	r0, r6
 8009db6:	4639      	mov	r1, r7
 8009db8:	f7f6 fec6 	bl	8000b48 <__aeabi_dcmpgt>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	d175      	bne.n	8009eac <_dtoa_r+0x6fc>
 8009dc0:	ec53 2b18 	vmov	r2, r3, d8
 8009dc4:	4911      	ldr	r1, [pc, #68]	; (8009e0c <_dtoa_r+0x65c>)
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f7f6 fa76 	bl	80002b8 <__aeabi_dsub>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	460b      	mov	r3, r1
 8009dd0:	4630      	mov	r0, r6
 8009dd2:	4639      	mov	r1, r7
 8009dd4:	f7f6 fe9a 	bl	8000b0c <__aeabi_dcmplt>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	f43f af27 	beq.w	8009c2c <_dtoa_r+0x47c>
 8009dde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009de0:	1e6b      	subs	r3, r5, #1
 8009de2:	930c      	str	r3, [sp, #48]	; 0x30
 8009de4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009de8:	2b30      	cmp	r3, #48	; 0x30
 8009dea:	d0f8      	beq.n	8009dde <_dtoa_r+0x62e>
 8009dec:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009df0:	e04a      	b.n	8009e88 <_dtoa_r+0x6d8>
 8009df2:	bf00      	nop
 8009df4:	0800b9d0 	.word	0x0800b9d0
 8009df8:	0800b9a8 	.word	0x0800b9a8
 8009dfc:	3ff00000 	.word	0x3ff00000
 8009e00:	40240000 	.word	0x40240000
 8009e04:	401c0000 	.word	0x401c0000
 8009e08:	40140000 	.word	0x40140000
 8009e0c:	3fe00000 	.word	0x3fe00000
 8009e10:	4baf      	ldr	r3, [pc, #700]	; (800a0d0 <_dtoa_r+0x920>)
 8009e12:	f7f6 fc09 	bl	8000628 <__aeabi_dmul>
 8009e16:	4606      	mov	r6, r0
 8009e18:	460f      	mov	r7, r1
 8009e1a:	e7ac      	b.n	8009d76 <_dtoa_r+0x5c6>
 8009e1c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009e20:	9d00      	ldr	r5, [sp, #0]
 8009e22:	4642      	mov	r2, r8
 8009e24:	464b      	mov	r3, r9
 8009e26:	4630      	mov	r0, r6
 8009e28:	4639      	mov	r1, r7
 8009e2a:	f7f6 fd27 	bl	800087c <__aeabi_ddiv>
 8009e2e:	f7f6 feab 	bl	8000b88 <__aeabi_d2iz>
 8009e32:	9002      	str	r0, [sp, #8]
 8009e34:	f7f6 fb8e 	bl	8000554 <__aeabi_i2d>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f7f6 fbf4 	bl	8000628 <__aeabi_dmul>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4630      	mov	r0, r6
 8009e46:	4639      	mov	r1, r7
 8009e48:	f7f6 fa36 	bl	80002b8 <__aeabi_dsub>
 8009e4c:	9e02      	ldr	r6, [sp, #8]
 8009e4e:	9f01      	ldr	r7, [sp, #4]
 8009e50:	3630      	adds	r6, #48	; 0x30
 8009e52:	f805 6b01 	strb.w	r6, [r5], #1
 8009e56:	9e00      	ldr	r6, [sp, #0]
 8009e58:	1bae      	subs	r6, r5, r6
 8009e5a:	42b7      	cmp	r7, r6
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	460b      	mov	r3, r1
 8009e60:	d137      	bne.n	8009ed2 <_dtoa_r+0x722>
 8009e62:	f7f6 fa2b 	bl	80002bc <__adddf3>
 8009e66:	4642      	mov	r2, r8
 8009e68:	464b      	mov	r3, r9
 8009e6a:	4606      	mov	r6, r0
 8009e6c:	460f      	mov	r7, r1
 8009e6e:	f7f6 fe6b 	bl	8000b48 <__aeabi_dcmpgt>
 8009e72:	b9c8      	cbnz	r0, 8009ea8 <_dtoa_r+0x6f8>
 8009e74:	4642      	mov	r2, r8
 8009e76:	464b      	mov	r3, r9
 8009e78:	4630      	mov	r0, r6
 8009e7a:	4639      	mov	r1, r7
 8009e7c:	f7f6 fe3c 	bl	8000af8 <__aeabi_dcmpeq>
 8009e80:	b110      	cbz	r0, 8009e88 <_dtoa_r+0x6d8>
 8009e82:	9b02      	ldr	r3, [sp, #8]
 8009e84:	07d9      	lsls	r1, r3, #31
 8009e86:	d40f      	bmi.n	8009ea8 <_dtoa_r+0x6f8>
 8009e88:	4620      	mov	r0, r4
 8009e8a:	4659      	mov	r1, fp
 8009e8c:	f000 fbd0 	bl	800a630 <_Bfree>
 8009e90:	2300      	movs	r3, #0
 8009e92:	702b      	strb	r3, [r5, #0]
 8009e94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009e96:	f10a 0001 	add.w	r0, sl, #1
 8009e9a:	6018      	str	r0, [r3, #0]
 8009e9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f43f acd8 	beq.w	8009854 <_dtoa_r+0xa4>
 8009ea4:	601d      	str	r5, [r3, #0]
 8009ea6:	e4d5      	b.n	8009854 <_dtoa_r+0xa4>
 8009ea8:	f8cd a01c 	str.w	sl, [sp, #28]
 8009eac:	462b      	mov	r3, r5
 8009eae:	461d      	mov	r5, r3
 8009eb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eb4:	2a39      	cmp	r2, #57	; 0x39
 8009eb6:	d108      	bne.n	8009eca <_dtoa_r+0x71a>
 8009eb8:	9a00      	ldr	r2, [sp, #0]
 8009eba:	429a      	cmp	r2, r3
 8009ebc:	d1f7      	bne.n	8009eae <_dtoa_r+0x6fe>
 8009ebe:	9a07      	ldr	r2, [sp, #28]
 8009ec0:	9900      	ldr	r1, [sp, #0]
 8009ec2:	3201      	adds	r2, #1
 8009ec4:	9207      	str	r2, [sp, #28]
 8009ec6:	2230      	movs	r2, #48	; 0x30
 8009ec8:	700a      	strb	r2, [r1, #0]
 8009eca:	781a      	ldrb	r2, [r3, #0]
 8009ecc:	3201      	adds	r2, #1
 8009ece:	701a      	strb	r2, [r3, #0]
 8009ed0:	e78c      	b.n	8009dec <_dtoa_r+0x63c>
 8009ed2:	4b7f      	ldr	r3, [pc, #508]	; (800a0d0 <_dtoa_r+0x920>)
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	f7f6 fba7 	bl	8000628 <__aeabi_dmul>
 8009eda:	2200      	movs	r2, #0
 8009edc:	2300      	movs	r3, #0
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460f      	mov	r7, r1
 8009ee2:	f7f6 fe09 	bl	8000af8 <__aeabi_dcmpeq>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d09b      	beq.n	8009e22 <_dtoa_r+0x672>
 8009eea:	e7cd      	b.n	8009e88 <_dtoa_r+0x6d8>
 8009eec:	9a08      	ldr	r2, [sp, #32]
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	f000 80c4 	beq.w	800a07c <_dtoa_r+0x8cc>
 8009ef4:	9a05      	ldr	r2, [sp, #20]
 8009ef6:	2a01      	cmp	r2, #1
 8009ef8:	f300 80a8 	bgt.w	800a04c <_dtoa_r+0x89c>
 8009efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	f000 80a0 	beq.w	800a044 <_dtoa_r+0x894>
 8009f04:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f08:	9e06      	ldr	r6, [sp, #24]
 8009f0a:	4645      	mov	r5, r8
 8009f0c:	9a04      	ldr	r2, [sp, #16]
 8009f0e:	2101      	movs	r1, #1
 8009f10:	441a      	add	r2, r3
 8009f12:	4620      	mov	r0, r4
 8009f14:	4498      	add	r8, r3
 8009f16:	9204      	str	r2, [sp, #16]
 8009f18:	f000 fc46 	bl	800a7a8 <__i2b>
 8009f1c:	4607      	mov	r7, r0
 8009f1e:	2d00      	cmp	r5, #0
 8009f20:	dd0b      	ble.n	8009f3a <_dtoa_r+0x78a>
 8009f22:	9b04      	ldr	r3, [sp, #16]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	dd08      	ble.n	8009f3a <_dtoa_r+0x78a>
 8009f28:	42ab      	cmp	r3, r5
 8009f2a:	9a04      	ldr	r2, [sp, #16]
 8009f2c:	bfa8      	it	ge
 8009f2e:	462b      	movge	r3, r5
 8009f30:	eba8 0803 	sub.w	r8, r8, r3
 8009f34:	1aed      	subs	r5, r5, r3
 8009f36:	1ad3      	subs	r3, r2, r3
 8009f38:	9304      	str	r3, [sp, #16]
 8009f3a:	9b06      	ldr	r3, [sp, #24]
 8009f3c:	b1fb      	cbz	r3, 8009f7e <_dtoa_r+0x7ce>
 8009f3e:	9b08      	ldr	r3, [sp, #32]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 809f 	beq.w	800a084 <_dtoa_r+0x8d4>
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	dd11      	ble.n	8009f6e <_dtoa_r+0x7be>
 8009f4a:	4639      	mov	r1, r7
 8009f4c:	4632      	mov	r2, r6
 8009f4e:	4620      	mov	r0, r4
 8009f50:	f000 fce6 	bl	800a920 <__pow5mult>
 8009f54:	465a      	mov	r2, fp
 8009f56:	4601      	mov	r1, r0
 8009f58:	4607      	mov	r7, r0
 8009f5a:	4620      	mov	r0, r4
 8009f5c:	f000 fc3a 	bl	800a7d4 <__multiply>
 8009f60:	4659      	mov	r1, fp
 8009f62:	9007      	str	r0, [sp, #28]
 8009f64:	4620      	mov	r0, r4
 8009f66:	f000 fb63 	bl	800a630 <_Bfree>
 8009f6a:	9b07      	ldr	r3, [sp, #28]
 8009f6c:	469b      	mov	fp, r3
 8009f6e:	9b06      	ldr	r3, [sp, #24]
 8009f70:	1b9a      	subs	r2, r3, r6
 8009f72:	d004      	beq.n	8009f7e <_dtoa_r+0x7ce>
 8009f74:	4659      	mov	r1, fp
 8009f76:	4620      	mov	r0, r4
 8009f78:	f000 fcd2 	bl	800a920 <__pow5mult>
 8009f7c:	4683      	mov	fp, r0
 8009f7e:	2101      	movs	r1, #1
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fc11 	bl	800a7a8 <__i2b>
 8009f86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	4606      	mov	r6, r0
 8009f8c:	dd7c      	ble.n	800a088 <_dtoa_r+0x8d8>
 8009f8e:	461a      	mov	r2, r3
 8009f90:	4601      	mov	r1, r0
 8009f92:	4620      	mov	r0, r4
 8009f94:	f000 fcc4 	bl	800a920 <__pow5mult>
 8009f98:	9b05      	ldr	r3, [sp, #20]
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	4606      	mov	r6, r0
 8009f9e:	dd76      	ble.n	800a08e <_dtoa_r+0x8de>
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9306      	str	r3, [sp, #24]
 8009fa4:	6933      	ldr	r3, [r6, #16]
 8009fa6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009faa:	6918      	ldr	r0, [r3, #16]
 8009fac:	f000 fbac 	bl	800a708 <__hi0bits>
 8009fb0:	f1c0 0020 	rsb	r0, r0, #32
 8009fb4:	9b04      	ldr	r3, [sp, #16]
 8009fb6:	4418      	add	r0, r3
 8009fb8:	f010 001f 	ands.w	r0, r0, #31
 8009fbc:	f000 8086 	beq.w	800a0cc <_dtoa_r+0x91c>
 8009fc0:	f1c0 0320 	rsb	r3, r0, #32
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	dd7f      	ble.n	800a0c8 <_dtoa_r+0x918>
 8009fc8:	f1c0 001c 	rsb	r0, r0, #28
 8009fcc:	9b04      	ldr	r3, [sp, #16]
 8009fce:	4403      	add	r3, r0
 8009fd0:	4480      	add	r8, r0
 8009fd2:	4405      	add	r5, r0
 8009fd4:	9304      	str	r3, [sp, #16]
 8009fd6:	f1b8 0f00 	cmp.w	r8, #0
 8009fda:	dd05      	ble.n	8009fe8 <_dtoa_r+0x838>
 8009fdc:	4659      	mov	r1, fp
 8009fde:	4642      	mov	r2, r8
 8009fe0:	4620      	mov	r0, r4
 8009fe2:	f000 fcf7 	bl	800a9d4 <__lshift>
 8009fe6:	4683      	mov	fp, r0
 8009fe8:	9b04      	ldr	r3, [sp, #16]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	dd05      	ble.n	8009ffa <_dtoa_r+0x84a>
 8009fee:	4631      	mov	r1, r6
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	4620      	mov	r0, r4
 8009ff4:	f000 fcee 	bl	800a9d4 <__lshift>
 8009ff8:	4606      	mov	r6, r0
 8009ffa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d069      	beq.n	800a0d4 <_dtoa_r+0x924>
 800a000:	4631      	mov	r1, r6
 800a002:	4658      	mov	r0, fp
 800a004:	f000 fd52 	bl	800aaac <__mcmp>
 800a008:	2800      	cmp	r0, #0
 800a00a:	da63      	bge.n	800a0d4 <_dtoa_r+0x924>
 800a00c:	2300      	movs	r3, #0
 800a00e:	4659      	mov	r1, fp
 800a010:	220a      	movs	r2, #10
 800a012:	4620      	mov	r0, r4
 800a014:	f000 fb2e 	bl	800a674 <__multadd>
 800a018:	9b08      	ldr	r3, [sp, #32]
 800a01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a01e:	4683      	mov	fp, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	f000 818f 	beq.w	800a344 <_dtoa_r+0xb94>
 800a026:	4639      	mov	r1, r7
 800a028:	2300      	movs	r3, #0
 800a02a:	220a      	movs	r2, #10
 800a02c:	4620      	mov	r0, r4
 800a02e:	f000 fb21 	bl	800a674 <__multadd>
 800a032:	f1b9 0f00 	cmp.w	r9, #0
 800a036:	4607      	mov	r7, r0
 800a038:	f300 808e 	bgt.w	800a158 <_dtoa_r+0x9a8>
 800a03c:	9b05      	ldr	r3, [sp, #20]
 800a03e:	2b02      	cmp	r3, #2
 800a040:	dc50      	bgt.n	800a0e4 <_dtoa_r+0x934>
 800a042:	e089      	b.n	800a158 <_dtoa_r+0x9a8>
 800a044:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a046:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a04a:	e75d      	b.n	8009f08 <_dtoa_r+0x758>
 800a04c:	9b01      	ldr	r3, [sp, #4]
 800a04e:	1e5e      	subs	r6, r3, #1
 800a050:	9b06      	ldr	r3, [sp, #24]
 800a052:	42b3      	cmp	r3, r6
 800a054:	bfbf      	itttt	lt
 800a056:	9b06      	ldrlt	r3, [sp, #24]
 800a058:	9606      	strlt	r6, [sp, #24]
 800a05a:	1af2      	sublt	r2, r6, r3
 800a05c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a05e:	bfb6      	itet	lt
 800a060:	189b      	addlt	r3, r3, r2
 800a062:	1b9e      	subge	r6, r3, r6
 800a064:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	bfb8      	it	lt
 800a06a:	2600      	movlt	r6, #0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bfb5      	itete	lt
 800a070:	eba8 0503 	sublt.w	r5, r8, r3
 800a074:	9b01      	ldrge	r3, [sp, #4]
 800a076:	2300      	movlt	r3, #0
 800a078:	4645      	movge	r5, r8
 800a07a:	e747      	b.n	8009f0c <_dtoa_r+0x75c>
 800a07c:	9e06      	ldr	r6, [sp, #24]
 800a07e:	9f08      	ldr	r7, [sp, #32]
 800a080:	4645      	mov	r5, r8
 800a082:	e74c      	b.n	8009f1e <_dtoa_r+0x76e>
 800a084:	9a06      	ldr	r2, [sp, #24]
 800a086:	e775      	b.n	8009f74 <_dtoa_r+0x7c4>
 800a088:	9b05      	ldr	r3, [sp, #20]
 800a08a:	2b01      	cmp	r3, #1
 800a08c:	dc18      	bgt.n	800a0c0 <_dtoa_r+0x910>
 800a08e:	9b02      	ldr	r3, [sp, #8]
 800a090:	b9b3      	cbnz	r3, 800a0c0 <_dtoa_r+0x910>
 800a092:	9b03      	ldr	r3, [sp, #12]
 800a094:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a098:	b9a3      	cbnz	r3, 800a0c4 <_dtoa_r+0x914>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a0a0:	0d1b      	lsrs	r3, r3, #20
 800a0a2:	051b      	lsls	r3, r3, #20
 800a0a4:	b12b      	cbz	r3, 800a0b2 <_dtoa_r+0x902>
 800a0a6:	9b04      	ldr	r3, [sp, #16]
 800a0a8:	3301      	adds	r3, #1
 800a0aa:	9304      	str	r3, [sp, #16]
 800a0ac:	f108 0801 	add.w	r8, r8, #1
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	f47f af74 	bne.w	8009fa4 <_dtoa_r+0x7f4>
 800a0bc:	2001      	movs	r0, #1
 800a0be:	e779      	b.n	8009fb4 <_dtoa_r+0x804>
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	e7f6      	b.n	800a0b2 <_dtoa_r+0x902>
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	e7f4      	b.n	800a0b2 <_dtoa_r+0x902>
 800a0c8:	d085      	beq.n	8009fd6 <_dtoa_r+0x826>
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	301c      	adds	r0, #28
 800a0ce:	e77d      	b.n	8009fcc <_dtoa_r+0x81c>
 800a0d0:	40240000 	.word	0x40240000
 800a0d4:	9b01      	ldr	r3, [sp, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	dc38      	bgt.n	800a14c <_dtoa_r+0x99c>
 800a0da:	9b05      	ldr	r3, [sp, #20]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	dd35      	ble.n	800a14c <_dtoa_r+0x99c>
 800a0e0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a0e4:	f1b9 0f00 	cmp.w	r9, #0
 800a0e8:	d10d      	bne.n	800a106 <_dtoa_r+0x956>
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	464b      	mov	r3, r9
 800a0ee:	2205      	movs	r2, #5
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 fabf 	bl	800a674 <__multadd>
 800a0f6:	4601      	mov	r1, r0
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	4658      	mov	r0, fp
 800a0fc:	f000 fcd6 	bl	800aaac <__mcmp>
 800a100:	2800      	cmp	r0, #0
 800a102:	f73f adbd 	bgt.w	8009c80 <_dtoa_r+0x4d0>
 800a106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a108:	9d00      	ldr	r5, [sp, #0]
 800a10a:	ea6f 0a03 	mvn.w	sl, r3
 800a10e:	f04f 0800 	mov.w	r8, #0
 800a112:	4631      	mov	r1, r6
 800a114:	4620      	mov	r0, r4
 800a116:	f000 fa8b 	bl	800a630 <_Bfree>
 800a11a:	2f00      	cmp	r7, #0
 800a11c:	f43f aeb4 	beq.w	8009e88 <_dtoa_r+0x6d8>
 800a120:	f1b8 0f00 	cmp.w	r8, #0
 800a124:	d005      	beq.n	800a132 <_dtoa_r+0x982>
 800a126:	45b8      	cmp	r8, r7
 800a128:	d003      	beq.n	800a132 <_dtoa_r+0x982>
 800a12a:	4641      	mov	r1, r8
 800a12c:	4620      	mov	r0, r4
 800a12e:	f000 fa7f 	bl	800a630 <_Bfree>
 800a132:	4639      	mov	r1, r7
 800a134:	4620      	mov	r0, r4
 800a136:	f000 fa7b 	bl	800a630 <_Bfree>
 800a13a:	e6a5      	b.n	8009e88 <_dtoa_r+0x6d8>
 800a13c:	2600      	movs	r6, #0
 800a13e:	4637      	mov	r7, r6
 800a140:	e7e1      	b.n	800a106 <_dtoa_r+0x956>
 800a142:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a144:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a148:	4637      	mov	r7, r6
 800a14a:	e599      	b.n	8009c80 <_dtoa_r+0x4d0>
 800a14c:	9b08      	ldr	r3, [sp, #32]
 800a14e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	f000 80fd 	beq.w	800a352 <_dtoa_r+0xba2>
 800a158:	2d00      	cmp	r5, #0
 800a15a:	dd05      	ble.n	800a168 <_dtoa_r+0x9b8>
 800a15c:	4639      	mov	r1, r7
 800a15e:	462a      	mov	r2, r5
 800a160:	4620      	mov	r0, r4
 800a162:	f000 fc37 	bl	800a9d4 <__lshift>
 800a166:	4607      	mov	r7, r0
 800a168:	9b06      	ldr	r3, [sp, #24]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d05c      	beq.n	800a228 <_dtoa_r+0xa78>
 800a16e:	6879      	ldr	r1, [r7, #4]
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fa1d 	bl	800a5b0 <_Balloc>
 800a176:	4605      	mov	r5, r0
 800a178:	b928      	cbnz	r0, 800a186 <_dtoa_r+0x9d6>
 800a17a:	4b80      	ldr	r3, [pc, #512]	; (800a37c <_dtoa_r+0xbcc>)
 800a17c:	4602      	mov	r2, r0
 800a17e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a182:	f7ff bb2e 	b.w	80097e2 <_dtoa_r+0x32>
 800a186:	693a      	ldr	r2, [r7, #16]
 800a188:	3202      	adds	r2, #2
 800a18a:	0092      	lsls	r2, r2, #2
 800a18c:	f107 010c 	add.w	r1, r7, #12
 800a190:	300c      	adds	r0, #12
 800a192:	f000 f9ff 	bl	800a594 <memcpy>
 800a196:	2201      	movs	r2, #1
 800a198:	4629      	mov	r1, r5
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 fc1a 	bl	800a9d4 <__lshift>
 800a1a0:	9b00      	ldr	r3, [sp, #0]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	9301      	str	r3, [sp, #4]
 800a1a6:	9b00      	ldr	r3, [sp, #0]
 800a1a8:	444b      	add	r3, r9
 800a1aa:	9307      	str	r3, [sp, #28]
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	f003 0301 	and.w	r3, r3, #1
 800a1b2:	46b8      	mov	r8, r7
 800a1b4:	9306      	str	r3, [sp, #24]
 800a1b6:	4607      	mov	r7, r0
 800a1b8:	9b01      	ldr	r3, [sp, #4]
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	4658      	mov	r0, fp
 800a1c0:	9302      	str	r3, [sp, #8]
 800a1c2:	f7ff fa67 	bl	8009694 <quorem>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	3330      	adds	r3, #48	; 0x30
 800a1ca:	9004      	str	r0, [sp, #16]
 800a1cc:	4641      	mov	r1, r8
 800a1ce:	4658      	mov	r0, fp
 800a1d0:	9308      	str	r3, [sp, #32]
 800a1d2:	f000 fc6b 	bl	800aaac <__mcmp>
 800a1d6:	463a      	mov	r2, r7
 800a1d8:	4681      	mov	r9, r0
 800a1da:	4631      	mov	r1, r6
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f000 fc81 	bl	800aae4 <__mdiff>
 800a1e2:	68c2      	ldr	r2, [r0, #12]
 800a1e4:	9b08      	ldr	r3, [sp, #32]
 800a1e6:	4605      	mov	r5, r0
 800a1e8:	bb02      	cbnz	r2, 800a22c <_dtoa_r+0xa7c>
 800a1ea:	4601      	mov	r1, r0
 800a1ec:	4658      	mov	r0, fp
 800a1ee:	f000 fc5d 	bl	800aaac <__mcmp>
 800a1f2:	9b08      	ldr	r3, [sp, #32]
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	4620      	mov	r0, r4
 800a1fa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a1fe:	f000 fa17 	bl	800a630 <_Bfree>
 800a202:	9b05      	ldr	r3, [sp, #20]
 800a204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a206:	9d01      	ldr	r5, [sp, #4]
 800a208:	ea43 0102 	orr.w	r1, r3, r2
 800a20c:	9b06      	ldr	r3, [sp, #24]
 800a20e:	430b      	orrs	r3, r1
 800a210:	9b08      	ldr	r3, [sp, #32]
 800a212:	d10d      	bne.n	800a230 <_dtoa_r+0xa80>
 800a214:	2b39      	cmp	r3, #57	; 0x39
 800a216:	d029      	beq.n	800a26c <_dtoa_r+0xabc>
 800a218:	f1b9 0f00 	cmp.w	r9, #0
 800a21c:	dd01      	ble.n	800a222 <_dtoa_r+0xa72>
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	3331      	adds	r3, #49	; 0x31
 800a222:	9a02      	ldr	r2, [sp, #8]
 800a224:	7013      	strb	r3, [r2, #0]
 800a226:	e774      	b.n	800a112 <_dtoa_r+0x962>
 800a228:	4638      	mov	r0, r7
 800a22a:	e7b9      	b.n	800a1a0 <_dtoa_r+0x9f0>
 800a22c:	2201      	movs	r2, #1
 800a22e:	e7e2      	b.n	800a1f6 <_dtoa_r+0xa46>
 800a230:	f1b9 0f00 	cmp.w	r9, #0
 800a234:	db06      	blt.n	800a244 <_dtoa_r+0xa94>
 800a236:	9905      	ldr	r1, [sp, #20]
 800a238:	ea41 0909 	orr.w	r9, r1, r9
 800a23c:	9906      	ldr	r1, [sp, #24]
 800a23e:	ea59 0101 	orrs.w	r1, r9, r1
 800a242:	d120      	bne.n	800a286 <_dtoa_r+0xad6>
 800a244:	2a00      	cmp	r2, #0
 800a246:	ddec      	ble.n	800a222 <_dtoa_r+0xa72>
 800a248:	4659      	mov	r1, fp
 800a24a:	2201      	movs	r2, #1
 800a24c:	4620      	mov	r0, r4
 800a24e:	9301      	str	r3, [sp, #4]
 800a250:	f000 fbc0 	bl	800a9d4 <__lshift>
 800a254:	4631      	mov	r1, r6
 800a256:	4683      	mov	fp, r0
 800a258:	f000 fc28 	bl	800aaac <__mcmp>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	9b01      	ldr	r3, [sp, #4]
 800a260:	dc02      	bgt.n	800a268 <_dtoa_r+0xab8>
 800a262:	d1de      	bne.n	800a222 <_dtoa_r+0xa72>
 800a264:	07da      	lsls	r2, r3, #31
 800a266:	d5dc      	bpl.n	800a222 <_dtoa_r+0xa72>
 800a268:	2b39      	cmp	r3, #57	; 0x39
 800a26a:	d1d8      	bne.n	800a21e <_dtoa_r+0xa6e>
 800a26c:	9a02      	ldr	r2, [sp, #8]
 800a26e:	2339      	movs	r3, #57	; 0x39
 800a270:	7013      	strb	r3, [r2, #0]
 800a272:	462b      	mov	r3, r5
 800a274:	461d      	mov	r5, r3
 800a276:	3b01      	subs	r3, #1
 800a278:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a27c:	2a39      	cmp	r2, #57	; 0x39
 800a27e:	d050      	beq.n	800a322 <_dtoa_r+0xb72>
 800a280:	3201      	adds	r2, #1
 800a282:	701a      	strb	r2, [r3, #0]
 800a284:	e745      	b.n	800a112 <_dtoa_r+0x962>
 800a286:	2a00      	cmp	r2, #0
 800a288:	dd03      	ble.n	800a292 <_dtoa_r+0xae2>
 800a28a:	2b39      	cmp	r3, #57	; 0x39
 800a28c:	d0ee      	beq.n	800a26c <_dtoa_r+0xabc>
 800a28e:	3301      	adds	r3, #1
 800a290:	e7c7      	b.n	800a222 <_dtoa_r+0xa72>
 800a292:	9a01      	ldr	r2, [sp, #4]
 800a294:	9907      	ldr	r1, [sp, #28]
 800a296:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a29a:	428a      	cmp	r2, r1
 800a29c:	d02a      	beq.n	800a2f4 <_dtoa_r+0xb44>
 800a29e:	4659      	mov	r1, fp
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	220a      	movs	r2, #10
 800a2a4:	4620      	mov	r0, r4
 800a2a6:	f000 f9e5 	bl	800a674 <__multadd>
 800a2aa:	45b8      	cmp	r8, r7
 800a2ac:	4683      	mov	fp, r0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	f04f 020a 	mov.w	r2, #10
 800a2b6:	4641      	mov	r1, r8
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	d107      	bne.n	800a2cc <_dtoa_r+0xb1c>
 800a2bc:	f000 f9da 	bl	800a674 <__multadd>
 800a2c0:	4680      	mov	r8, r0
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	9b01      	ldr	r3, [sp, #4]
 800a2c6:	3301      	adds	r3, #1
 800a2c8:	9301      	str	r3, [sp, #4]
 800a2ca:	e775      	b.n	800a1b8 <_dtoa_r+0xa08>
 800a2cc:	f000 f9d2 	bl	800a674 <__multadd>
 800a2d0:	4639      	mov	r1, r7
 800a2d2:	4680      	mov	r8, r0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	220a      	movs	r2, #10
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f000 f9cb 	bl	800a674 <__multadd>
 800a2de:	4607      	mov	r7, r0
 800a2e0:	e7f0      	b.n	800a2c4 <_dtoa_r+0xb14>
 800a2e2:	f1b9 0f00 	cmp.w	r9, #0
 800a2e6:	9a00      	ldr	r2, [sp, #0]
 800a2e8:	bfcc      	ite	gt
 800a2ea:	464d      	movgt	r5, r9
 800a2ec:	2501      	movle	r5, #1
 800a2ee:	4415      	add	r5, r2
 800a2f0:	f04f 0800 	mov.w	r8, #0
 800a2f4:	4659      	mov	r1, fp
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	9301      	str	r3, [sp, #4]
 800a2fc:	f000 fb6a 	bl	800a9d4 <__lshift>
 800a300:	4631      	mov	r1, r6
 800a302:	4683      	mov	fp, r0
 800a304:	f000 fbd2 	bl	800aaac <__mcmp>
 800a308:	2800      	cmp	r0, #0
 800a30a:	dcb2      	bgt.n	800a272 <_dtoa_r+0xac2>
 800a30c:	d102      	bne.n	800a314 <_dtoa_r+0xb64>
 800a30e:	9b01      	ldr	r3, [sp, #4]
 800a310:	07db      	lsls	r3, r3, #31
 800a312:	d4ae      	bmi.n	800a272 <_dtoa_r+0xac2>
 800a314:	462b      	mov	r3, r5
 800a316:	461d      	mov	r5, r3
 800a318:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a31c:	2a30      	cmp	r2, #48	; 0x30
 800a31e:	d0fa      	beq.n	800a316 <_dtoa_r+0xb66>
 800a320:	e6f7      	b.n	800a112 <_dtoa_r+0x962>
 800a322:	9a00      	ldr	r2, [sp, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d1a5      	bne.n	800a274 <_dtoa_r+0xac4>
 800a328:	f10a 0a01 	add.w	sl, sl, #1
 800a32c:	2331      	movs	r3, #49	; 0x31
 800a32e:	e779      	b.n	800a224 <_dtoa_r+0xa74>
 800a330:	4b13      	ldr	r3, [pc, #76]	; (800a380 <_dtoa_r+0xbd0>)
 800a332:	f7ff baaf 	b.w	8009894 <_dtoa_r+0xe4>
 800a336:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f47f aa86 	bne.w	800984a <_dtoa_r+0x9a>
 800a33e:	4b11      	ldr	r3, [pc, #68]	; (800a384 <_dtoa_r+0xbd4>)
 800a340:	f7ff baa8 	b.w	8009894 <_dtoa_r+0xe4>
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	dc03      	bgt.n	800a352 <_dtoa_r+0xba2>
 800a34a:	9b05      	ldr	r3, [sp, #20]
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	f73f aec9 	bgt.w	800a0e4 <_dtoa_r+0x934>
 800a352:	9d00      	ldr	r5, [sp, #0]
 800a354:	4631      	mov	r1, r6
 800a356:	4658      	mov	r0, fp
 800a358:	f7ff f99c 	bl	8009694 <quorem>
 800a35c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a360:	f805 3b01 	strb.w	r3, [r5], #1
 800a364:	9a00      	ldr	r2, [sp, #0]
 800a366:	1aaa      	subs	r2, r5, r2
 800a368:	4591      	cmp	r9, r2
 800a36a:	ddba      	ble.n	800a2e2 <_dtoa_r+0xb32>
 800a36c:	4659      	mov	r1, fp
 800a36e:	2300      	movs	r3, #0
 800a370:	220a      	movs	r2, #10
 800a372:	4620      	mov	r0, r4
 800a374:	f000 f97e 	bl	800a674 <__multadd>
 800a378:	4683      	mov	fp, r0
 800a37a:	e7eb      	b.n	800a354 <_dtoa_r+0xba4>
 800a37c:	0800b8d7 	.word	0x0800b8d7
 800a380:	0800b830 	.word	0x0800b830
 800a384:	0800b854 	.word	0x0800b854

0800a388 <std>:
 800a388:	2300      	movs	r3, #0
 800a38a:	b510      	push	{r4, lr}
 800a38c:	4604      	mov	r4, r0
 800a38e:	e9c0 3300 	strd	r3, r3, [r0]
 800a392:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a396:	6083      	str	r3, [r0, #8]
 800a398:	8181      	strh	r1, [r0, #12]
 800a39a:	6643      	str	r3, [r0, #100]	; 0x64
 800a39c:	81c2      	strh	r2, [r0, #14]
 800a39e:	6183      	str	r3, [r0, #24]
 800a3a0:	4619      	mov	r1, r3
 800a3a2:	2208      	movs	r2, #8
 800a3a4:	305c      	adds	r0, #92	; 0x5c
 800a3a6:	f7fe fceb 	bl	8008d80 <memset>
 800a3aa:	4b05      	ldr	r3, [pc, #20]	; (800a3c0 <std+0x38>)
 800a3ac:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <std+0x3c>)
 800a3b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <std+0x40>)
 800a3b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <std+0x44>)
 800a3b8:	6224      	str	r4, [r4, #32]
 800a3ba:	6323      	str	r3, [r4, #48]	; 0x30
 800a3bc:	bd10      	pop	{r4, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800b0f5 	.word	0x0800b0f5
 800a3c4:	0800b117 	.word	0x0800b117
 800a3c8:	0800b14f 	.word	0x0800b14f
 800a3cc:	0800b173 	.word	0x0800b173

0800a3d0 <_cleanup_r>:
 800a3d0:	4901      	ldr	r1, [pc, #4]	; (800a3d8 <_cleanup_r+0x8>)
 800a3d2:	f000 b8af 	b.w	800a534 <_fwalk_reent>
 800a3d6:	bf00      	nop
 800a3d8:	0800b489 	.word	0x0800b489

0800a3dc <__sfmoreglue>:
 800a3dc:	b570      	push	{r4, r5, r6, lr}
 800a3de:	1e4a      	subs	r2, r1, #1
 800a3e0:	2568      	movs	r5, #104	; 0x68
 800a3e2:	4355      	muls	r5, r2
 800a3e4:	460e      	mov	r6, r1
 800a3e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a3ea:	f000 fcbf 	bl	800ad6c <_malloc_r>
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	b140      	cbz	r0, 800a404 <__sfmoreglue+0x28>
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	e9c0 1600 	strd	r1, r6, [r0]
 800a3f8:	300c      	adds	r0, #12
 800a3fa:	60a0      	str	r0, [r4, #8]
 800a3fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a400:	f7fe fcbe 	bl	8008d80 <memset>
 800a404:	4620      	mov	r0, r4
 800a406:	bd70      	pop	{r4, r5, r6, pc}

0800a408 <__sfp_lock_acquire>:
 800a408:	4801      	ldr	r0, [pc, #4]	; (800a410 <__sfp_lock_acquire+0x8>)
 800a40a:	f000 b8b8 	b.w	800a57e <__retarget_lock_acquire_recursive>
 800a40e:	bf00      	nop
 800a410:	200004c8 	.word	0x200004c8

0800a414 <__sfp_lock_release>:
 800a414:	4801      	ldr	r0, [pc, #4]	; (800a41c <__sfp_lock_release+0x8>)
 800a416:	f000 b8b3 	b.w	800a580 <__retarget_lock_release_recursive>
 800a41a:	bf00      	nop
 800a41c:	200004c8 	.word	0x200004c8

0800a420 <__sinit_lock_acquire>:
 800a420:	4801      	ldr	r0, [pc, #4]	; (800a428 <__sinit_lock_acquire+0x8>)
 800a422:	f000 b8ac 	b.w	800a57e <__retarget_lock_acquire_recursive>
 800a426:	bf00      	nop
 800a428:	200004c3 	.word	0x200004c3

0800a42c <__sinit_lock_release>:
 800a42c:	4801      	ldr	r0, [pc, #4]	; (800a434 <__sinit_lock_release+0x8>)
 800a42e:	f000 b8a7 	b.w	800a580 <__retarget_lock_release_recursive>
 800a432:	bf00      	nop
 800a434:	200004c3 	.word	0x200004c3

0800a438 <__sinit>:
 800a438:	b510      	push	{r4, lr}
 800a43a:	4604      	mov	r4, r0
 800a43c:	f7ff fff0 	bl	800a420 <__sinit_lock_acquire>
 800a440:	69a3      	ldr	r3, [r4, #24]
 800a442:	b11b      	cbz	r3, 800a44c <__sinit+0x14>
 800a444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a448:	f7ff bff0 	b.w	800a42c <__sinit_lock_release>
 800a44c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a450:	6523      	str	r3, [r4, #80]	; 0x50
 800a452:	4b13      	ldr	r3, [pc, #76]	; (800a4a0 <__sinit+0x68>)
 800a454:	4a13      	ldr	r2, [pc, #76]	; (800a4a4 <__sinit+0x6c>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	62a2      	str	r2, [r4, #40]	; 0x28
 800a45a:	42a3      	cmp	r3, r4
 800a45c:	bf04      	itt	eq
 800a45e:	2301      	moveq	r3, #1
 800a460:	61a3      	streq	r3, [r4, #24]
 800a462:	4620      	mov	r0, r4
 800a464:	f000 f820 	bl	800a4a8 <__sfp>
 800a468:	6060      	str	r0, [r4, #4]
 800a46a:	4620      	mov	r0, r4
 800a46c:	f000 f81c 	bl	800a4a8 <__sfp>
 800a470:	60a0      	str	r0, [r4, #8]
 800a472:	4620      	mov	r0, r4
 800a474:	f000 f818 	bl	800a4a8 <__sfp>
 800a478:	2200      	movs	r2, #0
 800a47a:	60e0      	str	r0, [r4, #12]
 800a47c:	2104      	movs	r1, #4
 800a47e:	6860      	ldr	r0, [r4, #4]
 800a480:	f7ff ff82 	bl	800a388 <std>
 800a484:	68a0      	ldr	r0, [r4, #8]
 800a486:	2201      	movs	r2, #1
 800a488:	2109      	movs	r1, #9
 800a48a:	f7ff ff7d 	bl	800a388 <std>
 800a48e:	68e0      	ldr	r0, [r4, #12]
 800a490:	2202      	movs	r2, #2
 800a492:	2112      	movs	r1, #18
 800a494:	f7ff ff78 	bl	800a388 <std>
 800a498:	2301      	movs	r3, #1
 800a49a:	61a3      	str	r3, [r4, #24]
 800a49c:	e7d2      	b.n	800a444 <__sinit+0xc>
 800a49e:	bf00      	nop
 800a4a0:	0800b81c 	.word	0x0800b81c
 800a4a4:	0800a3d1 	.word	0x0800a3d1

0800a4a8 <__sfp>:
 800a4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	f7ff ffac 	bl	800a408 <__sfp_lock_acquire>
 800a4b0:	4b1e      	ldr	r3, [pc, #120]	; (800a52c <__sfp+0x84>)
 800a4b2:	681e      	ldr	r6, [r3, #0]
 800a4b4:	69b3      	ldr	r3, [r6, #24]
 800a4b6:	b913      	cbnz	r3, 800a4be <__sfp+0x16>
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	f7ff ffbd 	bl	800a438 <__sinit>
 800a4be:	3648      	adds	r6, #72	; 0x48
 800a4c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	d503      	bpl.n	800a4d0 <__sfp+0x28>
 800a4c8:	6833      	ldr	r3, [r6, #0]
 800a4ca:	b30b      	cbz	r3, 800a510 <__sfp+0x68>
 800a4cc:	6836      	ldr	r6, [r6, #0]
 800a4ce:	e7f7      	b.n	800a4c0 <__sfp+0x18>
 800a4d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4d4:	b9d5      	cbnz	r5, 800a50c <__sfp+0x64>
 800a4d6:	4b16      	ldr	r3, [pc, #88]	; (800a530 <__sfp+0x88>)
 800a4d8:	60e3      	str	r3, [r4, #12]
 800a4da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4de:	6665      	str	r5, [r4, #100]	; 0x64
 800a4e0:	f000 f84c 	bl	800a57c <__retarget_lock_init_recursive>
 800a4e4:	f7ff ff96 	bl	800a414 <__sfp_lock_release>
 800a4e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a4ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4f0:	6025      	str	r5, [r4, #0]
 800a4f2:	61a5      	str	r5, [r4, #24]
 800a4f4:	2208      	movs	r2, #8
 800a4f6:	4629      	mov	r1, r5
 800a4f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4fc:	f7fe fc40 	bl	8008d80 <memset>
 800a500:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a504:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a508:	4620      	mov	r0, r4
 800a50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a50c:	3468      	adds	r4, #104	; 0x68
 800a50e:	e7d9      	b.n	800a4c4 <__sfp+0x1c>
 800a510:	2104      	movs	r1, #4
 800a512:	4638      	mov	r0, r7
 800a514:	f7ff ff62 	bl	800a3dc <__sfmoreglue>
 800a518:	4604      	mov	r4, r0
 800a51a:	6030      	str	r0, [r6, #0]
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d1d5      	bne.n	800a4cc <__sfp+0x24>
 800a520:	f7ff ff78 	bl	800a414 <__sfp_lock_release>
 800a524:	230c      	movs	r3, #12
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	e7ee      	b.n	800a508 <__sfp+0x60>
 800a52a:	bf00      	nop
 800a52c:	0800b81c 	.word	0x0800b81c
 800a530:	ffff0001 	.word	0xffff0001

0800a534 <_fwalk_reent>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	4606      	mov	r6, r0
 800a53a:	4688      	mov	r8, r1
 800a53c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a540:	2700      	movs	r7, #0
 800a542:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a546:	f1b9 0901 	subs.w	r9, r9, #1
 800a54a:	d505      	bpl.n	800a558 <_fwalk_reent+0x24>
 800a54c:	6824      	ldr	r4, [r4, #0]
 800a54e:	2c00      	cmp	r4, #0
 800a550:	d1f7      	bne.n	800a542 <_fwalk_reent+0xe>
 800a552:	4638      	mov	r0, r7
 800a554:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a558:	89ab      	ldrh	r3, [r5, #12]
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d907      	bls.n	800a56e <_fwalk_reent+0x3a>
 800a55e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a562:	3301      	adds	r3, #1
 800a564:	d003      	beq.n	800a56e <_fwalk_reent+0x3a>
 800a566:	4629      	mov	r1, r5
 800a568:	4630      	mov	r0, r6
 800a56a:	47c0      	blx	r8
 800a56c:	4307      	orrs	r7, r0
 800a56e:	3568      	adds	r5, #104	; 0x68
 800a570:	e7e9      	b.n	800a546 <_fwalk_reent+0x12>
	...

0800a574 <_localeconv_r>:
 800a574:	4800      	ldr	r0, [pc, #0]	; (800a578 <_localeconv_r+0x4>)
 800a576:	4770      	bx	lr
 800a578:	20000160 	.word	0x20000160

0800a57c <__retarget_lock_init_recursive>:
 800a57c:	4770      	bx	lr

0800a57e <__retarget_lock_acquire_recursive>:
 800a57e:	4770      	bx	lr

0800a580 <__retarget_lock_release_recursive>:
 800a580:	4770      	bx	lr
	...

0800a584 <malloc>:
 800a584:	4b02      	ldr	r3, [pc, #8]	; (800a590 <malloc+0xc>)
 800a586:	4601      	mov	r1, r0
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	f000 bbef 	b.w	800ad6c <_malloc_r>
 800a58e:	bf00      	nop
 800a590:	2000000c 	.word	0x2000000c

0800a594 <memcpy>:
 800a594:	440a      	add	r2, r1
 800a596:	4291      	cmp	r1, r2
 800a598:	f100 33ff 	add.w	r3, r0, #4294967295
 800a59c:	d100      	bne.n	800a5a0 <memcpy+0xc>
 800a59e:	4770      	bx	lr
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5aa:	4291      	cmp	r1, r2
 800a5ac:	d1f9      	bne.n	800a5a2 <memcpy+0xe>
 800a5ae:	bd10      	pop	{r4, pc}

0800a5b0 <_Balloc>:
 800a5b0:	b570      	push	{r4, r5, r6, lr}
 800a5b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	460d      	mov	r5, r1
 800a5b8:	b976      	cbnz	r6, 800a5d8 <_Balloc+0x28>
 800a5ba:	2010      	movs	r0, #16
 800a5bc:	f7ff ffe2 	bl	800a584 <malloc>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	6260      	str	r0, [r4, #36]	; 0x24
 800a5c4:	b920      	cbnz	r0, 800a5d0 <_Balloc+0x20>
 800a5c6:	4b18      	ldr	r3, [pc, #96]	; (800a628 <_Balloc+0x78>)
 800a5c8:	4818      	ldr	r0, [pc, #96]	; (800a62c <_Balloc+0x7c>)
 800a5ca:	2166      	movs	r1, #102	; 0x66
 800a5cc:	f000 fea8 	bl	800b320 <__assert_func>
 800a5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5d4:	6006      	str	r6, [r0, #0]
 800a5d6:	60c6      	str	r6, [r0, #12]
 800a5d8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a5da:	68f3      	ldr	r3, [r6, #12]
 800a5dc:	b183      	cbz	r3, 800a600 <_Balloc+0x50>
 800a5de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5e0:	68db      	ldr	r3, [r3, #12]
 800a5e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a5e6:	b9b8      	cbnz	r0, 800a618 <_Balloc+0x68>
 800a5e8:	2101      	movs	r1, #1
 800a5ea:	fa01 f605 	lsl.w	r6, r1, r5
 800a5ee:	1d72      	adds	r2, r6, #5
 800a5f0:	0092      	lsls	r2, r2, #2
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f000 fb5a 	bl	800acac <_calloc_r>
 800a5f8:	b160      	cbz	r0, 800a614 <_Balloc+0x64>
 800a5fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a5fe:	e00e      	b.n	800a61e <_Balloc+0x6e>
 800a600:	2221      	movs	r2, #33	; 0x21
 800a602:	2104      	movs	r1, #4
 800a604:	4620      	mov	r0, r4
 800a606:	f000 fb51 	bl	800acac <_calloc_r>
 800a60a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a60c:	60f0      	str	r0, [r6, #12]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d1e4      	bne.n	800a5de <_Balloc+0x2e>
 800a614:	2000      	movs	r0, #0
 800a616:	bd70      	pop	{r4, r5, r6, pc}
 800a618:	6802      	ldr	r2, [r0, #0]
 800a61a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a61e:	2300      	movs	r3, #0
 800a620:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a624:	e7f7      	b.n	800a616 <_Balloc+0x66>
 800a626:	bf00      	nop
 800a628:	0800b861 	.word	0x0800b861
 800a62c:	0800b948 	.word	0x0800b948

0800a630 <_Bfree>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a634:	4605      	mov	r5, r0
 800a636:	460c      	mov	r4, r1
 800a638:	b976      	cbnz	r6, 800a658 <_Bfree+0x28>
 800a63a:	2010      	movs	r0, #16
 800a63c:	f7ff ffa2 	bl	800a584 <malloc>
 800a640:	4602      	mov	r2, r0
 800a642:	6268      	str	r0, [r5, #36]	; 0x24
 800a644:	b920      	cbnz	r0, 800a650 <_Bfree+0x20>
 800a646:	4b09      	ldr	r3, [pc, #36]	; (800a66c <_Bfree+0x3c>)
 800a648:	4809      	ldr	r0, [pc, #36]	; (800a670 <_Bfree+0x40>)
 800a64a:	218a      	movs	r1, #138	; 0x8a
 800a64c:	f000 fe68 	bl	800b320 <__assert_func>
 800a650:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a654:	6006      	str	r6, [r0, #0]
 800a656:	60c6      	str	r6, [r0, #12]
 800a658:	b13c      	cbz	r4, 800a66a <_Bfree+0x3a>
 800a65a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a65c:	6862      	ldr	r2, [r4, #4]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a664:	6021      	str	r1, [r4, #0]
 800a666:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a66a:	bd70      	pop	{r4, r5, r6, pc}
 800a66c:	0800b861 	.word	0x0800b861
 800a670:	0800b948 	.word	0x0800b948

0800a674 <__multadd>:
 800a674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a678:	690e      	ldr	r6, [r1, #16]
 800a67a:	4607      	mov	r7, r0
 800a67c:	4698      	mov	r8, r3
 800a67e:	460c      	mov	r4, r1
 800a680:	f101 0014 	add.w	r0, r1, #20
 800a684:	2300      	movs	r3, #0
 800a686:	6805      	ldr	r5, [r0, #0]
 800a688:	b2a9      	uxth	r1, r5
 800a68a:	fb02 8101 	mla	r1, r2, r1, r8
 800a68e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a692:	0c2d      	lsrs	r5, r5, #16
 800a694:	fb02 c505 	mla	r5, r2, r5, ip
 800a698:	b289      	uxth	r1, r1
 800a69a:	3301      	adds	r3, #1
 800a69c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a6a0:	429e      	cmp	r6, r3
 800a6a2:	f840 1b04 	str.w	r1, [r0], #4
 800a6a6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a6aa:	dcec      	bgt.n	800a686 <__multadd+0x12>
 800a6ac:	f1b8 0f00 	cmp.w	r8, #0
 800a6b0:	d022      	beq.n	800a6f8 <__multadd+0x84>
 800a6b2:	68a3      	ldr	r3, [r4, #8]
 800a6b4:	42b3      	cmp	r3, r6
 800a6b6:	dc19      	bgt.n	800a6ec <__multadd+0x78>
 800a6b8:	6861      	ldr	r1, [r4, #4]
 800a6ba:	4638      	mov	r0, r7
 800a6bc:	3101      	adds	r1, #1
 800a6be:	f7ff ff77 	bl	800a5b0 <_Balloc>
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	b928      	cbnz	r0, 800a6d2 <__multadd+0x5e>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	4b0d      	ldr	r3, [pc, #52]	; (800a700 <__multadd+0x8c>)
 800a6ca:	480e      	ldr	r0, [pc, #56]	; (800a704 <__multadd+0x90>)
 800a6cc:	21b5      	movs	r1, #181	; 0xb5
 800a6ce:	f000 fe27 	bl	800b320 <__assert_func>
 800a6d2:	6922      	ldr	r2, [r4, #16]
 800a6d4:	3202      	adds	r2, #2
 800a6d6:	f104 010c 	add.w	r1, r4, #12
 800a6da:	0092      	lsls	r2, r2, #2
 800a6dc:	300c      	adds	r0, #12
 800a6de:	f7ff ff59 	bl	800a594 <memcpy>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	4638      	mov	r0, r7
 800a6e6:	f7ff ffa3 	bl	800a630 <_Bfree>
 800a6ea:	462c      	mov	r4, r5
 800a6ec:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a6f0:	3601      	adds	r6, #1
 800a6f2:	f8c3 8014 	str.w	r8, [r3, #20]
 800a6f6:	6126      	str	r6, [r4, #16]
 800a6f8:	4620      	mov	r0, r4
 800a6fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6fe:	bf00      	nop
 800a700:	0800b8d7 	.word	0x0800b8d7
 800a704:	0800b948 	.word	0x0800b948

0800a708 <__hi0bits>:
 800a708:	0c03      	lsrs	r3, r0, #16
 800a70a:	041b      	lsls	r3, r3, #16
 800a70c:	b9d3      	cbnz	r3, 800a744 <__hi0bits+0x3c>
 800a70e:	0400      	lsls	r0, r0, #16
 800a710:	2310      	movs	r3, #16
 800a712:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a716:	bf04      	itt	eq
 800a718:	0200      	lsleq	r0, r0, #8
 800a71a:	3308      	addeq	r3, #8
 800a71c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a720:	bf04      	itt	eq
 800a722:	0100      	lsleq	r0, r0, #4
 800a724:	3304      	addeq	r3, #4
 800a726:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a72a:	bf04      	itt	eq
 800a72c:	0080      	lsleq	r0, r0, #2
 800a72e:	3302      	addeq	r3, #2
 800a730:	2800      	cmp	r0, #0
 800a732:	db05      	blt.n	800a740 <__hi0bits+0x38>
 800a734:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a738:	f103 0301 	add.w	r3, r3, #1
 800a73c:	bf08      	it	eq
 800a73e:	2320      	moveq	r3, #32
 800a740:	4618      	mov	r0, r3
 800a742:	4770      	bx	lr
 800a744:	2300      	movs	r3, #0
 800a746:	e7e4      	b.n	800a712 <__hi0bits+0xa>

0800a748 <__lo0bits>:
 800a748:	6803      	ldr	r3, [r0, #0]
 800a74a:	f013 0207 	ands.w	r2, r3, #7
 800a74e:	4601      	mov	r1, r0
 800a750:	d00b      	beq.n	800a76a <__lo0bits+0x22>
 800a752:	07da      	lsls	r2, r3, #31
 800a754:	d424      	bmi.n	800a7a0 <__lo0bits+0x58>
 800a756:	0798      	lsls	r0, r3, #30
 800a758:	bf49      	itett	mi
 800a75a:	085b      	lsrmi	r3, r3, #1
 800a75c:	089b      	lsrpl	r3, r3, #2
 800a75e:	2001      	movmi	r0, #1
 800a760:	600b      	strmi	r3, [r1, #0]
 800a762:	bf5c      	itt	pl
 800a764:	600b      	strpl	r3, [r1, #0]
 800a766:	2002      	movpl	r0, #2
 800a768:	4770      	bx	lr
 800a76a:	b298      	uxth	r0, r3
 800a76c:	b9b0      	cbnz	r0, 800a79c <__lo0bits+0x54>
 800a76e:	0c1b      	lsrs	r3, r3, #16
 800a770:	2010      	movs	r0, #16
 800a772:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a776:	bf04      	itt	eq
 800a778:	0a1b      	lsreq	r3, r3, #8
 800a77a:	3008      	addeq	r0, #8
 800a77c:	071a      	lsls	r2, r3, #28
 800a77e:	bf04      	itt	eq
 800a780:	091b      	lsreq	r3, r3, #4
 800a782:	3004      	addeq	r0, #4
 800a784:	079a      	lsls	r2, r3, #30
 800a786:	bf04      	itt	eq
 800a788:	089b      	lsreq	r3, r3, #2
 800a78a:	3002      	addeq	r0, #2
 800a78c:	07da      	lsls	r2, r3, #31
 800a78e:	d403      	bmi.n	800a798 <__lo0bits+0x50>
 800a790:	085b      	lsrs	r3, r3, #1
 800a792:	f100 0001 	add.w	r0, r0, #1
 800a796:	d005      	beq.n	800a7a4 <__lo0bits+0x5c>
 800a798:	600b      	str	r3, [r1, #0]
 800a79a:	4770      	bx	lr
 800a79c:	4610      	mov	r0, r2
 800a79e:	e7e8      	b.n	800a772 <__lo0bits+0x2a>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	4770      	bx	lr
 800a7a4:	2020      	movs	r0, #32
 800a7a6:	4770      	bx	lr

0800a7a8 <__i2b>:
 800a7a8:	b510      	push	{r4, lr}
 800a7aa:	460c      	mov	r4, r1
 800a7ac:	2101      	movs	r1, #1
 800a7ae:	f7ff feff 	bl	800a5b0 <_Balloc>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	b928      	cbnz	r0, 800a7c2 <__i2b+0x1a>
 800a7b6:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <__i2b+0x24>)
 800a7b8:	4805      	ldr	r0, [pc, #20]	; (800a7d0 <__i2b+0x28>)
 800a7ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a7be:	f000 fdaf 	bl	800b320 <__assert_func>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	6144      	str	r4, [r0, #20]
 800a7c6:	6103      	str	r3, [r0, #16]
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	bf00      	nop
 800a7cc:	0800b8d7 	.word	0x0800b8d7
 800a7d0:	0800b948 	.word	0x0800b948

0800a7d4 <__multiply>:
 800a7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	4614      	mov	r4, r2
 800a7da:	690a      	ldr	r2, [r1, #16]
 800a7dc:	6923      	ldr	r3, [r4, #16]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	bfb8      	it	lt
 800a7e2:	460b      	movlt	r3, r1
 800a7e4:	460d      	mov	r5, r1
 800a7e6:	bfbc      	itt	lt
 800a7e8:	4625      	movlt	r5, r4
 800a7ea:	461c      	movlt	r4, r3
 800a7ec:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a7f0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a7f4:	68ab      	ldr	r3, [r5, #8]
 800a7f6:	6869      	ldr	r1, [r5, #4]
 800a7f8:	eb0a 0709 	add.w	r7, sl, r9
 800a7fc:	42bb      	cmp	r3, r7
 800a7fe:	b085      	sub	sp, #20
 800a800:	bfb8      	it	lt
 800a802:	3101      	addlt	r1, #1
 800a804:	f7ff fed4 	bl	800a5b0 <_Balloc>
 800a808:	b930      	cbnz	r0, 800a818 <__multiply+0x44>
 800a80a:	4602      	mov	r2, r0
 800a80c:	4b42      	ldr	r3, [pc, #264]	; (800a918 <__multiply+0x144>)
 800a80e:	4843      	ldr	r0, [pc, #268]	; (800a91c <__multiply+0x148>)
 800a810:	f240 115d 	movw	r1, #349	; 0x15d
 800a814:	f000 fd84 	bl	800b320 <__assert_func>
 800a818:	f100 0614 	add.w	r6, r0, #20
 800a81c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a820:	4633      	mov	r3, r6
 800a822:	2200      	movs	r2, #0
 800a824:	4543      	cmp	r3, r8
 800a826:	d31e      	bcc.n	800a866 <__multiply+0x92>
 800a828:	f105 0c14 	add.w	ip, r5, #20
 800a82c:	f104 0314 	add.w	r3, r4, #20
 800a830:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a834:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a838:	9202      	str	r2, [sp, #8]
 800a83a:	ebac 0205 	sub.w	r2, ip, r5
 800a83e:	3a15      	subs	r2, #21
 800a840:	f022 0203 	bic.w	r2, r2, #3
 800a844:	3204      	adds	r2, #4
 800a846:	f105 0115 	add.w	r1, r5, #21
 800a84a:	458c      	cmp	ip, r1
 800a84c:	bf38      	it	cc
 800a84e:	2204      	movcc	r2, #4
 800a850:	9201      	str	r2, [sp, #4]
 800a852:	9a02      	ldr	r2, [sp, #8]
 800a854:	9303      	str	r3, [sp, #12]
 800a856:	429a      	cmp	r2, r3
 800a858:	d808      	bhi.n	800a86c <__multiply+0x98>
 800a85a:	2f00      	cmp	r7, #0
 800a85c:	dc55      	bgt.n	800a90a <__multiply+0x136>
 800a85e:	6107      	str	r7, [r0, #16]
 800a860:	b005      	add	sp, #20
 800a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a866:	f843 2b04 	str.w	r2, [r3], #4
 800a86a:	e7db      	b.n	800a824 <__multiply+0x50>
 800a86c:	f8b3 a000 	ldrh.w	sl, [r3]
 800a870:	f1ba 0f00 	cmp.w	sl, #0
 800a874:	d020      	beq.n	800a8b8 <__multiply+0xe4>
 800a876:	f105 0e14 	add.w	lr, r5, #20
 800a87a:	46b1      	mov	r9, r6
 800a87c:	2200      	movs	r2, #0
 800a87e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a882:	f8d9 b000 	ldr.w	fp, [r9]
 800a886:	b2a1      	uxth	r1, r4
 800a888:	fa1f fb8b 	uxth.w	fp, fp
 800a88c:	fb0a b101 	mla	r1, sl, r1, fp
 800a890:	4411      	add	r1, r2
 800a892:	f8d9 2000 	ldr.w	r2, [r9]
 800a896:	0c24      	lsrs	r4, r4, #16
 800a898:	0c12      	lsrs	r2, r2, #16
 800a89a:	fb0a 2404 	mla	r4, sl, r4, r2
 800a89e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a8a2:	b289      	uxth	r1, r1
 800a8a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a8a8:	45f4      	cmp	ip, lr
 800a8aa:	f849 1b04 	str.w	r1, [r9], #4
 800a8ae:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a8b2:	d8e4      	bhi.n	800a87e <__multiply+0xaa>
 800a8b4:	9901      	ldr	r1, [sp, #4]
 800a8b6:	5072      	str	r2, [r6, r1]
 800a8b8:	9a03      	ldr	r2, [sp, #12]
 800a8ba:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8be:	3304      	adds	r3, #4
 800a8c0:	f1b9 0f00 	cmp.w	r9, #0
 800a8c4:	d01f      	beq.n	800a906 <__multiply+0x132>
 800a8c6:	6834      	ldr	r4, [r6, #0]
 800a8c8:	f105 0114 	add.w	r1, r5, #20
 800a8cc:	46b6      	mov	lr, r6
 800a8ce:	f04f 0a00 	mov.w	sl, #0
 800a8d2:	880a      	ldrh	r2, [r1, #0]
 800a8d4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a8d8:	fb09 b202 	mla	r2, r9, r2, fp
 800a8dc:	4492      	add	sl, r2
 800a8de:	b2a4      	uxth	r4, r4
 800a8e0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a8e4:	f84e 4b04 	str.w	r4, [lr], #4
 800a8e8:	f851 4b04 	ldr.w	r4, [r1], #4
 800a8ec:	f8be 2000 	ldrh.w	r2, [lr]
 800a8f0:	0c24      	lsrs	r4, r4, #16
 800a8f2:	fb09 2404 	mla	r4, r9, r4, r2
 800a8f6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a8fa:	458c      	cmp	ip, r1
 800a8fc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a900:	d8e7      	bhi.n	800a8d2 <__multiply+0xfe>
 800a902:	9a01      	ldr	r2, [sp, #4]
 800a904:	50b4      	str	r4, [r6, r2]
 800a906:	3604      	adds	r6, #4
 800a908:	e7a3      	b.n	800a852 <__multiply+0x7e>
 800a90a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1a5      	bne.n	800a85e <__multiply+0x8a>
 800a912:	3f01      	subs	r7, #1
 800a914:	e7a1      	b.n	800a85a <__multiply+0x86>
 800a916:	bf00      	nop
 800a918:	0800b8d7 	.word	0x0800b8d7
 800a91c:	0800b948 	.word	0x0800b948

0800a920 <__pow5mult>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	4615      	mov	r5, r2
 800a926:	f012 0203 	ands.w	r2, r2, #3
 800a92a:	4606      	mov	r6, r0
 800a92c:	460f      	mov	r7, r1
 800a92e:	d007      	beq.n	800a940 <__pow5mult+0x20>
 800a930:	4c25      	ldr	r4, [pc, #148]	; (800a9c8 <__pow5mult+0xa8>)
 800a932:	3a01      	subs	r2, #1
 800a934:	2300      	movs	r3, #0
 800a936:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a93a:	f7ff fe9b 	bl	800a674 <__multadd>
 800a93e:	4607      	mov	r7, r0
 800a940:	10ad      	asrs	r5, r5, #2
 800a942:	d03d      	beq.n	800a9c0 <__pow5mult+0xa0>
 800a944:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a946:	b97c      	cbnz	r4, 800a968 <__pow5mult+0x48>
 800a948:	2010      	movs	r0, #16
 800a94a:	f7ff fe1b 	bl	800a584 <malloc>
 800a94e:	4602      	mov	r2, r0
 800a950:	6270      	str	r0, [r6, #36]	; 0x24
 800a952:	b928      	cbnz	r0, 800a960 <__pow5mult+0x40>
 800a954:	4b1d      	ldr	r3, [pc, #116]	; (800a9cc <__pow5mult+0xac>)
 800a956:	481e      	ldr	r0, [pc, #120]	; (800a9d0 <__pow5mult+0xb0>)
 800a958:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a95c:	f000 fce0 	bl	800b320 <__assert_func>
 800a960:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a964:	6004      	str	r4, [r0, #0]
 800a966:	60c4      	str	r4, [r0, #12]
 800a968:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a96c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a970:	b94c      	cbnz	r4, 800a986 <__pow5mult+0x66>
 800a972:	f240 2171 	movw	r1, #625	; 0x271
 800a976:	4630      	mov	r0, r6
 800a978:	f7ff ff16 	bl	800a7a8 <__i2b>
 800a97c:	2300      	movs	r3, #0
 800a97e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a982:	4604      	mov	r4, r0
 800a984:	6003      	str	r3, [r0, #0]
 800a986:	f04f 0900 	mov.w	r9, #0
 800a98a:	07eb      	lsls	r3, r5, #31
 800a98c:	d50a      	bpl.n	800a9a4 <__pow5mult+0x84>
 800a98e:	4639      	mov	r1, r7
 800a990:	4622      	mov	r2, r4
 800a992:	4630      	mov	r0, r6
 800a994:	f7ff ff1e 	bl	800a7d4 <__multiply>
 800a998:	4639      	mov	r1, r7
 800a99a:	4680      	mov	r8, r0
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7ff fe47 	bl	800a630 <_Bfree>
 800a9a2:	4647      	mov	r7, r8
 800a9a4:	106d      	asrs	r5, r5, #1
 800a9a6:	d00b      	beq.n	800a9c0 <__pow5mult+0xa0>
 800a9a8:	6820      	ldr	r0, [r4, #0]
 800a9aa:	b938      	cbnz	r0, 800a9bc <__pow5mult+0x9c>
 800a9ac:	4622      	mov	r2, r4
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff ff0f 	bl	800a7d4 <__multiply>
 800a9b6:	6020      	str	r0, [r4, #0]
 800a9b8:	f8c0 9000 	str.w	r9, [r0]
 800a9bc:	4604      	mov	r4, r0
 800a9be:	e7e4      	b.n	800a98a <__pow5mult+0x6a>
 800a9c0:	4638      	mov	r0, r7
 800a9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c6:	bf00      	nop
 800a9c8:	0800ba98 	.word	0x0800ba98
 800a9cc:	0800b861 	.word	0x0800b861
 800a9d0:	0800b948 	.word	0x0800b948

0800a9d4 <__lshift>:
 800a9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9d8:	460c      	mov	r4, r1
 800a9da:	6849      	ldr	r1, [r1, #4]
 800a9dc:	6923      	ldr	r3, [r4, #16]
 800a9de:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a9e2:	68a3      	ldr	r3, [r4, #8]
 800a9e4:	4607      	mov	r7, r0
 800a9e6:	4691      	mov	r9, r2
 800a9e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a9ec:	f108 0601 	add.w	r6, r8, #1
 800a9f0:	42b3      	cmp	r3, r6
 800a9f2:	db0b      	blt.n	800aa0c <__lshift+0x38>
 800a9f4:	4638      	mov	r0, r7
 800a9f6:	f7ff fddb 	bl	800a5b0 <_Balloc>
 800a9fa:	4605      	mov	r5, r0
 800a9fc:	b948      	cbnz	r0, 800aa12 <__lshift+0x3e>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	4b28      	ldr	r3, [pc, #160]	; (800aaa4 <__lshift+0xd0>)
 800aa02:	4829      	ldr	r0, [pc, #164]	; (800aaa8 <__lshift+0xd4>)
 800aa04:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aa08:	f000 fc8a 	bl	800b320 <__assert_func>
 800aa0c:	3101      	adds	r1, #1
 800aa0e:	005b      	lsls	r3, r3, #1
 800aa10:	e7ee      	b.n	800a9f0 <__lshift+0x1c>
 800aa12:	2300      	movs	r3, #0
 800aa14:	f100 0114 	add.w	r1, r0, #20
 800aa18:	f100 0210 	add.w	r2, r0, #16
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	4553      	cmp	r3, sl
 800aa20:	db33      	blt.n	800aa8a <__lshift+0xb6>
 800aa22:	6920      	ldr	r0, [r4, #16]
 800aa24:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa28:	f104 0314 	add.w	r3, r4, #20
 800aa2c:	f019 091f 	ands.w	r9, r9, #31
 800aa30:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa34:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa38:	d02b      	beq.n	800aa92 <__lshift+0xbe>
 800aa3a:	f1c9 0e20 	rsb	lr, r9, #32
 800aa3e:	468a      	mov	sl, r1
 800aa40:	2200      	movs	r2, #0
 800aa42:	6818      	ldr	r0, [r3, #0]
 800aa44:	fa00 f009 	lsl.w	r0, r0, r9
 800aa48:	4302      	orrs	r2, r0
 800aa4a:	f84a 2b04 	str.w	r2, [sl], #4
 800aa4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa52:	459c      	cmp	ip, r3
 800aa54:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa58:	d8f3      	bhi.n	800aa42 <__lshift+0x6e>
 800aa5a:	ebac 0304 	sub.w	r3, ip, r4
 800aa5e:	3b15      	subs	r3, #21
 800aa60:	f023 0303 	bic.w	r3, r3, #3
 800aa64:	3304      	adds	r3, #4
 800aa66:	f104 0015 	add.w	r0, r4, #21
 800aa6a:	4584      	cmp	ip, r0
 800aa6c:	bf38      	it	cc
 800aa6e:	2304      	movcc	r3, #4
 800aa70:	50ca      	str	r2, [r1, r3]
 800aa72:	b10a      	cbz	r2, 800aa78 <__lshift+0xa4>
 800aa74:	f108 0602 	add.w	r6, r8, #2
 800aa78:	3e01      	subs	r6, #1
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	612e      	str	r6, [r5, #16]
 800aa7e:	4621      	mov	r1, r4
 800aa80:	f7ff fdd6 	bl	800a630 <_Bfree>
 800aa84:	4628      	mov	r0, r5
 800aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa8a:	f842 0f04 	str.w	r0, [r2, #4]!
 800aa8e:	3301      	adds	r3, #1
 800aa90:	e7c5      	b.n	800aa1e <__lshift+0x4a>
 800aa92:	3904      	subs	r1, #4
 800aa94:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa98:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa9c:	459c      	cmp	ip, r3
 800aa9e:	d8f9      	bhi.n	800aa94 <__lshift+0xc0>
 800aaa0:	e7ea      	b.n	800aa78 <__lshift+0xa4>
 800aaa2:	bf00      	nop
 800aaa4:	0800b8d7 	.word	0x0800b8d7
 800aaa8:	0800b948 	.word	0x0800b948

0800aaac <__mcmp>:
 800aaac:	b530      	push	{r4, r5, lr}
 800aaae:	6902      	ldr	r2, [r0, #16]
 800aab0:	690c      	ldr	r4, [r1, #16]
 800aab2:	1b12      	subs	r2, r2, r4
 800aab4:	d10e      	bne.n	800aad4 <__mcmp+0x28>
 800aab6:	f100 0314 	add.w	r3, r0, #20
 800aaba:	3114      	adds	r1, #20
 800aabc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800aac0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800aac4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800aac8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800aacc:	42a5      	cmp	r5, r4
 800aace:	d003      	beq.n	800aad8 <__mcmp+0x2c>
 800aad0:	d305      	bcc.n	800aade <__mcmp+0x32>
 800aad2:	2201      	movs	r2, #1
 800aad4:	4610      	mov	r0, r2
 800aad6:	bd30      	pop	{r4, r5, pc}
 800aad8:	4283      	cmp	r3, r0
 800aada:	d3f3      	bcc.n	800aac4 <__mcmp+0x18>
 800aadc:	e7fa      	b.n	800aad4 <__mcmp+0x28>
 800aade:	f04f 32ff 	mov.w	r2, #4294967295
 800aae2:	e7f7      	b.n	800aad4 <__mcmp+0x28>

0800aae4 <__mdiff>:
 800aae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aae8:	460c      	mov	r4, r1
 800aaea:	4606      	mov	r6, r0
 800aaec:	4611      	mov	r1, r2
 800aaee:	4620      	mov	r0, r4
 800aaf0:	4617      	mov	r7, r2
 800aaf2:	f7ff ffdb 	bl	800aaac <__mcmp>
 800aaf6:	1e05      	subs	r5, r0, #0
 800aaf8:	d110      	bne.n	800ab1c <__mdiff+0x38>
 800aafa:	4629      	mov	r1, r5
 800aafc:	4630      	mov	r0, r6
 800aafe:	f7ff fd57 	bl	800a5b0 <_Balloc>
 800ab02:	b930      	cbnz	r0, 800ab12 <__mdiff+0x2e>
 800ab04:	4b39      	ldr	r3, [pc, #228]	; (800abec <__mdiff+0x108>)
 800ab06:	4602      	mov	r2, r0
 800ab08:	f240 2132 	movw	r1, #562	; 0x232
 800ab0c:	4838      	ldr	r0, [pc, #224]	; (800abf0 <__mdiff+0x10c>)
 800ab0e:	f000 fc07 	bl	800b320 <__assert_func>
 800ab12:	2301      	movs	r3, #1
 800ab14:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1c:	bfa4      	itt	ge
 800ab1e:	463b      	movge	r3, r7
 800ab20:	4627      	movge	r7, r4
 800ab22:	4630      	mov	r0, r6
 800ab24:	6879      	ldr	r1, [r7, #4]
 800ab26:	bfa6      	itte	ge
 800ab28:	461c      	movge	r4, r3
 800ab2a:	2500      	movge	r5, #0
 800ab2c:	2501      	movlt	r5, #1
 800ab2e:	f7ff fd3f 	bl	800a5b0 <_Balloc>
 800ab32:	b920      	cbnz	r0, 800ab3e <__mdiff+0x5a>
 800ab34:	4b2d      	ldr	r3, [pc, #180]	; (800abec <__mdiff+0x108>)
 800ab36:	4602      	mov	r2, r0
 800ab38:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ab3c:	e7e6      	b.n	800ab0c <__mdiff+0x28>
 800ab3e:	693e      	ldr	r6, [r7, #16]
 800ab40:	60c5      	str	r5, [r0, #12]
 800ab42:	6925      	ldr	r5, [r4, #16]
 800ab44:	f107 0114 	add.w	r1, r7, #20
 800ab48:	f104 0914 	add.w	r9, r4, #20
 800ab4c:	f100 0e14 	add.w	lr, r0, #20
 800ab50:	f107 0210 	add.w	r2, r7, #16
 800ab54:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ab58:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ab5c:	46f2      	mov	sl, lr
 800ab5e:	2700      	movs	r7, #0
 800ab60:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ab68:	fa1f f883 	uxth.w	r8, r3
 800ab6c:	fa17 f78b 	uxtah	r7, r7, fp
 800ab70:	0c1b      	lsrs	r3, r3, #16
 800ab72:	eba7 0808 	sub.w	r8, r7, r8
 800ab76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ab7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ab7e:	fa1f f888 	uxth.w	r8, r8
 800ab82:	141f      	asrs	r7, r3, #16
 800ab84:	454d      	cmp	r5, r9
 800ab86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ab8a:	f84a 3b04 	str.w	r3, [sl], #4
 800ab8e:	d8e7      	bhi.n	800ab60 <__mdiff+0x7c>
 800ab90:	1b2b      	subs	r3, r5, r4
 800ab92:	3b15      	subs	r3, #21
 800ab94:	f023 0303 	bic.w	r3, r3, #3
 800ab98:	3304      	adds	r3, #4
 800ab9a:	3415      	adds	r4, #21
 800ab9c:	42a5      	cmp	r5, r4
 800ab9e:	bf38      	it	cc
 800aba0:	2304      	movcc	r3, #4
 800aba2:	4419      	add	r1, r3
 800aba4:	4473      	add	r3, lr
 800aba6:	469e      	mov	lr, r3
 800aba8:	460d      	mov	r5, r1
 800abaa:	4565      	cmp	r5, ip
 800abac:	d30e      	bcc.n	800abcc <__mdiff+0xe8>
 800abae:	f10c 0203 	add.w	r2, ip, #3
 800abb2:	1a52      	subs	r2, r2, r1
 800abb4:	f022 0203 	bic.w	r2, r2, #3
 800abb8:	3903      	subs	r1, #3
 800abba:	458c      	cmp	ip, r1
 800abbc:	bf38      	it	cc
 800abbe:	2200      	movcc	r2, #0
 800abc0:	441a      	add	r2, r3
 800abc2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800abc6:	b17b      	cbz	r3, 800abe8 <__mdiff+0x104>
 800abc8:	6106      	str	r6, [r0, #16]
 800abca:	e7a5      	b.n	800ab18 <__mdiff+0x34>
 800abcc:	f855 8b04 	ldr.w	r8, [r5], #4
 800abd0:	fa17 f488 	uxtah	r4, r7, r8
 800abd4:	1422      	asrs	r2, r4, #16
 800abd6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800abda:	b2a4      	uxth	r4, r4
 800abdc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800abe0:	f84e 4b04 	str.w	r4, [lr], #4
 800abe4:	1417      	asrs	r7, r2, #16
 800abe6:	e7e0      	b.n	800abaa <__mdiff+0xc6>
 800abe8:	3e01      	subs	r6, #1
 800abea:	e7ea      	b.n	800abc2 <__mdiff+0xde>
 800abec:	0800b8d7 	.word	0x0800b8d7
 800abf0:	0800b948 	.word	0x0800b948

0800abf4 <__d2b>:
 800abf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800abf8:	4689      	mov	r9, r1
 800abfa:	2101      	movs	r1, #1
 800abfc:	ec57 6b10 	vmov	r6, r7, d0
 800ac00:	4690      	mov	r8, r2
 800ac02:	f7ff fcd5 	bl	800a5b0 <_Balloc>
 800ac06:	4604      	mov	r4, r0
 800ac08:	b930      	cbnz	r0, 800ac18 <__d2b+0x24>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	4b25      	ldr	r3, [pc, #148]	; (800aca4 <__d2b+0xb0>)
 800ac0e:	4826      	ldr	r0, [pc, #152]	; (800aca8 <__d2b+0xb4>)
 800ac10:	f240 310a 	movw	r1, #778	; 0x30a
 800ac14:	f000 fb84 	bl	800b320 <__assert_func>
 800ac18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ac1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ac20:	bb35      	cbnz	r5, 800ac70 <__d2b+0x7c>
 800ac22:	2e00      	cmp	r6, #0
 800ac24:	9301      	str	r3, [sp, #4]
 800ac26:	d028      	beq.n	800ac7a <__d2b+0x86>
 800ac28:	4668      	mov	r0, sp
 800ac2a:	9600      	str	r6, [sp, #0]
 800ac2c:	f7ff fd8c 	bl	800a748 <__lo0bits>
 800ac30:	9900      	ldr	r1, [sp, #0]
 800ac32:	b300      	cbz	r0, 800ac76 <__d2b+0x82>
 800ac34:	9a01      	ldr	r2, [sp, #4]
 800ac36:	f1c0 0320 	rsb	r3, r0, #32
 800ac3a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3e:	430b      	orrs	r3, r1
 800ac40:	40c2      	lsrs	r2, r0
 800ac42:	6163      	str	r3, [r4, #20]
 800ac44:	9201      	str	r2, [sp, #4]
 800ac46:	9b01      	ldr	r3, [sp, #4]
 800ac48:	61a3      	str	r3, [r4, #24]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bf14      	ite	ne
 800ac4e:	2202      	movne	r2, #2
 800ac50:	2201      	moveq	r2, #1
 800ac52:	6122      	str	r2, [r4, #16]
 800ac54:	b1d5      	cbz	r5, 800ac8c <__d2b+0x98>
 800ac56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ac5a:	4405      	add	r5, r0
 800ac5c:	f8c9 5000 	str.w	r5, [r9]
 800ac60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac64:	f8c8 0000 	str.w	r0, [r8]
 800ac68:	4620      	mov	r0, r4
 800ac6a:	b003      	add	sp, #12
 800ac6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac74:	e7d5      	b.n	800ac22 <__d2b+0x2e>
 800ac76:	6161      	str	r1, [r4, #20]
 800ac78:	e7e5      	b.n	800ac46 <__d2b+0x52>
 800ac7a:	a801      	add	r0, sp, #4
 800ac7c:	f7ff fd64 	bl	800a748 <__lo0bits>
 800ac80:	9b01      	ldr	r3, [sp, #4]
 800ac82:	6163      	str	r3, [r4, #20]
 800ac84:	2201      	movs	r2, #1
 800ac86:	6122      	str	r2, [r4, #16]
 800ac88:	3020      	adds	r0, #32
 800ac8a:	e7e3      	b.n	800ac54 <__d2b+0x60>
 800ac8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ac94:	f8c9 0000 	str.w	r0, [r9]
 800ac98:	6918      	ldr	r0, [r3, #16]
 800ac9a:	f7ff fd35 	bl	800a708 <__hi0bits>
 800ac9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aca2:	e7df      	b.n	800ac64 <__d2b+0x70>
 800aca4:	0800b8d7 	.word	0x0800b8d7
 800aca8:	0800b948 	.word	0x0800b948

0800acac <_calloc_r>:
 800acac:	b513      	push	{r0, r1, r4, lr}
 800acae:	434a      	muls	r2, r1
 800acb0:	4611      	mov	r1, r2
 800acb2:	9201      	str	r2, [sp, #4]
 800acb4:	f000 f85a 	bl	800ad6c <_malloc_r>
 800acb8:	4604      	mov	r4, r0
 800acba:	b118      	cbz	r0, 800acc4 <_calloc_r+0x18>
 800acbc:	9a01      	ldr	r2, [sp, #4]
 800acbe:	2100      	movs	r1, #0
 800acc0:	f7fe f85e 	bl	8008d80 <memset>
 800acc4:	4620      	mov	r0, r4
 800acc6:	b002      	add	sp, #8
 800acc8:	bd10      	pop	{r4, pc}
	...

0800accc <_free_r>:
 800accc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acce:	2900      	cmp	r1, #0
 800acd0:	d048      	beq.n	800ad64 <_free_r+0x98>
 800acd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd6:	9001      	str	r0, [sp, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f1a1 0404 	sub.w	r4, r1, #4
 800acde:	bfb8      	it	lt
 800ace0:	18e4      	addlt	r4, r4, r3
 800ace2:	f000 fca7 	bl	800b634 <__malloc_lock>
 800ace6:	4a20      	ldr	r2, [pc, #128]	; (800ad68 <_free_r+0x9c>)
 800ace8:	9801      	ldr	r0, [sp, #4]
 800acea:	6813      	ldr	r3, [r2, #0]
 800acec:	4615      	mov	r5, r2
 800acee:	b933      	cbnz	r3, 800acfe <_free_r+0x32>
 800acf0:	6063      	str	r3, [r4, #4]
 800acf2:	6014      	str	r4, [r2, #0]
 800acf4:	b003      	add	sp, #12
 800acf6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acfa:	f000 bca1 	b.w	800b640 <__malloc_unlock>
 800acfe:	42a3      	cmp	r3, r4
 800ad00:	d90b      	bls.n	800ad1a <_free_r+0x4e>
 800ad02:	6821      	ldr	r1, [r4, #0]
 800ad04:	1862      	adds	r2, r4, r1
 800ad06:	4293      	cmp	r3, r2
 800ad08:	bf04      	itt	eq
 800ad0a:	681a      	ldreq	r2, [r3, #0]
 800ad0c:	685b      	ldreq	r3, [r3, #4]
 800ad0e:	6063      	str	r3, [r4, #4]
 800ad10:	bf04      	itt	eq
 800ad12:	1852      	addeq	r2, r2, r1
 800ad14:	6022      	streq	r2, [r4, #0]
 800ad16:	602c      	str	r4, [r5, #0]
 800ad18:	e7ec      	b.n	800acf4 <_free_r+0x28>
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	b10b      	cbz	r3, 800ad24 <_free_r+0x58>
 800ad20:	42a3      	cmp	r3, r4
 800ad22:	d9fa      	bls.n	800ad1a <_free_r+0x4e>
 800ad24:	6811      	ldr	r1, [r2, #0]
 800ad26:	1855      	adds	r5, r2, r1
 800ad28:	42a5      	cmp	r5, r4
 800ad2a:	d10b      	bne.n	800ad44 <_free_r+0x78>
 800ad2c:	6824      	ldr	r4, [r4, #0]
 800ad2e:	4421      	add	r1, r4
 800ad30:	1854      	adds	r4, r2, r1
 800ad32:	42a3      	cmp	r3, r4
 800ad34:	6011      	str	r1, [r2, #0]
 800ad36:	d1dd      	bne.n	800acf4 <_free_r+0x28>
 800ad38:	681c      	ldr	r4, [r3, #0]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	6053      	str	r3, [r2, #4]
 800ad3e:	4421      	add	r1, r4
 800ad40:	6011      	str	r1, [r2, #0]
 800ad42:	e7d7      	b.n	800acf4 <_free_r+0x28>
 800ad44:	d902      	bls.n	800ad4c <_free_r+0x80>
 800ad46:	230c      	movs	r3, #12
 800ad48:	6003      	str	r3, [r0, #0]
 800ad4a:	e7d3      	b.n	800acf4 <_free_r+0x28>
 800ad4c:	6825      	ldr	r5, [r4, #0]
 800ad4e:	1961      	adds	r1, r4, r5
 800ad50:	428b      	cmp	r3, r1
 800ad52:	bf04      	itt	eq
 800ad54:	6819      	ldreq	r1, [r3, #0]
 800ad56:	685b      	ldreq	r3, [r3, #4]
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	bf04      	itt	eq
 800ad5c:	1949      	addeq	r1, r1, r5
 800ad5e:	6021      	streq	r1, [r4, #0]
 800ad60:	6054      	str	r4, [r2, #4]
 800ad62:	e7c7      	b.n	800acf4 <_free_r+0x28>
 800ad64:	b003      	add	sp, #12
 800ad66:	bd30      	pop	{r4, r5, pc}
 800ad68:	20000210 	.word	0x20000210

0800ad6c <_malloc_r>:
 800ad6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6e:	1ccd      	adds	r5, r1, #3
 800ad70:	f025 0503 	bic.w	r5, r5, #3
 800ad74:	3508      	adds	r5, #8
 800ad76:	2d0c      	cmp	r5, #12
 800ad78:	bf38      	it	cc
 800ad7a:	250c      	movcc	r5, #12
 800ad7c:	2d00      	cmp	r5, #0
 800ad7e:	4606      	mov	r6, r0
 800ad80:	db01      	blt.n	800ad86 <_malloc_r+0x1a>
 800ad82:	42a9      	cmp	r1, r5
 800ad84:	d903      	bls.n	800ad8e <_malloc_r+0x22>
 800ad86:	230c      	movs	r3, #12
 800ad88:	6033      	str	r3, [r6, #0]
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad8e:	f000 fc51 	bl	800b634 <__malloc_lock>
 800ad92:	4921      	ldr	r1, [pc, #132]	; (800ae18 <_malloc_r+0xac>)
 800ad94:	680a      	ldr	r2, [r1, #0]
 800ad96:	4614      	mov	r4, r2
 800ad98:	b99c      	cbnz	r4, 800adc2 <_malloc_r+0x56>
 800ad9a:	4f20      	ldr	r7, [pc, #128]	; (800ae1c <_malloc_r+0xb0>)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	b923      	cbnz	r3, 800adaa <_malloc_r+0x3e>
 800ada0:	4621      	mov	r1, r4
 800ada2:	4630      	mov	r0, r6
 800ada4:	f000 f996 	bl	800b0d4 <_sbrk_r>
 800ada8:	6038      	str	r0, [r7, #0]
 800adaa:	4629      	mov	r1, r5
 800adac:	4630      	mov	r0, r6
 800adae:	f000 f991 	bl	800b0d4 <_sbrk_r>
 800adb2:	1c43      	adds	r3, r0, #1
 800adb4:	d123      	bne.n	800adfe <_malloc_r+0x92>
 800adb6:	230c      	movs	r3, #12
 800adb8:	6033      	str	r3, [r6, #0]
 800adba:	4630      	mov	r0, r6
 800adbc:	f000 fc40 	bl	800b640 <__malloc_unlock>
 800adc0:	e7e3      	b.n	800ad8a <_malloc_r+0x1e>
 800adc2:	6823      	ldr	r3, [r4, #0]
 800adc4:	1b5b      	subs	r3, r3, r5
 800adc6:	d417      	bmi.n	800adf8 <_malloc_r+0x8c>
 800adc8:	2b0b      	cmp	r3, #11
 800adca:	d903      	bls.n	800add4 <_malloc_r+0x68>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	441c      	add	r4, r3
 800add0:	6025      	str	r5, [r4, #0]
 800add2:	e004      	b.n	800adde <_malloc_r+0x72>
 800add4:	6863      	ldr	r3, [r4, #4]
 800add6:	42a2      	cmp	r2, r4
 800add8:	bf0c      	ite	eq
 800adda:	600b      	streq	r3, [r1, #0]
 800addc:	6053      	strne	r3, [r2, #4]
 800adde:	4630      	mov	r0, r6
 800ade0:	f000 fc2e 	bl	800b640 <__malloc_unlock>
 800ade4:	f104 000b 	add.w	r0, r4, #11
 800ade8:	1d23      	adds	r3, r4, #4
 800adea:	f020 0007 	bic.w	r0, r0, #7
 800adee:	1ac2      	subs	r2, r0, r3
 800adf0:	d0cc      	beq.n	800ad8c <_malloc_r+0x20>
 800adf2:	1a1b      	subs	r3, r3, r0
 800adf4:	50a3      	str	r3, [r4, r2]
 800adf6:	e7c9      	b.n	800ad8c <_malloc_r+0x20>
 800adf8:	4622      	mov	r2, r4
 800adfa:	6864      	ldr	r4, [r4, #4]
 800adfc:	e7cc      	b.n	800ad98 <_malloc_r+0x2c>
 800adfe:	1cc4      	adds	r4, r0, #3
 800ae00:	f024 0403 	bic.w	r4, r4, #3
 800ae04:	42a0      	cmp	r0, r4
 800ae06:	d0e3      	beq.n	800add0 <_malloc_r+0x64>
 800ae08:	1a21      	subs	r1, r4, r0
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	f000 f962 	bl	800b0d4 <_sbrk_r>
 800ae10:	3001      	adds	r0, #1
 800ae12:	d1dd      	bne.n	800add0 <_malloc_r+0x64>
 800ae14:	e7cf      	b.n	800adb6 <_malloc_r+0x4a>
 800ae16:	bf00      	nop
 800ae18:	20000210 	.word	0x20000210
 800ae1c:	20000214 	.word	0x20000214

0800ae20 <__sfputc_r>:
 800ae20:	6893      	ldr	r3, [r2, #8]
 800ae22:	3b01      	subs	r3, #1
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	b410      	push	{r4}
 800ae28:	6093      	str	r3, [r2, #8]
 800ae2a:	da08      	bge.n	800ae3e <__sfputc_r+0x1e>
 800ae2c:	6994      	ldr	r4, [r2, #24]
 800ae2e:	42a3      	cmp	r3, r4
 800ae30:	db01      	blt.n	800ae36 <__sfputc_r+0x16>
 800ae32:	290a      	cmp	r1, #10
 800ae34:	d103      	bne.n	800ae3e <__sfputc_r+0x1e>
 800ae36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae3a:	f000 b99f 	b.w	800b17c <__swbuf_r>
 800ae3e:	6813      	ldr	r3, [r2, #0]
 800ae40:	1c58      	adds	r0, r3, #1
 800ae42:	6010      	str	r0, [r2, #0]
 800ae44:	7019      	strb	r1, [r3, #0]
 800ae46:	4608      	mov	r0, r1
 800ae48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae4c:	4770      	bx	lr

0800ae4e <__sfputs_r>:
 800ae4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae50:	4606      	mov	r6, r0
 800ae52:	460f      	mov	r7, r1
 800ae54:	4614      	mov	r4, r2
 800ae56:	18d5      	adds	r5, r2, r3
 800ae58:	42ac      	cmp	r4, r5
 800ae5a:	d101      	bne.n	800ae60 <__sfputs_r+0x12>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	e007      	b.n	800ae70 <__sfputs_r+0x22>
 800ae60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae64:	463a      	mov	r2, r7
 800ae66:	4630      	mov	r0, r6
 800ae68:	f7ff ffda 	bl	800ae20 <__sfputc_r>
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	d1f3      	bne.n	800ae58 <__sfputs_r+0xa>
 800ae70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae74 <_vfiprintf_r>:
 800ae74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae78:	460d      	mov	r5, r1
 800ae7a:	b09d      	sub	sp, #116	; 0x74
 800ae7c:	4614      	mov	r4, r2
 800ae7e:	4698      	mov	r8, r3
 800ae80:	4606      	mov	r6, r0
 800ae82:	b118      	cbz	r0, 800ae8c <_vfiprintf_r+0x18>
 800ae84:	6983      	ldr	r3, [r0, #24]
 800ae86:	b90b      	cbnz	r3, 800ae8c <_vfiprintf_r+0x18>
 800ae88:	f7ff fad6 	bl	800a438 <__sinit>
 800ae8c:	4b89      	ldr	r3, [pc, #548]	; (800b0b4 <_vfiprintf_r+0x240>)
 800ae8e:	429d      	cmp	r5, r3
 800ae90:	d11b      	bne.n	800aeca <_vfiprintf_r+0x56>
 800ae92:	6875      	ldr	r5, [r6, #4]
 800ae94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae96:	07d9      	lsls	r1, r3, #31
 800ae98:	d405      	bmi.n	800aea6 <_vfiprintf_r+0x32>
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	059a      	lsls	r2, r3, #22
 800ae9e:	d402      	bmi.n	800aea6 <_vfiprintf_r+0x32>
 800aea0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aea2:	f7ff fb6c 	bl	800a57e <__retarget_lock_acquire_recursive>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	071b      	lsls	r3, r3, #28
 800aeaa:	d501      	bpl.n	800aeb0 <_vfiprintf_r+0x3c>
 800aeac:	692b      	ldr	r3, [r5, #16]
 800aeae:	b9eb      	cbnz	r3, 800aeec <_vfiprintf_r+0x78>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4630      	mov	r0, r6
 800aeb4:	f000 f9c6 	bl	800b244 <__swsetup_r>
 800aeb8:	b1c0      	cbz	r0, 800aeec <_vfiprintf_r+0x78>
 800aeba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aebc:	07dc      	lsls	r4, r3, #31
 800aebe:	d50e      	bpl.n	800aede <_vfiprintf_r+0x6a>
 800aec0:	f04f 30ff 	mov.w	r0, #4294967295
 800aec4:	b01d      	add	sp, #116	; 0x74
 800aec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeca:	4b7b      	ldr	r3, [pc, #492]	; (800b0b8 <_vfiprintf_r+0x244>)
 800aecc:	429d      	cmp	r5, r3
 800aece:	d101      	bne.n	800aed4 <_vfiprintf_r+0x60>
 800aed0:	68b5      	ldr	r5, [r6, #8]
 800aed2:	e7df      	b.n	800ae94 <_vfiprintf_r+0x20>
 800aed4:	4b79      	ldr	r3, [pc, #484]	; (800b0bc <_vfiprintf_r+0x248>)
 800aed6:	429d      	cmp	r5, r3
 800aed8:	bf08      	it	eq
 800aeda:	68f5      	ldreq	r5, [r6, #12]
 800aedc:	e7da      	b.n	800ae94 <_vfiprintf_r+0x20>
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	0598      	lsls	r0, r3, #22
 800aee2:	d4ed      	bmi.n	800aec0 <_vfiprintf_r+0x4c>
 800aee4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aee6:	f7ff fb4b 	bl	800a580 <__retarget_lock_release_recursive>
 800aeea:	e7e9      	b.n	800aec0 <_vfiprintf_r+0x4c>
 800aeec:	2300      	movs	r3, #0
 800aeee:	9309      	str	r3, [sp, #36]	; 0x24
 800aef0:	2320      	movs	r3, #32
 800aef2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aefa:	2330      	movs	r3, #48	; 0x30
 800aefc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b0c0 <_vfiprintf_r+0x24c>
 800af00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800af04:	f04f 0901 	mov.w	r9, #1
 800af08:	4623      	mov	r3, r4
 800af0a:	469a      	mov	sl, r3
 800af0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af10:	b10a      	cbz	r2, 800af16 <_vfiprintf_r+0xa2>
 800af12:	2a25      	cmp	r2, #37	; 0x25
 800af14:	d1f9      	bne.n	800af0a <_vfiprintf_r+0x96>
 800af16:	ebba 0b04 	subs.w	fp, sl, r4
 800af1a:	d00b      	beq.n	800af34 <_vfiprintf_r+0xc0>
 800af1c:	465b      	mov	r3, fp
 800af1e:	4622      	mov	r2, r4
 800af20:	4629      	mov	r1, r5
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ff93 	bl	800ae4e <__sfputs_r>
 800af28:	3001      	adds	r0, #1
 800af2a:	f000 80aa 	beq.w	800b082 <_vfiprintf_r+0x20e>
 800af2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800af30:	445a      	add	r2, fp
 800af32:	9209      	str	r2, [sp, #36]	; 0x24
 800af34:	f89a 3000 	ldrb.w	r3, [sl]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	f000 80a2 	beq.w	800b082 <_vfiprintf_r+0x20e>
 800af3e:	2300      	movs	r3, #0
 800af40:	f04f 32ff 	mov.w	r2, #4294967295
 800af44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af48:	f10a 0a01 	add.w	sl, sl, #1
 800af4c:	9304      	str	r3, [sp, #16]
 800af4e:	9307      	str	r3, [sp, #28]
 800af50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af54:	931a      	str	r3, [sp, #104]	; 0x68
 800af56:	4654      	mov	r4, sl
 800af58:	2205      	movs	r2, #5
 800af5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af5e:	4858      	ldr	r0, [pc, #352]	; (800b0c0 <_vfiprintf_r+0x24c>)
 800af60:	f7f5 f956 	bl	8000210 <memchr>
 800af64:	9a04      	ldr	r2, [sp, #16]
 800af66:	b9d8      	cbnz	r0, 800afa0 <_vfiprintf_r+0x12c>
 800af68:	06d1      	lsls	r1, r2, #27
 800af6a:	bf44      	itt	mi
 800af6c:	2320      	movmi	r3, #32
 800af6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af72:	0713      	lsls	r3, r2, #28
 800af74:	bf44      	itt	mi
 800af76:	232b      	movmi	r3, #43	; 0x2b
 800af78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af7c:	f89a 3000 	ldrb.w	r3, [sl]
 800af80:	2b2a      	cmp	r3, #42	; 0x2a
 800af82:	d015      	beq.n	800afb0 <_vfiprintf_r+0x13c>
 800af84:	9a07      	ldr	r2, [sp, #28]
 800af86:	4654      	mov	r4, sl
 800af88:	2000      	movs	r0, #0
 800af8a:	f04f 0c0a 	mov.w	ip, #10
 800af8e:	4621      	mov	r1, r4
 800af90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af94:	3b30      	subs	r3, #48	; 0x30
 800af96:	2b09      	cmp	r3, #9
 800af98:	d94e      	bls.n	800b038 <_vfiprintf_r+0x1c4>
 800af9a:	b1b0      	cbz	r0, 800afca <_vfiprintf_r+0x156>
 800af9c:	9207      	str	r2, [sp, #28]
 800af9e:	e014      	b.n	800afca <_vfiprintf_r+0x156>
 800afa0:	eba0 0308 	sub.w	r3, r0, r8
 800afa4:	fa09 f303 	lsl.w	r3, r9, r3
 800afa8:	4313      	orrs	r3, r2
 800afaa:	9304      	str	r3, [sp, #16]
 800afac:	46a2      	mov	sl, r4
 800afae:	e7d2      	b.n	800af56 <_vfiprintf_r+0xe2>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	1d19      	adds	r1, r3, #4
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	9103      	str	r1, [sp, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	bfbb      	ittet	lt
 800afbc:	425b      	neglt	r3, r3
 800afbe:	f042 0202 	orrlt.w	r2, r2, #2
 800afc2:	9307      	strge	r3, [sp, #28]
 800afc4:	9307      	strlt	r3, [sp, #28]
 800afc6:	bfb8      	it	lt
 800afc8:	9204      	strlt	r2, [sp, #16]
 800afca:	7823      	ldrb	r3, [r4, #0]
 800afcc:	2b2e      	cmp	r3, #46	; 0x2e
 800afce:	d10c      	bne.n	800afea <_vfiprintf_r+0x176>
 800afd0:	7863      	ldrb	r3, [r4, #1]
 800afd2:	2b2a      	cmp	r3, #42	; 0x2a
 800afd4:	d135      	bne.n	800b042 <_vfiprintf_r+0x1ce>
 800afd6:	9b03      	ldr	r3, [sp, #12]
 800afd8:	1d1a      	adds	r2, r3, #4
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	9203      	str	r2, [sp, #12]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	bfb8      	it	lt
 800afe2:	f04f 33ff 	movlt.w	r3, #4294967295
 800afe6:	3402      	adds	r4, #2
 800afe8:	9305      	str	r3, [sp, #20]
 800afea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b0d0 <_vfiprintf_r+0x25c>
 800afee:	7821      	ldrb	r1, [r4, #0]
 800aff0:	2203      	movs	r2, #3
 800aff2:	4650      	mov	r0, sl
 800aff4:	f7f5 f90c 	bl	8000210 <memchr>
 800aff8:	b140      	cbz	r0, 800b00c <_vfiprintf_r+0x198>
 800affa:	2340      	movs	r3, #64	; 0x40
 800affc:	eba0 000a 	sub.w	r0, r0, sl
 800b000:	fa03 f000 	lsl.w	r0, r3, r0
 800b004:	9b04      	ldr	r3, [sp, #16]
 800b006:	4303      	orrs	r3, r0
 800b008:	3401      	adds	r4, #1
 800b00a:	9304      	str	r3, [sp, #16]
 800b00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b010:	482c      	ldr	r0, [pc, #176]	; (800b0c4 <_vfiprintf_r+0x250>)
 800b012:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b016:	2206      	movs	r2, #6
 800b018:	f7f5 f8fa 	bl	8000210 <memchr>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d03f      	beq.n	800b0a0 <_vfiprintf_r+0x22c>
 800b020:	4b29      	ldr	r3, [pc, #164]	; (800b0c8 <_vfiprintf_r+0x254>)
 800b022:	bb1b      	cbnz	r3, 800b06c <_vfiprintf_r+0x1f8>
 800b024:	9b03      	ldr	r3, [sp, #12]
 800b026:	3307      	adds	r3, #7
 800b028:	f023 0307 	bic.w	r3, r3, #7
 800b02c:	3308      	adds	r3, #8
 800b02e:	9303      	str	r3, [sp, #12]
 800b030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b032:	443b      	add	r3, r7
 800b034:	9309      	str	r3, [sp, #36]	; 0x24
 800b036:	e767      	b.n	800af08 <_vfiprintf_r+0x94>
 800b038:	fb0c 3202 	mla	r2, ip, r2, r3
 800b03c:	460c      	mov	r4, r1
 800b03e:	2001      	movs	r0, #1
 800b040:	e7a5      	b.n	800af8e <_vfiprintf_r+0x11a>
 800b042:	2300      	movs	r3, #0
 800b044:	3401      	adds	r4, #1
 800b046:	9305      	str	r3, [sp, #20]
 800b048:	4619      	mov	r1, r3
 800b04a:	f04f 0c0a 	mov.w	ip, #10
 800b04e:	4620      	mov	r0, r4
 800b050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b054:	3a30      	subs	r2, #48	; 0x30
 800b056:	2a09      	cmp	r2, #9
 800b058:	d903      	bls.n	800b062 <_vfiprintf_r+0x1ee>
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d0c5      	beq.n	800afea <_vfiprintf_r+0x176>
 800b05e:	9105      	str	r1, [sp, #20]
 800b060:	e7c3      	b.n	800afea <_vfiprintf_r+0x176>
 800b062:	fb0c 2101 	mla	r1, ip, r1, r2
 800b066:	4604      	mov	r4, r0
 800b068:	2301      	movs	r3, #1
 800b06a:	e7f0      	b.n	800b04e <_vfiprintf_r+0x1da>
 800b06c:	ab03      	add	r3, sp, #12
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	462a      	mov	r2, r5
 800b072:	4b16      	ldr	r3, [pc, #88]	; (800b0cc <_vfiprintf_r+0x258>)
 800b074:	a904      	add	r1, sp, #16
 800b076:	4630      	mov	r0, r6
 800b078:	f7fd ff2a 	bl	8008ed0 <_printf_float>
 800b07c:	4607      	mov	r7, r0
 800b07e:	1c78      	adds	r0, r7, #1
 800b080:	d1d6      	bne.n	800b030 <_vfiprintf_r+0x1bc>
 800b082:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b084:	07d9      	lsls	r1, r3, #31
 800b086:	d405      	bmi.n	800b094 <_vfiprintf_r+0x220>
 800b088:	89ab      	ldrh	r3, [r5, #12]
 800b08a:	059a      	lsls	r2, r3, #22
 800b08c:	d402      	bmi.n	800b094 <_vfiprintf_r+0x220>
 800b08e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b090:	f7ff fa76 	bl	800a580 <__retarget_lock_release_recursive>
 800b094:	89ab      	ldrh	r3, [r5, #12]
 800b096:	065b      	lsls	r3, r3, #25
 800b098:	f53f af12 	bmi.w	800aec0 <_vfiprintf_r+0x4c>
 800b09c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b09e:	e711      	b.n	800aec4 <_vfiprintf_r+0x50>
 800b0a0:	ab03      	add	r3, sp, #12
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	462a      	mov	r2, r5
 800b0a6:	4b09      	ldr	r3, [pc, #36]	; (800b0cc <_vfiprintf_r+0x258>)
 800b0a8:	a904      	add	r1, sp, #16
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	f7fe f9b4 	bl	8009418 <_printf_i>
 800b0b0:	e7e4      	b.n	800b07c <_vfiprintf_r+0x208>
 800b0b2:	bf00      	nop
 800b0b4:	0800b908 	.word	0x0800b908
 800b0b8:	0800b928 	.word	0x0800b928
 800b0bc:	0800b8e8 	.word	0x0800b8e8
 800b0c0:	0800baa4 	.word	0x0800baa4
 800b0c4:	0800baae 	.word	0x0800baae
 800b0c8:	08008ed1 	.word	0x08008ed1
 800b0cc:	0800ae4f 	.word	0x0800ae4f
 800b0d0:	0800baaa 	.word	0x0800baaa

0800b0d4 <_sbrk_r>:
 800b0d4:	b538      	push	{r3, r4, r5, lr}
 800b0d6:	4d06      	ldr	r5, [pc, #24]	; (800b0f0 <_sbrk_r+0x1c>)
 800b0d8:	2300      	movs	r3, #0
 800b0da:	4604      	mov	r4, r0
 800b0dc:	4608      	mov	r0, r1
 800b0de:	602b      	str	r3, [r5, #0]
 800b0e0:	f7f7 fde6 	bl	8002cb0 <_sbrk>
 800b0e4:	1c43      	adds	r3, r0, #1
 800b0e6:	d102      	bne.n	800b0ee <_sbrk_r+0x1a>
 800b0e8:	682b      	ldr	r3, [r5, #0]
 800b0ea:	b103      	cbz	r3, 800b0ee <_sbrk_r+0x1a>
 800b0ec:	6023      	str	r3, [r4, #0]
 800b0ee:	bd38      	pop	{r3, r4, r5, pc}
 800b0f0:	200004cc 	.word	0x200004cc

0800b0f4 <__sread>:
 800b0f4:	b510      	push	{r4, lr}
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0fc:	f000 faa6 	bl	800b64c <_read_r>
 800b100:	2800      	cmp	r0, #0
 800b102:	bfab      	itete	ge
 800b104:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b106:	89a3      	ldrhlt	r3, [r4, #12]
 800b108:	181b      	addge	r3, r3, r0
 800b10a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b10e:	bfac      	ite	ge
 800b110:	6563      	strge	r3, [r4, #84]	; 0x54
 800b112:	81a3      	strhlt	r3, [r4, #12]
 800b114:	bd10      	pop	{r4, pc}

0800b116 <__swrite>:
 800b116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b11a:	461f      	mov	r7, r3
 800b11c:	898b      	ldrh	r3, [r1, #12]
 800b11e:	05db      	lsls	r3, r3, #23
 800b120:	4605      	mov	r5, r0
 800b122:	460c      	mov	r4, r1
 800b124:	4616      	mov	r6, r2
 800b126:	d505      	bpl.n	800b134 <__swrite+0x1e>
 800b128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12c:	2302      	movs	r3, #2
 800b12e:	2200      	movs	r2, #0
 800b130:	f000 f9f8 	bl	800b524 <_lseek_r>
 800b134:	89a3      	ldrh	r3, [r4, #12]
 800b136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b13a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b13e:	81a3      	strh	r3, [r4, #12]
 800b140:	4632      	mov	r2, r6
 800b142:	463b      	mov	r3, r7
 800b144:	4628      	mov	r0, r5
 800b146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b14a:	f000 b869 	b.w	800b220 <_write_r>

0800b14e <__sseek>:
 800b14e:	b510      	push	{r4, lr}
 800b150:	460c      	mov	r4, r1
 800b152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b156:	f000 f9e5 	bl	800b524 <_lseek_r>
 800b15a:	1c43      	adds	r3, r0, #1
 800b15c:	89a3      	ldrh	r3, [r4, #12]
 800b15e:	bf15      	itete	ne
 800b160:	6560      	strne	r0, [r4, #84]	; 0x54
 800b162:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b166:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b16a:	81a3      	strheq	r3, [r4, #12]
 800b16c:	bf18      	it	ne
 800b16e:	81a3      	strhne	r3, [r4, #12]
 800b170:	bd10      	pop	{r4, pc}

0800b172 <__sclose>:
 800b172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b176:	f000 b8f1 	b.w	800b35c <_close_r>
	...

0800b17c <__swbuf_r>:
 800b17c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b17e:	460e      	mov	r6, r1
 800b180:	4614      	mov	r4, r2
 800b182:	4605      	mov	r5, r0
 800b184:	b118      	cbz	r0, 800b18e <__swbuf_r+0x12>
 800b186:	6983      	ldr	r3, [r0, #24]
 800b188:	b90b      	cbnz	r3, 800b18e <__swbuf_r+0x12>
 800b18a:	f7ff f955 	bl	800a438 <__sinit>
 800b18e:	4b21      	ldr	r3, [pc, #132]	; (800b214 <__swbuf_r+0x98>)
 800b190:	429c      	cmp	r4, r3
 800b192:	d12b      	bne.n	800b1ec <__swbuf_r+0x70>
 800b194:	686c      	ldr	r4, [r5, #4]
 800b196:	69a3      	ldr	r3, [r4, #24]
 800b198:	60a3      	str	r3, [r4, #8]
 800b19a:	89a3      	ldrh	r3, [r4, #12]
 800b19c:	071a      	lsls	r2, r3, #28
 800b19e:	d52f      	bpl.n	800b200 <__swbuf_r+0x84>
 800b1a0:	6923      	ldr	r3, [r4, #16]
 800b1a2:	b36b      	cbz	r3, 800b200 <__swbuf_r+0x84>
 800b1a4:	6923      	ldr	r3, [r4, #16]
 800b1a6:	6820      	ldr	r0, [r4, #0]
 800b1a8:	1ac0      	subs	r0, r0, r3
 800b1aa:	6963      	ldr	r3, [r4, #20]
 800b1ac:	b2f6      	uxtb	r6, r6
 800b1ae:	4283      	cmp	r3, r0
 800b1b0:	4637      	mov	r7, r6
 800b1b2:	dc04      	bgt.n	800b1be <__swbuf_r+0x42>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	f000 f966 	bl	800b488 <_fflush_r>
 800b1bc:	bb30      	cbnz	r0, 800b20c <__swbuf_r+0x90>
 800b1be:	68a3      	ldr	r3, [r4, #8]
 800b1c0:	3b01      	subs	r3, #1
 800b1c2:	60a3      	str	r3, [r4, #8]
 800b1c4:	6823      	ldr	r3, [r4, #0]
 800b1c6:	1c5a      	adds	r2, r3, #1
 800b1c8:	6022      	str	r2, [r4, #0]
 800b1ca:	701e      	strb	r6, [r3, #0]
 800b1cc:	6963      	ldr	r3, [r4, #20]
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	4283      	cmp	r3, r0
 800b1d2:	d004      	beq.n	800b1de <__swbuf_r+0x62>
 800b1d4:	89a3      	ldrh	r3, [r4, #12]
 800b1d6:	07db      	lsls	r3, r3, #31
 800b1d8:	d506      	bpl.n	800b1e8 <__swbuf_r+0x6c>
 800b1da:	2e0a      	cmp	r6, #10
 800b1dc:	d104      	bne.n	800b1e8 <__swbuf_r+0x6c>
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4628      	mov	r0, r5
 800b1e2:	f000 f951 	bl	800b488 <_fflush_r>
 800b1e6:	b988      	cbnz	r0, 800b20c <__swbuf_r+0x90>
 800b1e8:	4638      	mov	r0, r7
 800b1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b1ec:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <__swbuf_r+0x9c>)
 800b1ee:	429c      	cmp	r4, r3
 800b1f0:	d101      	bne.n	800b1f6 <__swbuf_r+0x7a>
 800b1f2:	68ac      	ldr	r4, [r5, #8]
 800b1f4:	e7cf      	b.n	800b196 <__swbuf_r+0x1a>
 800b1f6:	4b09      	ldr	r3, [pc, #36]	; (800b21c <__swbuf_r+0xa0>)
 800b1f8:	429c      	cmp	r4, r3
 800b1fa:	bf08      	it	eq
 800b1fc:	68ec      	ldreq	r4, [r5, #12]
 800b1fe:	e7ca      	b.n	800b196 <__swbuf_r+0x1a>
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	f000 f81e 	bl	800b244 <__swsetup_r>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d0cb      	beq.n	800b1a4 <__swbuf_r+0x28>
 800b20c:	f04f 37ff 	mov.w	r7, #4294967295
 800b210:	e7ea      	b.n	800b1e8 <__swbuf_r+0x6c>
 800b212:	bf00      	nop
 800b214:	0800b908 	.word	0x0800b908
 800b218:	0800b928 	.word	0x0800b928
 800b21c:	0800b8e8 	.word	0x0800b8e8

0800b220 <_write_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	; (800b240 <_write_r+0x20>)
 800b224:	4604      	mov	r4, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7f7 fced 	bl	8002c0e <_write>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_write_r+0x1e>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_write_r+0x1e>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	200004cc 	.word	0x200004cc

0800b244 <__swsetup_r>:
 800b244:	4b32      	ldr	r3, [pc, #200]	; (800b310 <__swsetup_r+0xcc>)
 800b246:	b570      	push	{r4, r5, r6, lr}
 800b248:	681d      	ldr	r5, [r3, #0]
 800b24a:	4606      	mov	r6, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	b125      	cbz	r5, 800b25a <__swsetup_r+0x16>
 800b250:	69ab      	ldr	r3, [r5, #24]
 800b252:	b913      	cbnz	r3, 800b25a <__swsetup_r+0x16>
 800b254:	4628      	mov	r0, r5
 800b256:	f7ff f8ef 	bl	800a438 <__sinit>
 800b25a:	4b2e      	ldr	r3, [pc, #184]	; (800b314 <__swsetup_r+0xd0>)
 800b25c:	429c      	cmp	r4, r3
 800b25e:	d10f      	bne.n	800b280 <__swsetup_r+0x3c>
 800b260:	686c      	ldr	r4, [r5, #4]
 800b262:	89a3      	ldrh	r3, [r4, #12]
 800b264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b268:	0719      	lsls	r1, r3, #28
 800b26a:	d42c      	bmi.n	800b2c6 <__swsetup_r+0x82>
 800b26c:	06dd      	lsls	r5, r3, #27
 800b26e:	d411      	bmi.n	800b294 <__swsetup_r+0x50>
 800b270:	2309      	movs	r3, #9
 800b272:	6033      	str	r3, [r6, #0]
 800b274:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b278:	81a3      	strh	r3, [r4, #12]
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	e03e      	b.n	800b2fe <__swsetup_r+0xba>
 800b280:	4b25      	ldr	r3, [pc, #148]	; (800b318 <__swsetup_r+0xd4>)
 800b282:	429c      	cmp	r4, r3
 800b284:	d101      	bne.n	800b28a <__swsetup_r+0x46>
 800b286:	68ac      	ldr	r4, [r5, #8]
 800b288:	e7eb      	b.n	800b262 <__swsetup_r+0x1e>
 800b28a:	4b24      	ldr	r3, [pc, #144]	; (800b31c <__swsetup_r+0xd8>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	bf08      	it	eq
 800b290:	68ec      	ldreq	r4, [r5, #12]
 800b292:	e7e6      	b.n	800b262 <__swsetup_r+0x1e>
 800b294:	0758      	lsls	r0, r3, #29
 800b296:	d512      	bpl.n	800b2be <__swsetup_r+0x7a>
 800b298:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b29a:	b141      	cbz	r1, 800b2ae <__swsetup_r+0x6a>
 800b29c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b2a0:	4299      	cmp	r1, r3
 800b2a2:	d002      	beq.n	800b2aa <__swsetup_r+0x66>
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f7ff fd11 	bl	800accc <_free_r>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	6363      	str	r3, [r4, #52]	; 0x34
 800b2ae:	89a3      	ldrh	r3, [r4, #12]
 800b2b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b2b4:	81a3      	strh	r3, [r4, #12]
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	6063      	str	r3, [r4, #4]
 800b2ba:	6923      	ldr	r3, [r4, #16]
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	89a3      	ldrh	r3, [r4, #12]
 800b2c0:	f043 0308 	orr.w	r3, r3, #8
 800b2c4:	81a3      	strh	r3, [r4, #12]
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	b94b      	cbnz	r3, 800b2de <__swsetup_r+0x9a>
 800b2ca:	89a3      	ldrh	r3, [r4, #12]
 800b2cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b2d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2d4:	d003      	beq.n	800b2de <__swsetup_r+0x9a>
 800b2d6:	4621      	mov	r1, r4
 800b2d8:	4630      	mov	r0, r6
 800b2da:	f000 f959 	bl	800b590 <__smakebuf_r>
 800b2de:	89a0      	ldrh	r0, [r4, #12]
 800b2e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b2e4:	f010 0301 	ands.w	r3, r0, #1
 800b2e8:	d00a      	beq.n	800b300 <__swsetup_r+0xbc>
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	60a3      	str	r3, [r4, #8]
 800b2ee:	6963      	ldr	r3, [r4, #20]
 800b2f0:	425b      	negs	r3, r3
 800b2f2:	61a3      	str	r3, [r4, #24]
 800b2f4:	6923      	ldr	r3, [r4, #16]
 800b2f6:	b943      	cbnz	r3, 800b30a <__swsetup_r+0xc6>
 800b2f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b2fc:	d1ba      	bne.n	800b274 <__swsetup_r+0x30>
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	0781      	lsls	r1, r0, #30
 800b302:	bf58      	it	pl
 800b304:	6963      	ldrpl	r3, [r4, #20]
 800b306:	60a3      	str	r3, [r4, #8]
 800b308:	e7f4      	b.n	800b2f4 <__swsetup_r+0xb0>
 800b30a:	2000      	movs	r0, #0
 800b30c:	e7f7      	b.n	800b2fe <__swsetup_r+0xba>
 800b30e:	bf00      	nop
 800b310:	2000000c 	.word	0x2000000c
 800b314:	0800b908 	.word	0x0800b908
 800b318:	0800b928 	.word	0x0800b928
 800b31c:	0800b8e8 	.word	0x0800b8e8

0800b320 <__assert_func>:
 800b320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b322:	4614      	mov	r4, r2
 800b324:	461a      	mov	r2, r3
 800b326:	4b09      	ldr	r3, [pc, #36]	; (800b34c <__assert_func+0x2c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4605      	mov	r5, r0
 800b32c:	68d8      	ldr	r0, [r3, #12]
 800b32e:	b14c      	cbz	r4, 800b344 <__assert_func+0x24>
 800b330:	4b07      	ldr	r3, [pc, #28]	; (800b350 <__assert_func+0x30>)
 800b332:	9100      	str	r1, [sp, #0]
 800b334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b338:	4906      	ldr	r1, [pc, #24]	; (800b354 <__assert_func+0x34>)
 800b33a:	462b      	mov	r3, r5
 800b33c:	f000 f8e0 	bl	800b500 <fiprintf>
 800b340:	f000 f9a3 	bl	800b68a <abort>
 800b344:	4b04      	ldr	r3, [pc, #16]	; (800b358 <__assert_func+0x38>)
 800b346:	461c      	mov	r4, r3
 800b348:	e7f3      	b.n	800b332 <__assert_func+0x12>
 800b34a:	bf00      	nop
 800b34c:	2000000c 	.word	0x2000000c
 800b350:	0800bab5 	.word	0x0800bab5
 800b354:	0800bac2 	.word	0x0800bac2
 800b358:	0800baf0 	.word	0x0800baf0

0800b35c <_close_r>:
 800b35c:	b538      	push	{r3, r4, r5, lr}
 800b35e:	4d06      	ldr	r5, [pc, #24]	; (800b378 <_close_r+0x1c>)
 800b360:	2300      	movs	r3, #0
 800b362:	4604      	mov	r4, r0
 800b364:	4608      	mov	r0, r1
 800b366:	602b      	str	r3, [r5, #0]
 800b368:	f7f7 fc6d 	bl	8002c46 <_close>
 800b36c:	1c43      	adds	r3, r0, #1
 800b36e:	d102      	bne.n	800b376 <_close_r+0x1a>
 800b370:	682b      	ldr	r3, [r5, #0]
 800b372:	b103      	cbz	r3, 800b376 <_close_r+0x1a>
 800b374:	6023      	str	r3, [r4, #0]
 800b376:	bd38      	pop	{r3, r4, r5, pc}
 800b378:	200004cc 	.word	0x200004cc

0800b37c <__sflush_r>:
 800b37c:	898a      	ldrh	r2, [r1, #12]
 800b37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b382:	4605      	mov	r5, r0
 800b384:	0710      	lsls	r0, r2, #28
 800b386:	460c      	mov	r4, r1
 800b388:	d458      	bmi.n	800b43c <__sflush_r+0xc0>
 800b38a:	684b      	ldr	r3, [r1, #4]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dc05      	bgt.n	800b39c <__sflush_r+0x20>
 800b390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b392:	2b00      	cmp	r3, #0
 800b394:	dc02      	bgt.n	800b39c <__sflush_r+0x20>
 800b396:	2000      	movs	r0, #0
 800b398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b39e:	2e00      	cmp	r6, #0
 800b3a0:	d0f9      	beq.n	800b396 <__sflush_r+0x1a>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b3a8:	682f      	ldr	r7, [r5, #0]
 800b3aa:	602b      	str	r3, [r5, #0]
 800b3ac:	d032      	beq.n	800b414 <__sflush_r+0x98>
 800b3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b3b0:	89a3      	ldrh	r3, [r4, #12]
 800b3b2:	075a      	lsls	r2, r3, #29
 800b3b4:	d505      	bpl.n	800b3c2 <__sflush_r+0x46>
 800b3b6:	6863      	ldr	r3, [r4, #4]
 800b3b8:	1ac0      	subs	r0, r0, r3
 800b3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b3bc:	b10b      	cbz	r3, 800b3c2 <__sflush_r+0x46>
 800b3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b3c0:	1ac0      	subs	r0, r0, r3
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b3c8:	6a21      	ldr	r1, [r4, #32]
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	47b0      	blx	r6
 800b3ce:	1c43      	adds	r3, r0, #1
 800b3d0:	89a3      	ldrh	r3, [r4, #12]
 800b3d2:	d106      	bne.n	800b3e2 <__sflush_r+0x66>
 800b3d4:	6829      	ldr	r1, [r5, #0]
 800b3d6:	291d      	cmp	r1, #29
 800b3d8:	d82c      	bhi.n	800b434 <__sflush_r+0xb8>
 800b3da:	4a2a      	ldr	r2, [pc, #168]	; (800b484 <__sflush_r+0x108>)
 800b3dc:	40ca      	lsrs	r2, r1
 800b3de:	07d6      	lsls	r6, r2, #31
 800b3e0:	d528      	bpl.n	800b434 <__sflush_r+0xb8>
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	6062      	str	r2, [r4, #4]
 800b3e6:	04d9      	lsls	r1, r3, #19
 800b3e8:	6922      	ldr	r2, [r4, #16]
 800b3ea:	6022      	str	r2, [r4, #0]
 800b3ec:	d504      	bpl.n	800b3f8 <__sflush_r+0x7c>
 800b3ee:	1c42      	adds	r2, r0, #1
 800b3f0:	d101      	bne.n	800b3f6 <__sflush_r+0x7a>
 800b3f2:	682b      	ldr	r3, [r5, #0]
 800b3f4:	b903      	cbnz	r3, 800b3f8 <__sflush_r+0x7c>
 800b3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800b3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3fa:	602f      	str	r7, [r5, #0]
 800b3fc:	2900      	cmp	r1, #0
 800b3fe:	d0ca      	beq.n	800b396 <__sflush_r+0x1a>
 800b400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b404:	4299      	cmp	r1, r3
 800b406:	d002      	beq.n	800b40e <__sflush_r+0x92>
 800b408:	4628      	mov	r0, r5
 800b40a:	f7ff fc5f 	bl	800accc <_free_r>
 800b40e:	2000      	movs	r0, #0
 800b410:	6360      	str	r0, [r4, #52]	; 0x34
 800b412:	e7c1      	b.n	800b398 <__sflush_r+0x1c>
 800b414:	6a21      	ldr	r1, [r4, #32]
 800b416:	2301      	movs	r3, #1
 800b418:	4628      	mov	r0, r5
 800b41a:	47b0      	blx	r6
 800b41c:	1c41      	adds	r1, r0, #1
 800b41e:	d1c7      	bne.n	800b3b0 <__sflush_r+0x34>
 800b420:	682b      	ldr	r3, [r5, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d0c4      	beq.n	800b3b0 <__sflush_r+0x34>
 800b426:	2b1d      	cmp	r3, #29
 800b428:	d001      	beq.n	800b42e <__sflush_r+0xb2>
 800b42a:	2b16      	cmp	r3, #22
 800b42c:	d101      	bne.n	800b432 <__sflush_r+0xb6>
 800b42e:	602f      	str	r7, [r5, #0]
 800b430:	e7b1      	b.n	800b396 <__sflush_r+0x1a>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b438:	81a3      	strh	r3, [r4, #12]
 800b43a:	e7ad      	b.n	800b398 <__sflush_r+0x1c>
 800b43c:	690f      	ldr	r7, [r1, #16]
 800b43e:	2f00      	cmp	r7, #0
 800b440:	d0a9      	beq.n	800b396 <__sflush_r+0x1a>
 800b442:	0793      	lsls	r3, r2, #30
 800b444:	680e      	ldr	r6, [r1, #0]
 800b446:	bf08      	it	eq
 800b448:	694b      	ldreq	r3, [r1, #20]
 800b44a:	600f      	str	r7, [r1, #0]
 800b44c:	bf18      	it	ne
 800b44e:	2300      	movne	r3, #0
 800b450:	eba6 0807 	sub.w	r8, r6, r7
 800b454:	608b      	str	r3, [r1, #8]
 800b456:	f1b8 0f00 	cmp.w	r8, #0
 800b45a:	dd9c      	ble.n	800b396 <__sflush_r+0x1a>
 800b45c:	6a21      	ldr	r1, [r4, #32]
 800b45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b460:	4643      	mov	r3, r8
 800b462:	463a      	mov	r2, r7
 800b464:	4628      	mov	r0, r5
 800b466:	47b0      	blx	r6
 800b468:	2800      	cmp	r0, #0
 800b46a:	dc06      	bgt.n	800b47a <__sflush_r+0xfe>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b472:	81a3      	strh	r3, [r4, #12]
 800b474:	f04f 30ff 	mov.w	r0, #4294967295
 800b478:	e78e      	b.n	800b398 <__sflush_r+0x1c>
 800b47a:	4407      	add	r7, r0
 800b47c:	eba8 0800 	sub.w	r8, r8, r0
 800b480:	e7e9      	b.n	800b456 <__sflush_r+0xda>
 800b482:	bf00      	nop
 800b484:	20400001 	.word	0x20400001

0800b488 <_fflush_r>:
 800b488:	b538      	push	{r3, r4, r5, lr}
 800b48a:	690b      	ldr	r3, [r1, #16]
 800b48c:	4605      	mov	r5, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	b913      	cbnz	r3, 800b498 <_fflush_r+0x10>
 800b492:	2500      	movs	r5, #0
 800b494:	4628      	mov	r0, r5
 800b496:	bd38      	pop	{r3, r4, r5, pc}
 800b498:	b118      	cbz	r0, 800b4a2 <_fflush_r+0x1a>
 800b49a:	6983      	ldr	r3, [r0, #24]
 800b49c:	b90b      	cbnz	r3, 800b4a2 <_fflush_r+0x1a>
 800b49e:	f7fe ffcb 	bl	800a438 <__sinit>
 800b4a2:	4b14      	ldr	r3, [pc, #80]	; (800b4f4 <_fflush_r+0x6c>)
 800b4a4:	429c      	cmp	r4, r3
 800b4a6:	d11b      	bne.n	800b4e0 <_fflush_r+0x58>
 800b4a8:	686c      	ldr	r4, [r5, #4]
 800b4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d0ef      	beq.n	800b492 <_fflush_r+0xa>
 800b4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b4b4:	07d0      	lsls	r0, r2, #31
 800b4b6:	d404      	bmi.n	800b4c2 <_fflush_r+0x3a>
 800b4b8:	0599      	lsls	r1, r3, #22
 800b4ba:	d402      	bmi.n	800b4c2 <_fflush_r+0x3a>
 800b4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4be:	f7ff f85e 	bl	800a57e <__retarget_lock_acquire_recursive>
 800b4c2:	4628      	mov	r0, r5
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f7ff ff59 	bl	800b37c <__sflush_r>
 800b4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b4cc:	07da      	lsls	r2, r3, #31
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	d4e0      	bmi.n	800b494 <_fflush_r+0xc>
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	059b      	lsls	r3, r3, #22
 800b4d6:	d4dd      	bmi.n	800b494 <_fflush_r+0xc>
 800b4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b4da:	f7ff f851 	bl	800a580 <__retarget_lock_release_recursive>
 800b4de:	e7d9      	b.n	800b494 <_fflush_r+0xc>
 800b4e0:	4b05      	ldr	r3, [pc, #20]	; (800b4f8 <_fflush_r+0x70>)
 800b4e2:	429c      	cmp	r4, r3
 800b4e4:	d101      	bne.n	800b4ea <_fflush_r+0x62>
 800b4e6:	68ac      	ldr	r4, [r5, #8]
 800b4e8:	e7df      	b.n	800b4aa <_fflush_r+0x22>
 800b4ea:	4b04      	ldr	r3, [pc, #16]	; (800b4fc <_fflush_r+0x74>)
 800b4ec:	429c      	cmp	r4, r3
 800b4ee:	bf08      	it	eq
 800b4f0:	68ec      	ldreq	r4, [r5, #12]
 800b4f2:	e7da      	b.n	800b4aa <_fflush_r+0x22>
 800b4f4:	0800b908 	.word	0x0800b908
 800b4f8:	0800b928 	.word	0x0800b928
 800b4fc:	0800b8e8 	.word	0x0800b8e8

0800b500 <fiprintf>:
 800b500:	b40e      	push	{r1, r2, r3}
 800b502:	b503      	push	{r0, r1, lr}
 800b504:	4601      	mov	r1, r0
 800b506:	ab03      	add	r3, sp, #12
 800b508:	4805      	ldr	r0, [pc, #20]	; (800b520 <fiprintf+0x20>)
 800b50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b50e:	6800      	ldr	r0, [r0, #0]
 800b510:	9301      	str	r3, [sp, #4]
 800b512:	f7ff fcaf 	bl	800ae74 <_vfiprintf_r>
 800b516:	b002      	add	sp, #8
 800b518:	f85d eb04 	ldr.w	lr, [sp], #4
 800b51c:	b003      	add	sp, #12
 800b51e:	4770      	bx	lr
 800b520:	2000000c 	.word	0x2000000c

0800b524 <_lseek_r>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	4d07      	ldr	r5, [pc, #28]	; (800b544 <_lseek_r+0x20>)
 800b528:	4604      	mov	r4, r0
 800b52a:	4608      	mov	r0, r1
 800b52c:	4611      	mov	r1, r2
 800b52e:	2200      	movs	r2, #0
 800b530:	602a      	str	r2, [r5, #0]
 800b532:	461a      	mov	r2, r3
 800b534:	f7f7 fbae 	bl	8002c94 <_lseek>
 800b538:	1c43      	adds	r3, r0, #1
 800b53a:	d102      	bne.n	800b542 <_lseek_r+0x1e>
 800b53c:	682b      	ldr	r3, [r5, #0]
 800b53e:	b103      	cbz	r3, 800b542 <_lseek_r+0x1e>
 800b540:	6023      	str	r3, [r4, #0]
 800b542:	bd38      	pop	{r3, r4, r5, pc}
 800b544:	200004cc 	.word	0x200004cc

0800b548 <__swhatbuf_r>:
 800b548:	b570      	push	{r4, r5, r6, lr}
 800b54a:	460e      	mov	r6, r1
 800b54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b550:	2900      	cmp	r1, #0
 800b552:	b096      	sub	sp, #88	; 0x58
 800b554:	4614      	mov	r4, r2
 800b556:	461d      	mov	r5, r3
 800b558:	da07      	bge.n	800b56a <__swhatbuf_r+0x22>
 800b55a:	2300      	movs	r3, #0
 800b55c:	602b      	str	r3, [r5, #0]
 800b55e:	89b3      	ldrh	r3, [r6, #12]
 800b560:	061a      	lsls	r2, r3, #24
 800b562:	d410      	bmi.n	800b586 <__swhatbuf_r+0x3e>
 800b564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b568:	e00e      	b.n	800b588 <__swhatbuf_r+0x40>
 800b56a:	466a      	mov	r2, sp
 800b56c:	f000 f894 	bl	800b698 <_fstat_r>
 800b570:	2800      	cmp	r0, #0
 800b572:	dbf2      	blt.n	800b55a <__swhatbuf_r+0x12>
 800b574:	9a01      	ldr	r2, [sp, #4]
 800b576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b57a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b57e:	425a      	negs	r2, r3
 800b580:	415a      	adcs	r2, r3
 800b582:	602a      	str	r2, [r5, #0]
 800b584:	e7ee      	b.n	800b564 <__swhatbuf_r+0x1c>
 800b586:	2340      	movs	r3, #64	; 0x40
 800b588:	2000      	movs	r0, #0
 800b58a:	6023      	str	r3, [r4, #0]
 800b58c:	b016      	add	sp, #88	; 0x58
 800b58e:	bd70      	pop	{r4, r5, r6, pc}

0800b590 <__smakebuf_r>:
 800b590:	898b      	ldrh	r3, [r1, #12]
 800b592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b594:	079d      	lsls	r5, r3, #30
 800b596:	4606      	mov	r6, r0
 800b598:	460c      	mov	r4, r1
 800b59a:	d507      	bpl.n	800b5ac <__smakebuf_r+0x1c>
 800b59c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	6123      	str	r3, [r4, #16]
 800b5a4:	2301      	movs	r3, #1
 800b5a6:	6163      	str	r3, [r4, #20]
 800b5a8:	b002      	add	sp, #8
 800b5aa:	bd70      	pop	{r4, r5, r6, pc}
 800b5ac:	ab01      	add	r3, sp, #4
 800b5ae:	466a      	mov	r2, sp
 800b5b0:	f7ff ffca 	bl	800b548 <__swhatbuf_r>
 800b5b4:	9900      	ldr	r1, [sp, #0]
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	f7ff fbd7 	bl	800ad6c <_malloc_r>
 800b5be:	b948      	cbnz	r0, 800b5d4 <__smakebuf_r+0x44>
 800b5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5c4:	059a      	lsls	r2, r3, #22
 800b5c6:	d4ef      	bmi.n	800b5a8 <__smakebuf_r+0x18>
 800b5c8:	f023 0303 	bic.w	r3, r3, #3
 800b5cc:	f043 0302 	orr.w	r3, r3, #2
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	e7e3      	b.n	800b59c <__smakebuf_r+0xc>
 800b5d4:	4b0d      	ldr	r3, [pc, #52]	; (800b60c <__smakebuf_r+0x7c>)
 800b5d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	6020      	str	r0, [r4, #0]
 800b5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5e0:	81a3      	strh	r3, [r4, #12]
 800b5e2:	9b00      	ldr	r3, [sp, #0]
 800b5e4:	6163      	str	r3, [r4, #20]
 800b5e6:	9b01      	ldr	r3, [sp, #4]
 800b5e8:	6120      	str	r0, [r4, #16]
 800b5ea:	b15b      	cbz	r3, 800b604 <__smakebuf_r+0x74>
 800b5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f000 f863 	bl	800b6bc <_isatty_r>
 800b5f6:	b128      	cbz	r0, 800b604 <__smakebuf_r+0x74>
 800b5f8:	89a3      	ldrh	r3, [r4, #12]
 800b5fa:	f023 0303 	bic.w	r3, r3, #3
 800b5fe:	f043 0301 	orr.w	r3, r3, #1
 800b602:	81a3      	strh	r3, [r4, #12]
 800b604:	89a0      	ldrh	r0, [r4, #12]
 800b606:	4305      	orrs	r5, r0
 800b608:	81a5      	strh	r5, [r4, #12]
 800b60a:	e7cd      	b.n	800b5a8 <__smakebuf_r+0x18>
 800b60c:	0800a3d1 	.word	0x0800a3d1

0800b610 <__ascii_mbtowc>:
 800b610:	b082      	sub	sp, #8
 800b612:	b901      	cbnz	r1, 800b616 <__ascii_mbtowc+0x6>
 800b614:	a901      	add	r1, sp, #4
 800b616:	b142      	cbz	r2, 800b62a <__ascii_mbtowc+0x1a>
 800b618:	b14b      	cbz	r3, 800b62e <__ascii_mbtowc+0x1e>
 800b61a:	7813      	ldrb	r3, [r2, #0]
 800b61c:	600b      	str	r3, [r1, #0]
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	1e10      	subs	r0, r2, #0
 800b622:	bf18      	it	ne
 800b624:	2001      	movne	r0, #1
 800b626:	b002      	add	sp, #8
 800b628:	4770      	bx	lr
 800b62a:	4610      	mov	r0, r2
 800b62c:	e7fb      	b.n	800b626 <__ascii_mbtowc+0x16>
 800b62e:	f06f 0001 	mvn.w	r0, #1
 800b632:	e7f8      	b.n	800b626 <__ascii_mbtowc+0x16>

0800b634 <__malloc_lock>:
 800b634:	4801      	ldr	r0, [pc, #4]	; (800b63c <__malloc_lock+0x8>)
 800b636:	f7fe bfa2 	b.w	800a57e <__retarget_lock_acquire_recursive>
 800b63a:	bf00      	nop
 800b63c:	200004c4 	.word	0x200004c4

0800b640 <__malloc_unlock>:
 800b640:	4801      	ldr	r0, [pc, #4]	; (800b648 <__malloc_unlock+0x8>)
 800b642:	f7fe bf9d 	b.w	800a580 <__retarget_lock_release_recursive>
 800b646:	bf00      	nop
 800b648:	200004c4 	.word	0x200004c4

0800b64c <_read_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4d07      	ldr	r5, [pc, #28]	; (800b66c <_read_r+0x20>)
 800b650:	4604      	mov	r4, r0
 800b652:	4608      	mov	r0, r1
 800b654:	4611      	mov	r1, r2
 800b656:	2200      	movs	r2, #0
 800b658:	602a      	str	r2, [r5, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	f7f7 faba 	bl	8002bd4 <_read>
 800b660:	1c43      	adds	r3, r0, #1
 800b662:	d102      	bne.n	800b66a <_read_r+0x1e>
 800b664:	682b      	ldr	r3, [r5, #0]
 800b666:	b103      	cbz	r3, 800b66a <_read_r+0x1e>
 800b668:	6023      	str	r3, [r4, #0]
 800b66a:	bd38      	pop	{r3, r4, r5, pc}
 800b66c:	200004cc 	.word	0x200004cc

0800b670 <__ascii_wctomb>:
 800b670:	b149      	cbz	r1, 800b686 <__ascii_wctomb+0x16>
 800b672:	2aff      	cmp	r2, #255	; 0xff
 800b674:	bf85      	ittet	hi
 800b676:	238a      	movhi	r3, #138	; 0x8a
 800b678:	6003      	strhi	r3, [r0, #0]
 800b67a:	700a      	strbls	r2, [r1, #0]
 800b67c:	f04f 30ff 	movhi.w	r0, #4294967295
 800b680:	bf98      	it	ls
 800b682:	2001      	movls	r0, #1
 800b684:	4770      	bx	lr
 800b686:	4608      	mov	r0, r1
 800b688:	4770      	bx	lr

0800b68a <abort>:
 800b68a:	b508      	push	{r3, lr}
 800b68c:	2006      	movs	r0, #6
 800b68e:	f000 f84d 	bl	800b72c <raise>
 800b692:	2001      	movs	r0, #1
 800b694:	f7f7 fa94 	bl	8002bc0 <_exit>

0800b698 <_fstat_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4d07      	ldr	r5, [pc, #28]	; (800b6b8 <_fstat_r+0x20>)
 800b69c:	2300      	movs	r3, #0
 800b69e:	4604      	mov	r4, r0
 800b6a0:	4608      	mov	r0, r1
 800b6a2:	4611      	mov	r1, r2
 800b6a4:	602b      	str	r3, [r5, #0]
 800b6a6:	f7f7 fada 	bl	8002c5e <_fstat>
 800b6aa:	1c43      	adds	r3, r0, #1
 800b6ac:	d102      	bne.n	800b6b4 <_fstat_r+0x1c>
 800b6ae:	682b      	ldr	r3, [r5, #0]
 800b6b0:	b103      	cbz	r3, 800b6b4 <_fstat_r+0x1c>
 800b6b2:	6023      	str	r3, [r4, #0]
 800b6b4:	bd38      	pop	{r3, r4, r5, pc}
 800b6b6:	bf00      	nop
 800b6b8:	200004cc 	.word	0x200004cc

0800b6bc <_isatty_r>:
 800b6bc:	b538      	push	{r3, r4, r5, lr}
 800b6be:	4d06      	ldr	r5, [pc, #24]	; (800b6d8 <_isatty_r+0x1c>)
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4604      	mov	r4, r0
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	602b      	str	r3, [r5, #0]
 800b6c8:	f7f7 fad9 	bl	8002c7e <_isatty>
 800b6cc:	1c43      	adds	r3, r0, #1
 800b6ce:	d102      	bne.n	800b6d6 <_isatty_r+0x1a>
 800b6d0:	682b      	ldr	r3, [r5, #0]
 800b6d2:	b103      	cbz	r3, 800b6d6 <_isatty_r+0x1a>
 800b6d4:	6023      	str	r3, [r4, #0]
 800b6d6:	bd38      	pop	{r3, r4, r5, pc}
 800b6d8:	200004cc 	.word	0x200004cc

0800b6dc <_raise_r>:
 800b6dc:	291f      	cmp	r1, #31
 800b6de:	b538      	push	{r3, r4, r5, lr}
 800b6e0:	4604      	mov	r4, r0
 800b6e2:	460d      	mov	r5, r1
 800b6e4:	d904      	bls.n	800b6f0 <_raise_r+0x14>
 800b6e6:	2316      	movs	r3, #22
 800b6e8:	6003      	str	r3, [r0, #0]
 800b6ea:	f04f 30ff 	mov.w	r0, #4294967295
 800b6ee:	bd38      	pop	{r3, r4, r5, pc}
 800b6f0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b6f2:	b112      	cbz	r2, 800b6fa <_raise_r+0x1e>
 800b6f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b6f8:	b94b      	cbnz	r3, 800b70e <_raise_r+0x32>
 800b6fa:	4620      	mov	r0, r4
 800b6fc:	f000 f830 	bl	800b760 <_getpid_r>
 800b700:	462a      	mov	r2, r5
 800b702:	4601      	mov	r1, r0
 800b704:	4620      	mov	r0, r4
 800b706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b70a:	f000 b817 	b.w	800b73c <_kill_r>
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d00a      	beq.n	800b728 <_raise_r+0x4c>
 800b712:	1c59      	adds	r1, r3, #1
 800b714:	d103      	bne.n	800b71e <_raise_r+0x42>
 800b716:	2316      	movs	r3, #22
 800b718:	6003      	str	r3, [r0, #0]
 800b71a:	2001      	movs	r0, #1
 800b71c:	e7e7      	b.n	800b6ee <_raise_r+0x12>
 800b71e:	2400      	movs	r4, #0
 800b720:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b724:	4628      	mov	r0, r5
 800b726:	4798      	blx	r3
 800b728:	2000      	movs	r0, #0
 800b72a:	e7e0      	b.n	800b6ee <_raise_r+0x12>

0800b72c <raise>:
 800b72c:	4b02      	ldr	r3, [pc, #8]	; (800b738 <raise+0xc>)
 800b72e:	4601      	mov	r1, r0
 800b730:	6818      	ldr	r0, [r3, #0]
 800b732:	f7ff bfd3 	b.w	800b6dc <_raise_r>
 800b736:	bf00      	nop
 800b738:	2000000c 	.word	0x2000000c

0800b73c <_kill_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4d07      	ldr	r5, [pc, #28]	; (800b75c <_kill_r+0x20>)
 800b740:	2300      	movs	r3, #0
 800b742:	4604      	mov	r4, r0
 800b744:	4608      	mov	r0, r1
 800b746:	4611      	mov	r1, r2
 800b748:	602b      	str	r3, [r5, #0]
 800b74a:	f7f7 fa29 	bl	8002ba0 <_kill>
 800b74e:	1c43      	adds	r3, r0, #1
 800b750:	d102      	bne.n	800b758 <_kill_r+0x1c>
 800b752:	682b      	ldr	r3, [r5, #0]
 800b754:	b103      	cbz	r3, 800b758 <_kill_r+0x1c>
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	bd38      	pop	{r3, r4, r5, pc}
 800b75a:	bf00      	nop
 800b75c:	200004cc 	.word	0x200004cc

0800b760 <_getpid_r>:
 800b760:	f7f7 ba16 	b.w	8002b90 <_getpid>

0800b764 <_init>:
 800b764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b766:	bf00      	nop
 800b768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b76a:	bc08      	pop	{r3}
 800b76c:	469e      	mov	lr, r3
 800b76e:	4770      	bx	lr

0800b770 <_fini>:
 800b770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b772:	bf00      	nop
 800b774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b776:	bc08      	pop	{r3}
 800b778:	469e      	mov	lr, r3
 800b77a:	4770      	bx	lr
